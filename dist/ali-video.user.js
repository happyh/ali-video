// ==UserScript==
// @name         阿广的阿里云盘助手
// @namespace    http://tampermonkey.net/
// @version      2.1.8
// @author       罗根大人
// @description  支持生成文件下载链接、修改文件后缀,支持第三方播放器Artplayer(突破视频2分钟限制,长按倍速,选集,历史播放)
// @license      MIT
// @icon         https://img.alicdn.com/imgextra/i1/O1CN01JDQCi21Dc8EfbRwvF_!!6000000000236-73-tps-64-64.ico
// @match        https://www.aliyundrive.com/*
// @match        https://www.alipan.com/*
// @require      https://cdn.bootcdn.net/ajax/libs/vue/3.5.1/vue.global.min.js
// @require      data:application/javascript,window.Vue%3DVue%3B
// @require      https://cdn.bootcdn.net/ajax/libs/jquery/3.7.1/jquery.min.js
// @require      https://cdn.bootcdn.net/ajax/libs/axios/1.7.7/axios.min.js
// @require      https://cdn.bootcdn.net/ajax/libs/artplayer/4.6.2/artplayer.min.js
// @require      https://cdn.bootcdn.net/ajax/libs/element-plus/2.8.1/index.full.min.js
// @resource     element-plus/dist/index.css  https://cdn.bootcdn.net/ajax/libs/element-plus/2.8.1/index.min.css
// @grant        GM_getResourceText
// @grant        unsafeWindow
// ==/UserScript==

(t=>{const e=document.createElement("style");e.dataset.source="vite-plugin-monkey",e.innerText=t,document.head.appendChild(e)})(" .icon-wrapper--3dbbo[data-v-4bef4f78]{height:28px;width:28px;display:-ms-flexbox;display:flex;border-radius:5px;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;color:var(--context_secondary);position:absolute;top:18px;right:16px;-webkit-transition:all .3s ease;-o-transition:all .3s ease;transition:all .3s ease;cursor:pointer;z-index:10}.notice2[data-v-4bef4f78]{margin:2px 0 0;color:red;font-size:8pt}.close-icon--33bP0[data-v-4bef4f78]{font-size:18px}.icon--d-ejA[data-v-4bef4f78]{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;text-align:center}.content-wrapper--1_WJv[data-v-4bef4f78]{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center}.notice[data-v-ff5973d9]{color:#6592f9;font-size:10pt}.notice1[data-v-ff5973d9]{margin:2px 0 0;color:#e6a23c;font-size:8pt}.notice2[data-v-ff5973d9]{margin:2px 0 0;color:red;font-size:8pt}.footer[data-v-ff5973d9]{height:68px;background:var(--background_secondary_blur);-webkit-backdrop-filter:blur(30px);backdrop-filter:blur(30px);margin:-20px;padding:0 20px;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between;border-radius:0 0 10px 10px}.notice1[data-v-8cb6b90e]{margin:2px 0 0;color:#e6a23c;font-size:8pt}.breadcrumb-item--tV9dn[data-v-8cb6b90e]{font-size:12px}.td--SGrZj[data-v-8cb6b90e]{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-negative:0;flex-shrink:0;height:52px;position:relative}.td---v-kp[data-v-8cb6b90e]{position:relative;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-negative:0;flex-shrink:0;padding:0 24px}.cover--Mn1Bt[data-v-8cb6b90e]{margin-right:20px}.folder-cover--ExDmp[data-v-8cb6b90e]{position:relative;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-align:center;align-items:center;-ms-flex-negative:0;flex-shrink:0;-ms-flex-positive:0;flex-grow:0}.folder-cover--ExDmp[data-size=XXS][data-v-8cb6b90e],.folder-cover--ExDmp[data-size=XXS] .fileicon--Ob-Oj[data-v-8cb6b90e]{width:28px;height:28px}.fileicon---webs[data-v-8cb6b90e]{max-width:100%;max-height:100%}.breadcrumb-wrap--Uq5Lb[data-v-8cb6b90e]{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;font-size:16px;line-height:1.4;width:100%;overflow:hidden;position:relative}.breadcrumb-wrap--Uq5Lb[data-align=left][data-v-8cb6b90e]{-ms-flex-pack:start;justify-content:flex-start}.breadcrumb-wrap--Uq5Lb .breadcrumb--gnRPG[data-v-8cb6b90e]{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;min-width:24px}.breadcrumb-item--j8J5H[data-v-8cb6b90e]{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;white-space:nowrap;color:var(--context_tertiary);cursor:pointer}.breadcrumb-item--j8J5H:first-child .breadcrumb-item-link--9zcQY[data-v-8cb6b90e]{font-weight:500}.breadcrumb-item--j8J5H .breadcrumb-item-link--9zcQY[data-v-8cb6b90e]{font-weight:400;line-height:1.4;-webkit-transition:all .3s ease;-o-transition:all .3s ease;transition:all .3s ease}.breadcrumb-item--j8J5H .breadcrumb-item-separator--MnbFV[data-v-8cb6b90e]{line-height:1.4;margin:0 8px}.card[data-v-152c05f8]{margin-bottom:10px}.player[data-v-d648fbfe]{display:flex;height:100%;align-items:center;justify-content:center;flex-direction:column}.notice[data-v-f4968c85]{color:#6592f9;font-size:8pt}.notice2[data-v-f4968c85]{color:red;font-size:8pt}.notice[data-v-62c7214b]{color:#6592f9;font-size:10pt}.notice1[data-v-62c7214b]{margin:2px 0 0;color:#e6a23c;font-size:8pt}.notice2[data-v-62c7214b]{margin:2px 0 0;color:red;font-size:8pt}.footer[data-v-62c7214b]{height:68px;background:var(--background_secondary_blur);-webkit-backdrop-filter:blur(30px);backdrop-filter:blur(30px);margin:-20px;padding:0 20px;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between;border-radius:0 0 10px 10px} ");

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
(function(elementPlus, $2, axios2, vue, Artplayer2) {
  "use strict";
  var monkeyWindow = window;
  var unsafeWindow = /* @__PURE__ */ (() => {
    return monkeyWindow.unsafeWindow;
  })();
  var message = null;
  let showMessge = function(option) {
    try {
      message.close();
    } catch {
    }
    message = elementPlus.ElMessage(option);
  };
  let showError$1 = function(msg, timeout, option) {
    showMessge({
      message: msg,
      type: "error",
      duration: timeout || 3e3,
      ...option
    });
  };
  let showSuccess = function(msg, timeout, option) {
    showMessge({
      message: msg,
      type: "success",
      duration: timeout || 3e3,
      ...option
    });
  };
  let css = "padding: 20px;overflow:auto";
  let showDiv = function(title2, app) {
    function format(s2, c) {
      return s2.replace(/{(\w+)}/g, function(m, p) {
        return c[p];
      });
    }
    let html2 = `<div class="ant-modal-root ant-modal-Link"><div class="ant-modal-mask" style="z-index: 999999;"></div><div tabindex="-1" class="ant-modal-wrap" role="dialog"><div role="document" class="ant-modal modal-wrapper--5SA7y" style="width: 666px;"><div class="ant-modal-content"><div class="ant-modal-header"><div class="ant-modal-title" id="rcDialogTitle1">{title}</div></div><div class="ant-modal-body"><div class="icon-wrapper--TbIdu"><span data-role="icon" data-render-as="svg" data-icon-type="PDSClose" class="close-icon--KF5OX icon--D3kMk  "><svg viewBox="0 0 1024 1024"><use xlink:href="#PDSClose"></use></svg></span></div><div class="ant-modal-container" style="${css}">`;
    html2 = format(html2, {
      title: title2
    });
    html2 += "</div></div></div></div></div></div></div>";
    $2("body").append(html2);
    app.mount(
      (() => {
        const app2 = document.createElement("div");
        $2(".ant-modal-container").append(app2);
        return app2;
      })()
    );
    $2(".ant-modal-Link .icon-wrapper--TbIdu").one("click", function() {
      $2(".ant-modal-Link").remove();
      app.unmount();
    });
    $2(".ant-modal-Link .ant-modal-wrap").on("click", function(event) {
      if ($2(event.target).closest(".ant-modal-content").length === 0) {
        $2(".ant-modal-Link").remove();
        app.unmount();
      }
    });
  };
  class Store {
    constructor() {
      this.prefix = "LGZS_";
    }
    getAliyun(key2 = "") {
      let item = localStorage.getItem(key2);
      if (!item) {
        return "";
      }
      try {
        return JSON.parse(item);
      } catch (e) {
        return item;
      }
    }
    getItem(key2 = "") {
      return this.getAliyun(this.prefix + key2);
    }
    setItem(key2 = "", value) {
      localStorage.setItem(this.prefix + key2, value instanceof Object ? JSON.stringify(value) : value);
    }
    removeItem(key2) {
      if (key2 == null || key2 == "") {
        return;
      }
      localStorage.removeItem(this.prefix + key2);
    }
  }
  const store = new Store();
  const getDownloadUrl = (data) => axios2.post("/v2/file/get_download_url", data, {
    headers: {
      "x-canary": "client=windows,app=adrive,version=v4.9.12"
    }
  });
  const search = (data) => axios2.post("/adrive/v3/file/search", data, {
    headers: {
      "x-canary": "client=windows,app=adrive,version=v4.9.12"
    }
  });
  const videoUpdate = (data) => axios2.post("/adrive/v2/video/update", data);
  const deviceLogout = () => axios2.post({
    method: "post",
    url: "/users/v1/users/device_logout",
    data: {}
  });
  const homeWidgets = () => axios2.post("/apps/v1/users/home/widgets", { "context": { "recentUsed": { "limit": 20 }, "recentSaved": { "limit": 1 } } });
  const shareVideoInfo = (fileId, share_id, shareToken) => axios2({
    method: "post",
    url: "/v2/file/get_share_link_video_preview_play_info",
    data: {
      category: "live_transcoding",
      file_id: fileId,
      get_preview_url: true,
      share_id,
      template_id: "",
      get_subtitle_info: true
    },
    headers: {
      "content-type": "application/json;charset=UTF-8",
      "x-share-token": shareToken
    }
  });
  const videoPreviewPlayInfo = (data) => axios2.post("/v2/file/get_video_preview_play_info", data);
  const shareLinkDownloadUrl = (data, shareToken) => axios2({
    method: "post",
    url: "/v2/file/get_share_link_download_url",
    data: {
      ...data
    },
    headers: {
      "content-type": "application/json;charset=UTF-8",
      "x-share-token": shareToken,
      "_token": false
    }
  });
  const createSessionUrl = (data, signature2, deviceId) => axios2({
    method: "post",
    url: "/users/v1/users/device/create_session",
    data: {
      ...data
    },
    headers: {
      "content-type": "application/json;charset=UTF-8",
      "x-canary": "client=web,app=adrive,version=v4.9.0",
      "_token": false,
      "x-signature": signature2,
      "x-device-id": deviceId
    }
  });
  const signInList = () => axios2({
    method: "post",
    url: "https://member.aliyundrive.com/v1/activity/sign_in_list",
    data: {
      "_rx-s": "mobile"
    },
    headers: {
      "content-type": "application/json;charset=UTF-8",
      "_token": false
    }
  });
  const signInReward = (signInDay) => axios2({
    method: "post",
    url: "https://member.aliyundrive.com/v1/activity/sign_in_reward",
    data: {
      "signInDay": signInDay
    },
    headers: {
      "content-type": "application/json;charset=UTF-8",
      "_token": false
    }
  });
  function copy(obj) {
    if (typeof obj !== "object" || obj == null) {
      return;
    }
    var newobj = obj.constructor === Array ? [] : {};
    for (var i2 in obj) {
      newobj[i2] = typeof obj[i2] === "object" ? copy(obj[i2]) : obj[i2];
    }
    return newobj;
  }
  class User {
    constructor() {
      this.is_login = false;
      this.vip_status = 0;
      this.mid = "";
      this.uname = "";
      this.has_init = false;
      this.page = {
        id: "",
        order: "",
        order_by: "",
        // 当前路径文件夹名称
        folderName: "",
        items: []
      };
      this.video = {
        id: "",
        // 时长
        duration: "",
        // 播放的时长
        play_cursor: "",
        // 视频名称
        name: "",
        thumbnail: "",
        // 0 首页自己的视频 1分享的视频
        type: -1,
        //当前视频所在的文件夹名称
        folderName: "",
        //跳转地址
        href: "",
        drive_id: ""
      };
      this.sessionData = {
        authorization: "",
        deviceId: "",
        signature: ""
      };
    }
    getVideoPage() {
      return this.video;
    }
    /**
     * 获取自动签到设置
     * 
     */
    getSignInSet() {
      let config = store.getItem("signIn_config");
      return config == "" ? {} : config;
    }
    setSignInSet(signInInfo) {
      return store.setItem("signIn_config", signInInfo);
    }
    //保存当前播放器设置
    saveVideoPlayerSet(art) {
      let playerSet = {
        // 全屏
        fullscreen: art.fullscreen,
        //网页全屏
        fullscreenWeb: art.fullscreenWeb,
        // 播放速度
        playbackRate: art.playbackRate,
        // 清晰度
        qualityHtml: art.qualityHtml,
        //字幕大小
        subtitleSize: art.subtitleSize || 20,
        //字幕间距
        subtitleMargin: art.subtitleMargin || 0,
        //字幕偏移
        subtitleOffset: art.subtitleOffset || 0,
        //字幕颜色
        subtitleColor: art.subtitleColor || "#FFF"
      };
      store.setItem("playerSet", playerSet);
    }
    // 获取播放器设置页面
    getVideoPlayerSet() {
      let playerSet = store.getItem("playerSet");
      if (playerSet == "") {
        playerSet = {};
      }
      return playerSet;
    }
    // 查看用户是否已经同意 或者 配置了 获取session 所需要的浏览器名称
    isConfigSession() {
      let deviceName = store.getItem("deviceName");
      let modelName = store.getItem("modelName");
      return !(deviceName == "" || modelName == "");
    }
    // 保存视频信息
    saveVideoInfo(id, name2, progress, folderName, href, share2, play_cursor, drive_id) {
      let videoInfo = {
        "category": "video",
        "name": name2,
        "progress": progress,
        "id": id,
        "folderName": folderName,
        "href": href,
        "share": share2,
        "play_cursor": play_cursor,
        "drive_id": drive_id
      };
      let list = store.getItem("historyVideo");
      if (list == "") {
        list = [];
      }
      let newList = [videoInfo];
      list.forEach(function(item, index) {
        if (item.id !== id && newList.length <= 5) {
          newList.push(item);
        }
      });
      store.setItem("historyVideo", newList);
    }
    clearSession() {
      store.removeItem("LG_session");
      store.removeItem("LG_session_1");
      store.removeItem("LG_session_Ref");
      store.removeItem("x-device-id");
      store.removeItem("x-signature");
      store.removeItem("deviceName");
      store.removeItem("modelName");
      store.removeItem("signIn_config");
    }
    removeSession() {
      store.removeItem("LG_session");
    }
    clearAll() {
      user.clearSession();
      user.clearVideoHistory();
    }
    clearVideoHistory() {
      store.removeItem("historyVideo");
    }
    //获取视频历史列表
    getVideoLookList() {
      let historyVideo = store.getItem("historyVideo");
      if (historyVideo == "") {
        historyVideo = [];
      }
      return historyVideo;
    }
    getDeviceId() {
      return store.getItem("x-device-id");
    }
    getSignature() {
      return store.getItem("x-signature");
    }
    getPage() {
      var page = this.page;
      if (!page.items) {
        page.items = [];
      }
      return page;
    }
    getAria2Set() {
      let aria2Set = store.getItem("Aria2Set");
      if (aria2Set == "") {
        aria2Set = {
          link: "http://localhost:6800/jsonrpc",
          path: "D:/aliyundriveDownloads",
          token: "",
          dirCreate: false
        };
      }
      return aria2Set;
    }
    getVideoSet() {
      let videoSet = store.getItem("VideoSet");
      if (videoSet == "") {
        videoSet = {
          quality: null
        };
      }
      return videoSet;
    }
    setVideoSet(videoSet) {
      store.setItem("VideoSet", videoSet);
    }
    setAria2Set(aria2Set) {
      store.setItem("Aria2Set", aria2Set);
    }
    refSession() {
      let now = (/* @__PURE__ */ new Date()).getTime();
      let time = store.getItem("LG_session") || 0;
      let token = user.getToken();
      if (token == null) {
        showError$1("获取当前凭证失败,请刷新或重新登录");
        return;
      } else if (!user.isExpires(token)) {
        showError$1("Token已失效,请刷新或重新登录");
        return;
      }
      let d = user.getDeviceId();
      let s2 = user.getSignature();
      if (now - time > 18e4 && token.user_id || d == "" || s2 == "") {
        store.setItem("LG_session", now);
        store.setItem("LG_session_Ref", "true");
      } else {
        console.log("未到刷新时间或者时机");
        return;
      }
      user.session(token, function(a, b) {
        store.setItem("LG_session", (/* @__PURE__ */ new Date()).getTime());
        store.removeItem("LG_session_Ref");
      });
    }
    sessionSet(authorization, deviceId, signature2) {
      this.sessionData = {
        authorization,
        deviceId,
        signature: signature2
      };
      store.setItem("LG_session_1", this.sessionData);
    }
    GetSesion() {
      let data = this.sessionData;
      if (data.authorization == "") {
        let data1 = store.getItem("LG_session_1");
        if (data1 == "") {
          return data;
        }
        this.sessionData = data1;
        return data1;
      }
      return data;
    }
    session(token, callback) {
      if (token == null) {
        showError$1("刷新Session失败,token为空,请刷新或重新登录");
        return {};
      }
      return new Promise((resolve, reject) => {
        let deviceId = store.getAliyun("__ETAG__CNA__ID__");
        if (deviceId == "") {
          deviceId = token.user_id.split("").reverse().join("").substring(0, 20);
        }
        let userId = token.user_id;
        unsafeWindow.luoGenSession(function(key2, pubStr, signature2, nd) {
          deviceId = nd;
          console.log("你好,罗根！");
          let deviceName = store.getItem("deviceName");
          let modelName = store.getItem("modelName");
          createSessionUrl({
            "deviceName": deviceName,
            "modelName": modelName,
            "refreshToken": "71a164a40eb84a40b35c1a39d2023499",
            "pubKey": pubStr
          }, signature2, deviceId).then((res) => {
            if (!res.data.result) {
              user.clearSession();
              showError$1("设备超限,请下线其他设备,在刷新页面");
              elementPlus.ElMessageBox.alert("请点击左下角退出登陆那个菜单，点击登陆设备管理，下线其他设备。然后刷新页面", "设备超限", {
                confirmButtonText: "好的",
                callback: (action) => {
                }
              });
              return;
            }
            store.setItem("x-device-id", deviceId);
            store.setItem("x-signature", signature2);
            resolve({
              deviceId,
              signature: signature2
            });
            callback && callback(pubStr, signature2);
          }).catch((e) => {
            console.error("出现异常了...", e);
            user.clearSession();
            elementPlus.ElMessageBox.alert(e + "", "刷新session失败", {
              confirmButtonText: "刷新试一试",
              callback: (action) => {
                location.href = location.href;
              }
            });
            reject(e);
          });
        }, window.atob("NWRkZTRlMWJkZjllNDk2NmIzODdiYTU4ZjRiM2ZkYzM="), deviceId, userId);
      });
    }
    /**
     * 是否在首页
     */
    home() {
      return location.href.indexOf("/drive/file") > 0;
    }
    /**
     * 是否在资源库
     */
    resource() {
      return location.href.indexOf("/drive/file/resource") > 0;
    }
    // 没过期返回true 过期 false
    isExpires(item) {
      if (item == null || !item.expire_time) {
        return false;
      }
      let time = Date.parse(item.expire_time) - Date.now();
      return time > 0;
    }
    getShareToken() {
      return store.getAliyun("shareToken");
    }
    getToken() {
      let token = localStorage.getItem(`token`);
      if (token != null) {
        return JSON.parse(token);
      }
      return token;
    }
    // 获取当前页面上所有的文件
    getAllFileList() {
      let fileList3 = this.getPage().items;
      if (fileList3.length === 0) {
        console.error("获取文件列表失败");
        return [];
      }
      return copy(fileList3);
    }
    // 获取已选择的文件
    selectedFileList() {
      let jq = $2;
      let selectedFileList = [], fileList3 = this.getAllFileList();
      if (fileList3.length === 0) {
        console.error("获取文件列表失败");
        return [];
      }
      let node = "";
      if (jq(".tbody--Na444  .tr--Ogi-3.tr--97U9T").length) {
        node = jq(".tbody--Na444  .tr--Ogi-3.tr--97U9T");
      } else if (jq(".outer-wrapper--JCodp").length) {
        node = jq(".outer-wrapper--JCodp");
      }
      node.each(function(index) {
        var $this = jq(node[index]);
        if ($this.attr("data-is-selected") === "true") {
          let data_index = $this.closest("[data-index]").attr("data-index");
          data_index && selectedFileList.push(fileList3[data_index]);
        }
      });
      return copy(selectedFileList);
    }
  }
  const user = new User();
  /*! Element Plus Icons Vue v2.3.1 */
  var refresh_vue_vue_type_script_setup_true_lang_default = /* @__PURE__ */ vue.defineComponent({
    name: "Refresh",
    __name: "refresh",
    setup(__props) {
      return (_ctx, _cache) => (vue.openBlock(), vue.createElementBlock("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 1024 1024"
      }, [
        vue.createElementVNode("path", {
          fill: "currentColor",
          d: "M771.776 794.88A384 384 0 0 1 128 512h64a320 320 0 0 0 555.712 216.448H654.72a32 32 0 1 1 0-64h149.056a32 32 0 0 1 32 32v148.928a32 32 0 1 1-64 0v-50.56zM276.288 295.616h92.992a32 32 0 0 1 0 64H220.16a32 32 0 0 1-32-32V178.56a32 32 0 0 1 64 0v50.56A384 384 0 0 1 896.128 512h-64a320 320 0 0 0-555.776-216.384z"
        })
      ]));
    }
  });
  var refresh_default = refresh_vue_vue_type_script_setup_true_lang_default;
  const cssLoader = (e) => {
    const t2 = GM_getResourceText(e), o = document.createElement("style");
    return o.innerText = t2, document.head.append(o), t2;
  };
  cssLoader("element-plus/dist/index.css");
  const _export_sfc = (sfc, props) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key2, val] of props) {
      target[key2] = val;
    }
    return target;
  };
  const _hoisted_1$6 = {
    key: 0,
    class: "ant-modal-root",
    id: "aria2-set-box"
  };
  const _hoisted_2$4 = {
    tabindex: "-1",
    class: "ant-modal-wrap",
    role: "dialog",
    id: "aria2_set_LuoGen"
  };
  const _hoisted_3$4 = {
    role: "document",
    class: "ant-modal modal-wrapper--2yJKO",
    style: { "width": "340px", "transform-origin": "-14px 195px" }
  };
  const _hoisted_4$3 = { class: "ant-modal-content" };
  const _hoisted_5$3 = { class: "ant-modal-body" };
  const _hoisted_6$3 = { class: "content-wrapper--1_WJv" };
  const _hoisted_7$3 = { class: "content-wrapper--1_WJv" };
  const _hoisted_8$2 = { class: "content-wrapper--1_WJv" };
  const _hoisted_9$2 = {
    key: 0,
    class: "notice2"
  };
  const _hoisted_10$2 = {
    key: 1,
    class: "notice2"
  };
  const _hoisted_11$2 = {
    key: 2,
    class: "notice2"
  };
  const _hoisted_12$2 = { class: "ant-modal-footer" };
  const _hoisted_13$1 = { class: "footer--3Q0je" };
  const _sfc_main$7 = {
    __name: "Aria2Set",
    setup(__props, { expose: __expose }) {
      const data = vue.reactive({
        isShowAria2Set: false,
        pushBtonText: "Aria2 推送",
        aria2Model: user.getAria2Set()
      });
      const errorMsg = vue.ref(false);
      function saveAria2() {
        $2.ajax({
          type: "POST",
          url: data.aria2Model.link,
          data: JSON.stringify({
            "jsonrpc": "2.0",
            "method": "aria2.getVersion",
            "id": "1",
            "params": [
              "token:" + data.aria2Model.token
            ]
          }),
          crossDomain: true,
          processData: false,
          contentType: "application/json",
          success: function(result) {
            user.setAria2Set(data.aria2Model);
            data.isShowAria2Set = false;
            errorMsg.value = false;
            showSuccess("Aria2配置保存成功", null, {
              appendTo: ".ant-modal-header"
            });
          },
          error: function(error) {
            errorMsg.value = true;
            showError$1("保存失败,连接不上Aria2配置", null, {
              appendTo: "#aria2_set_LuoGen"
            });
          }
        });
      }
      function aria2Push(fileList3, call) {
        if (data.pushBtonText == "正在推送") {
          return;
        }
        let folderName = "";
        if (data.aria2Model.dirCreate) {
          let dir = $2(".breadcrumb--2FqFQ[data-calc=true] > .breadcrumb-item--tV9dn > .breadcrumb-item-link--M-p4b");
          folderName = "/阿里云盘";
          for (let i2 = 0; i2 < dir.length; i2++) {
            folderName += "/" + dir[i2].innerText;
          }
        }
        let sendDownLoad = [];
        fileList3.forEach(function(item, index) {
          sendDownLoad.push({
            id: "",
            jsonrpc: "2.0",
            method: "aria2.addUri",
            params: [
              "token:" + data.aria2Model.token,
              [item.url],
              {
                out: item.name,
                dir: data.aria2Model.path + folderName,
                referer: "https://www.aliyundrive.com/",
                "user-agent": navigator.userAgent
              }
            ]
          });
        });
        let text = data.pushBtonText;
        data.pushBtonText = "正在推送";
        $2.ajax({
          type: "POST",
          url: data.aria2Model.link,
          data: JSON.stringify(sendDownLoad),
          crossDomain: true,
          processData: false,
          contentType: "application/json",
          success: function(result) {
            showSuccess("Aria2推送成功", null, {
              appendTo: ".ant-modal-header"
            });
            data.pushBtonText = text;
            call(true);
          },
          error: function(error) {
            showError$1("Aria2 推送失败,请检查配置", null, {
              appendTo: ".ant-modal-header"
            });
            data.pushBtonText = text;
            call(false);
          }
        });
      }
      function show() {
        data.isShowAria2Set = true;
      }
      function hide() {
        data.isShowAria2Set = false;
      }
      __expose({
        aria2Push,
        show,
        hide
      });
      return (_ctx, _cache) => {
        return data.isShowAria2Set ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_1$6, [
          _cache[15] || (_cache[15] = vue.createElementVNode("div", { class: "ant-modal-mask" }, null, -1)),
          vue.createElementVNode("div", _hoisted_2$4, [
            vue.createElementVNode("div", _hoisted_3$4, [
              vue.createElementVNode("div", _hoisted_4$3, [
                _cache[14] || (_cache[14] = vue.createElementVNode("div", { class: "ant-modal-header" }, [
                  vue.createElementVNode("div", { class: "ant-modal-title" }, " Aria2设置 ")
                ], -1)),
                vue.createElementVNode("div", _hoisted_5$3, [
                  vue.createElementVNode("div", {
                    class: "icon-wrapper--3dbbo",
                    id: "aria2-set-icon",
                    onClick: _cache[0] || (_cache[0] = vue.withModifiers(($event) => data.isShowAria2Set = false, ["stop"]))
                  }, _cache[5] || (_cache[5] = [
                    vue.createElementVNode("span", {
                      "data-role": "icon",
                      "data-render-as": "svg",
                      "data-icon-type": "PDSClose",
                      class: "close-icon--33bP0 icon--d-ejA"
                    }, [
                      vue.createElementVNode("svg", {
                        t: "1685717543646",
                        class: "icon",
                        viewBox: "0 0 1024 1024",
                        version: "1.1",
                        xmlns: "http://www.w3.org/2000/svg",
                        "p-id": "2490",
                        id: "mx_n_1685717543647",
                        width: "16",
                        height: "16"
                      }, [
                        vue.createElementVNode("path", {
                          d: "M849 896c-12 0-24.1-4.6-33.2-13.8l-674-674c-18.4-18.4-18.4-48.1 0-66.5s48.1-18.4 66.5 0l674 674c18.4 18.4 18.4 48.1 0 66.5A47.03 47.03 0 0 1 849 896z",
                          "p-id": "2491",
                          fill: "#cdcdcd"
                        }),
                        vue.createElementVNode("path", {
                          d: "M175 896c-12 0-24.1-4.6-33.2-13.8-18.4-18.4-18.4-48.1 0-66.5l674-674c18.4-18.4 48.1-18.4 66.5 0s18.4 48.1 0 66.5l-674 674C199 891.4 187 896 175 896z",
                          "p-id": "2492",
                          fill: "#cdcdcd"
                        })
                      ])
                    ], -1)
                  ])),
                  _cache[8] || (_cache[8] = vue.createElementVNode("div", null, " 推送链接： ", -1)),
                  vue.createElementVNode("div", _hoisted_6$3, [
                    vue.createVNode(vue.unref(elementPlus.ElInput), {
                      id: "aria2-link",
                      modelValue: data.aria2Model.link,
                      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => data.aria2Model.link = $event),
                      type: "text"
                    }, null, 8, ["modelValue"])
                  ]),
                  _cache[9] || (_cache[9] = vue.createElementVNode("div", null, " 推送路径： ", -1)),
                  vue.createElementVNode("div", _hoisted_7$3, [
                    vue.createVNode(vue.unref(elementPlus.ElInput), {
                      id: "aria2-path",
                      modelValue: data.aria2Model.path,
                      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => data.aria2Model.path = $event),
                      type: "text"
                    }, null, 8, ["modelValue"])
                  ]),
                  _cache[10] || (_cache[10] = vue.createElementVNode("div", null, " RPC密钥： ", -1)),
                  vue.createElementVNode("div", _hoisted_8$2, [
                    vue.createVNode(vue.unref(elementPlus.ElInput), {
                      id: "aria2-token",
                      modelValue: data.aria2Model.token,
                      "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => data.aria2Model.token = $event),
                      type: "text"
                    }, null, 8, ["modelValue"])
                  ]),
                  _cache[11] || (_cache[11] = vue.createElementVNode("div", null, " 其他： ", -1)),
                  _cache[12] || (_cache[12] = vue.createTextVNode(" 不创建对应目录： ")),
                  vue.createVNode(vue.unref(elementPlus.ElSwitch), {
                    modelValue: data.aria2Model.dirCreate,
                    "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => data.aria2Model.dirCreate = $event)
                  }, null, 8, ["modelValue"]),
                  errorMsg.value ? (vue.openBlock(), vue.createElementBlock("p", _hoisted_9$2, " 如果当前推送链接是http开头，则需要修改浏览器安全限制更改为允许。 ")) : vue.createCommentVNode("", true),
                  errorMsg.value ? (vue.openBlock(), vue.createElementBlock("p", _hoisted_10$2, _cache[6] || (_cache[6] = [
                    vue.createTextVNode("连接不上的原因："),
                    vue.createElementVNode("br", null, null, -1),
                    vue.createTextVNode(" 1.端口或链接填写错误"),
                    vue.createElementVNode("br", null, null, -1),
                    vue.createTextVNode(" 2.密钥错误 "),
                    vue.createElementVNode("br", null, null, -1),
                    vue.createTextVNode(" 3.未开启跨域请求"),
                    vue.createElementVNode("br", null, null, -1)
                  ]))) : vue.createCommentVNode("", true),
                  errorMsg.value ? (vue.openBlock(), vue.createElementBlock("p", _hoisted_11$2, _cache[7] || (_cache[7] = [
                    vue.createTextVNode(" ./aria2c.exe --enable-rpc --rpc-listen-all --rpc-secret 123 --rpc-allow-origin-all=true"),
                    vue.createElementVNode("br", null, null, -1),
                    vue.createTextVNode(" 可以在Aria2的程序目录下,使用上面命令,RPC密钥为:123 ")
                  ]))) : vue.createCommentVNode("", true)
                ]),
                vue.createElementVNode("div", _hoisted_12$2, [
                  vue.createElementVNode("div", _hoisted_13$1, [
                    vue.createVNode(vue.unref(elementPlus.ElButton), {
                      id: "aria2-set-save",
                      type: "primary",
                      onClick: vue.withModifiers(saveAria2, ["stop"])
                    }, {
                      default: vue.withCtx(() => _cache[13] || (_cache[13] = [
                        vue.createTextVNode(" 检测 & 确定 ")
                      ])),
                      _: 1
                    })
                  ])
                ])
              ])
            ])
          ])
        ])) : vue.createCommentVNode("", true);
      };
    }
  };
  const Aria2Set = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["__scopeId", "data-v-4bef4f78"]]);
  const CLASS_NAMES = {
    textPrimary: "text-primary--JzAb9",
    button: "button--WC7or primary--NVxfK"
  };
  const _hoisted_1$5 = { key: 0 };
  const _hoisted_2$3 = { key: 1 };
  const _hoisted_3$3 = { key: 0 };
  const _hoisted_4$2 = { class: "notice" };
  const _hoisted_5$2 = {
    class: "item-list",
    style: { "padding": "20px", "height": "410px", "overflow-y": "auto" }
  };
  const _hoisted_6$2 = { style: { "margin": "10px 0px", "overflow": "hidden", "white-space": "nowrap", "text-overflow": "ellipsis" } };
  const _hoisted_7$2 = { class: "footer" };
  const _sfc_main$6 = {
    __name: "DwoloadPage",
    setup(__props) {
      let list = user.selectedFileList();
      if (list.length == 0) {
        list = user.getAllFileList();
      }
      list = list.filter(function(item) {
        return item.type === "folder" || item.type === "file";
      });
      console.log(list);
      const fileList3 = vue.reactive(list);
      const aria2SetRef = vue.ref();
      const data = vue.reactive({
        pushBtonText: "Aria2 推送"
      });
      const home2 = vue.ref(user.home());
      const resource = vue.ref(user.resource());
      const laterLoad = vue.ref(getCount() != 0 && list == 0);
      function getCount() {
        let text = $2(".left-wrapper--zzDY4").text();
        if (!text) {
          return 0;
        }
        var reg = /\d+/g;
        var num = text.match(reg);
        if (num.length == 0) {
          return 0;
        }
        return num[0];
      }
      function group(array, subGroupLength) {
        var index = 0;
        var newArray = [];
        while (index < array.length) {
          newArray.push(array.slice(index, index += subGroupLength));
        }
        return newArray;
      }
      function updateHref(id) {
        var $a = $2(`a[data-id="${id}"]`);
        var title2 = $a.attr("title");
        $a.attr("href", title2);
      }
      var shareToken;
      const shareTokenV = vue.reactive(user.getShareToken());
      vue.onMounted(async () => {
        if (!user.home()) {
          shareToken = user.getShareToken();
          if (!user.isExpires(shareToken)) {
            showError$1("当前页面已过期，请刷新重试");
            return;
          }
        }
        var groupedCountries = group(fileList3, 1);
        for (const index in groupedCountries) {
          await loadingUrl(groupedCountries[index]);
        }
        function loadingUrl(array) {
          return new Promise((resolve, reject) => {
            let length = array.length;
            let initLength = 0;
            array.forEach((item) => {
              if (item.type == "file") {
                getFileUrl(item, function() {
                  initLength += 1;
                  if (initLength == length) {
                    resolve();
                  }
                });
              } else {
                initLength += 1;
                if (initLength == length) {
                  resolve();
                }
              }
            });
          });
        }
      });
      function showSet() {
        aria2SetRef.value.show();
      }
      function IDMPush() {
        var protocol = window.location.protocol;
        var host = window.location.host;
        var fullHost = protocol + "//" + host + "/";
        var referer = fullHost;
        var content = "--noscreen -r " + referer;
        fileList2.forEach(function(item, index) {
          if (item.url != "" && item.url != null) {
            content += " " + item.url;
          }
        });
        downloadLink(content, "tasks.txt");
      }
      function aria2Push() {
        if (data.pushBtonText == "正在推送") {
          return;
        }
        var text = data.pushBtonText;
        data.pushBtonText = "正在推送";
        aria2SetRef.value.aria2Push(fileList3, (res) => {
          if (res == false) {
            data.pushBtonText = "推送失败";
          } else {
            data.pushBtonText = text;
          }
        });
      }
      function bitComet(item) {
        if (!item || !item.name) {
          throw new Error("Item or item.name is not defined");
        }
        const params = `AA/${encodeURIComponent(item.name)}/?url=${encodeURIComponent(item.download_url || item.url)}&refer=${encodeURIComponent(location.protocol + "//" + location.host + "/")}ZZ`;
        const base64Params = btoa(params);
        let url = `bc://http/${base64Params}`;
        navigator.clipboard.writeText(url);
        createLink(url);
      }
      function m3u(item) {
        item.loading = true;
        videoPreviewPlayInfo({
          category: "live_transcoding",
          drive_id: item.drive_id,
          file_id: item.file_id,
          template_id: "FHD|HD|SD|LD",
          url_expire_sec: 14400,
          get_subtitle_info: true
        }).then((res) => {
          var _a, _b, _c;
          const task = (_c = (_b = (_a = res.data) == null ? void 0 : _a.video_preview_play_info) == null ? void 0 : _b.live_transcoding_task_list) == null ? void 0 : _c.filter((task2) => task2.url).pop();
          if (task == null) {
            showError$1("获取视频链接失败，请重新获取");
            return;
          }
          const escapedTitle = item.name.replace(/,/g, "\\,");
          let referrer = location.protocol + "//" + location.host + "/";
          const escapedUrl = task.url.replace(/,/g, "\\,");
          const m3uContent = [
            "#EXTM3U",
            `#EXTVLCOPT:http-referrer=${referrer}`,
            `#EXTINF:-1, ${escapedTitle}`,
            escapedUrl
          ].join("\n");
          let name2 = item.name.substring(0, item.name.lastIndexOf("." + item.file_extension));
          downloadLink(m3uContent, `${name2 || "视频文件"}.m3u`);
        }).finally(() => {
          item.loading = false;
        });
      }
      function downloadLink(text, name2) {
        var a = document.createElement("a");
        var blob = new Blob([text]);
        var url = window.URL.createObjectURL(blob);
        a.href = url;
        a.download = name2;
        a.click();
        window.URL.revokeObjectURL(url);
      }
      function createLink(url) {
        const a = document.createElement("a");
        a.href = url;
        a.style.display = "none";
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
      }
      function getFileUrl(item, call) {
        item.loading = true;
        item.text = "正在获取下载地址中";
        let showDnload;
        if (item.share_id) {
          showDnload = shareLinkDownloadUrl({
            file_id: item.file_id,
            share_id: item.share_id
          }, shareToken.share_token).then((response) => {
            item.error = false;
            item.text = response.data.download_url;
            item.url = response.data.download_url;
          });
        } else {
          showDnload = getDownloadUrl({
            expire_sec: 14400,
            drive_id: item.drive_id,
            file_id: item.file_id
          }).then((response) => {
            item.error = false;
            if (response.data.url) {
              item.text = response.data.url;
              item.url = response.data.url;
            } else {
              item.text = item.url;
            }
          });
        }
        showDnload.catch((e) => {
          if (e && e + "" == "AxiosError: Request failed with status code 429") {
            item.error = true;
            item.text = "接口请求频繁，请稍后点击文件旁边的刷新按钮，重新获取 (也可点击我尝试跳转下载)";
          } else {
            item.text = "刷新失败，错误异常:" + e;
          }
        }).finally(() => {
          item.loading = false;
          call && call();
        });
      }
      vue.onUnmounted(() => {
        console.log("文件下载窗口关闭");
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock(vue.Fragment, null, [
          vue.createVNode(Aria2Set, {
            ref_key: "aria2SetRef",
            ref: aria2SetRef
          }, null, 512),
          laterLoad.value ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_1$5, [
            vue.createVNode(vue.unref(elementPlus.ElResult), {
              icon: "error",
              title: "获取文件失败",
              "sub-title": "请回到文件列表中，随便点击排序，看到已加载多少文件时，在回到这里吧"
            })
          ])) : vue.createCommentVNode("", true),
          !laterLoad.value ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_2$3, [
            fileList3.length > 0 ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_3$3, _cache[2] || (_cache[2] = [
              vue.createElementVNode("p", { class: "notice2" }, "注意： 如果大批量获取下载地址，会被官网限速！", -1),
              vue.createElementVNode("p", { class: "notice1" }, "1. 因阿里云盘接口限制,短期大量请求会出现接口请求频繁,可以先选择需要下载的文件，在点击显示链接按钮。 ", -1),
              vue.createElementVNode("p", { class: "notice1" }, "2. 接口请求频繁,也可尝试点击下载,不过文件名需要重新命名 ", -1),
              vue.createElementVNode("p", { class: "notice1" }, "3. 在点击刷新按钮时,不要连续点击,可等几秒在点一次尝试获取 ", -1)
            ]))) : vue.createCommentVNode("", true),
            vue.createElementVNode("p", _hoisted_4$2, " 共加载了" + vue.toDisplayString(fileList3.length) + "个文件", 1),
            vue.createElementVNode("div", _hoisted_5$2, [
              (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(fileList3, (item, index) => {
                return vue.openBlock(), vue.createElementBlock("div", { key: index }, [
                  item.type == "folder" ? (vue.openBlock(), vue.createElementBlock("p", {
                    key: 0,
                    class: vue.normalizeClass(vue.unref(CLASS_NAMES).textPrimary)
                  }, vue.toDisplayString(index + 1) + ". " + vue.toDisplayString(item.name), 3)) : vue.createCommentVNode("", true),
                  item.type == "file" ? (vue.openBlock(), vue.createElementBlock("p", {
                    key: 1,
                    class: vue.normalizeClass(vue.unref(CLASS_NAMES).textPrimary)
                  }, [
                    vue.createTextVNode(vue.toDisplayString(index + 1) + ". " + vue.toDisplayString(item.name) + " ", 1),
                    vue.createVNode(vue.unref(elementPlus.ElButton), {
                      type: "primary",
                      icon: vue.unref(refresh_default),
                      loading: item.loading,
                      circle: "",
                      size: "small",
                      onClick: vue.withModifiers(($event) => getFileUrl(item), ["stop"])
                    }, null, 8, ["icon", "loading", "onClick"]),
                    vue.createVNode(vue.unref(elementPlus.ElLink), {
                      type: "primary",
                      style: { "margin-left": "10px" },
                      loading: item.loading,
                      onClick: vue.withModifiers(($event) => bitComet(item), ["stop"])
                    }, {
                      default: vue.withCtx(() => _cache[3] || (_cache[3] = [
                        vue.createTextVNode("BitComet")
                      ])),
                      _: 2
                    }, 1032, ["loading", "onClick"]),
                    home2.value && item.mime_type.indexOf("video") != -1 ? (vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElLink), {
                      key: 0,
                      type: "primary",
                      style: { "margin-left": "10px" },
                      loading: item.loading,
                      onClick: vue.withModifiers(($event) => m3u(item), ["stop"])
                    }, {
                      default: vue.withCtx(() => _cache[4] || (_cache[4] = [
                        vue.createTextVNode("M3U")
                      ])),
                      _: 2
                    }, 1032, ["loading", "onClick"])) : vue.createCommentVNode("", true)
                  ], 2)) : vue.createCommentVNode("", true),
                  vue.createElementVNode("p", _hoisted_6$2, [
                    item.type == "folder" ? (vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElLink), {
                      key: 0,
                      type: "primary",
                      href: resource.value ? "/drive/file/resource/" + item.file_id : home2.value ? "/drive/file/backup/" + item.file_id : "/s/" + shareTokenV.share_id + "/folder/" + item.file_id
                    }, {
                      default: vue.withCtx(() => [
                        vue.createElementVNode("p", {
                          class: vue.normalizeClass(vue.unref(CLASS_NAMES).textPrimary)
                        }, " 点击进入文件夹", 2)
                      ]),
                      _: 2
                    }, 1032, ["href"])) : vue.createCommentVNode("", true),
                    item.type == "file" && !item.error ? (vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElLink), {
                      key: 1,
                      onMousedown: ($event) => updateHref(item.file_id),
                      onMouseup: ($event) => updateHref(item.file_id),
                      "data-id": item.file_id,
                      type: "primary",
                      title: item.url,
                      href: item.url
                    }, {
                      default: vue.withCtx(() => [
                        vue.createElementVNode("p", {
                          class: vue.normalizeClass(vue.unref(CLASS_NAMES).textPrimary)
                        }, vue.toDisplayString(item.text), 3)
                      ]),
                      _: 2
                    }, 1032, ["onMousedown", "onMouseup", "data-id", "title", "href"])) : vue.createCommentVNode("", true),
                    item.type == "file" && item.error ? (vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElLink), {
                      key: 2,
                      type: "danger",
                      href: item.url
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode(vue.toDisplayString(item.text), 1)
                      ]),
                      _: 2
                    }, 1032, ["href"])) : vue.createCommentVNode("", true)
                  ])
                ]);
              }), 128))
            ]),
            vue.createElementVNode("div", null, [
              vue.createElementVNode("div", _hoisted_7$2, [
                vue.createElementVNode("div", null, [
                  vue.createVNode(vue.unref(elementPlus.ElButton), {
                    type: "primary",
                    onClick: _cache[0] || (_cache[0] = vue.withModifiers(($event) => vue.unref(monkeyWindow).open("https://github.com/wyndem/ali-video", "_blank"), ["stop"]))
                  }, {
                    default: vue.withCtx(() => _cache[5] || (_cache[5] = [
                      vue.createTextVNode("❤️ 开源地址")
                    ])),
                    _: 1
                  }),
                  vue.createVNode(vue.unref(elementPlus.ElButton), {
                    type: "primary",
                    onClick: _cache[1] || (_cache[1] = vue.withModifiers(($event) => vue.unref(monkeyWindow).open("https://greasyfork.org/zh-CN/scripts/458626", "_blank"), ["stop"]))
                  }, {
                    default: vue.withCtx(() => _cache[6] || (_cache[6] = [
                      vue.createTextVNode("👍 点个赞")
                    ])),
                    _: 1
                  }),
                  vue.createVNode(vue.unref(elementPlus.ElButton), {
                    type: "primary",
                    onClick: vue.withModifiers(IDMPush, ["stop"])
                  }, {
                    default: vue.withCtx(() => _cache[7] || (_cache[7] = [
                      vue.createTextVNode("IDM 导出文件")
                    ])),
                    _: 1
                  }),
                  vue.createVNode(vue.unref(elementPlus.ElButton), {
                    type: "primary",
                    onClick: vue.withModifiers(aria2Push, ["stop"])
                  }, {
                    default: vue.withCtx(() => [
                      vue.createTextVNode(vue.toDisplayString(data.pushBtonText), 1)
                    ]),
                    _: 1
                  }),
                  vue.createVNode(vue.unref(elementPlus.ElButton), {
                    type: "primary",
                    style: { "margin-left": "10px", "width": "auto", "border": "0 solid transparent" },
                    class: "aria2-set",
                    onClick: vue.withModifiers(showSet, ["stop"]),
                    circle: ""
                  }, {
                    default: vue.withCtx(() => _cache[8] || (_cache[8] = [
                      vue.createTextVNode("⚙️")
                    ])),
                    _: 1
                  })
                ])
              ])
            ])
          ])) : vue.createCommentVNode("", true)
        ], 64);
      };
    }
  };
  const DwoloadPage = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["__scopeId", "data-v-ff5973d9"]]);
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function getDefaultExportFromCjs(x) {
    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
  }
  function getAugmentedNamespace(n) {
    if (n.__esModule) return n;
    var f2 = n.default;
    if (typeof f2 == "function") {
      var a = function a2() {
        if (this instanceof a2) {
          return Reflect.construct(f2, arguments, this.constructor);
        }
        return f2.apply(this, arguments);
      };
      a.prototype = f2.prototype;
    } else a = {};
    Object.defineProperty(a, "__esModule", { value: true });
    Object.keys(n).forEach(function(k) {
      var d = Object.getOwnPropertyDescriptor(n, k);
      Object.defineProperty(a, k, d.get ? d : {
        enumerable: true,
        get: function() {
          return n[k];
        }
      });
    });
    return a;
  }
  var hls_min = { exports: {} };
  (function(module, exports) {
    !function t2(e) {
      var i2;
      i2 = function() {
        function r2(t3, e2) {
          var r3 = Object.keys(t3);
          if (Object.getOwnPropertySymbols) {
            var i4 = Object.getOwnPropertySymbols(t3);
            e2 && (i4 = i4.filter(function(e3) {
              return Object.getOwnPropertyDescriptor(t3, e3).enumerable;
            })), r3.push.apply(r3, i4);
          }
          return r3;
        }
        function i3(t3) {
          for (var e2 = 1; e2 < arguments.length; e2++) {
            var i4 = null != arguments[e2] ? arguments[e2] : {};
            e2 % 2 ? r2(Object(i4), true).forEach(function(e3) {
              var r3, a2, s3;
              r3 = t3, a2 = e3, s3 = i4[e3], (a2 = n(a2)) in r3 ? Object.defineProperty(r3, a2, { value: s3, enumerable: true, configurable: true, writable: true }) : r3[a2] = s3;
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t3, Object.getOwnPropertyDescriptors(i4)) : r2(Object(i4)).forEach(function(e3) {
              Object.defineProperty(t3, e3, Object.getOwnPropertyDescriptor(i4, e3));
            });
          }
          return t3;
        }
        function n(t3) {
          var e2 = function(t4, e3) {
            if ("object" != typeof t4 || !t4) return t4;
            var r3 = t4[Symbol.toPrimitive];
            if (void 0 !== r3) {
              var i4 = r3.call(t4, e3 || "default");
              if ("object" != typeof i4) return i4;
              throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return ("string" === e3 ? String : Number)(t4);
          }(t3, "string");
          return "symbol" == typeof e2 ? e2 : String(e2);
        }
        function a(t3, e2) {
          for (var r3 = 0; r3 < e2.length; r3++) {
            var i4 = e2[r3];
            i4.enumerable = i4.enumerable || false, i4.configurable = true, "value" in i4 && (i4.writable = true), Object.defineProperty(t3, n(i4.key), i4);
          }
        }
        function s2(t3, e2, r3) {
          return e2 && a(t3.prototype, e2), r3 && a(t3, r3), Object.defineProperty(t3, "prototype", { writable: false }), t3;
        }
        function o() {
          return o = Object.assign ? Object.assign.bind() : function(t3) {
            for (var e2 = 1; e2 < arguments.length; e2++) {
              var r3 = arguments[e2];
              for (var i4 in r3) Object.prototype.hasOwnProperty.call(r3, i4) && (t3[i4] = r3[i4]);
            }
            return t3;
          }, o.apply(this, arguments);
        }
        function l(t3, e2) {
          t3.prototype = Object.create(e2.prototype), t3.prototype.constructor = t3, h(t3, e2);
        }
        function u(t3) {
          return u = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t4) {
            return t4.__proto__ || Object.getPrototypeOf(t4);
          }, u(t3);
        }
        function h(t3, e2) {
          return h = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t4, e3) {
            return t4.__proto__ = e3, t4;
          }, h(t3, e2);
        }
        function d(t3, e2, r3) {
          return d = function() {
            if ("undefined" == typeof Reflect || !Reflect.construct) return false;
            if (Reflect.construct.sham) return false;
            if ("function" == typeof Proxy) return true;
            try {
              return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
              })), true;
            } catch (t4) {
              return false;
            }
          }() ? Reflect.construct.bind() : function(t4, e3, r4) {
            var i4 = [null];
            i4.push.apply(i4, e3);
            var n2 = new (Function.bind.apply(t4, i4))();
            return r4 && h(n2, r4.prototype), n2;
          }, d.apply(null, arguments);
        }
        function c(t3) {
          var e2 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
          return c = function(t4) {
            if (null === t4 || !function(t5) {
              try {
                return -1 !== Function.toString.call(t5).indexOf("[native code]");
              } catch (e3) {
                return "function" == typeof t5;
              }
            }(t4)) return t4;
            if ("function" != typeof t4) throw new TypeError("Super expression must either be null or a function");
            if (void 0 !== e2) {
              if (e2.has(t4)) return e2.get(t4);
              e2.set(t4, r3);
            }
            function r3() {
              return d(t4, arguments, u(this).constructor);
            }
            return r3.prototype = Object.create(t4.prototype, { constructor: { value: r3, enumerable: false, writable: true, configurable: true } }), h(r3, t4);
          }, c(t3);
        }
        function f2(t3, e2) {
          (null == e2 || e2 > t3.length) && (e2 = t3.length);
          for (var r3 = 0, i4 = new Array(e2); r3 < e2; r3++) i4[r3] = t3[r3];
          return i4;
        }
        function g(t3, e2) {
          var r3 = "undefined" != typeof Symbol && t3[Symbol.iterator] || t3["@@iterator"];
          if (r3) return (r3 = r3.call(t3)).next.bind(r3);
          if (Array.isArray(t3) || (r3 = function(t4, e3) {
            if (t4) {
              if ("string" == typeof t4) return f2(t4, e3);
              var r4 = Object.prototype.toString.call(t4).slice(8, -1);
              return "Object" === r4 && t4.constructor && (r4 = t4.constructor.name), "Map" === r4 || "Set" === r4 ? Array.from(t4) : "Arguments" === r4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r4) ? f2(t4, e3) : void 0;
            }
          }(t3)) || e2) {
            r3 && (t3 = r3);
            var i4 = 0;
            return function() {
              return i4 >= t3.length ? { done: true } : { done: false, value: t3[i4++] };
            };
          }
          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function v(t3) {
          return t3 && t3.__esModule && Object.prototype.hasOwnProperty.call(t3, "default") ? t3.default : t3;
        }
        var m = { exports: {} };
        !function(t3, e2) {
          var r3, i4, n2, a2, s3;
          r3 = /^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/, i4 = /^(?=([^\/?#]*))\1([^]*)$/, n2 = /(?:\/|^)\.(?=\/)/g, a2 = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g, s3 = { buildAbsoluteURL: function(t4, e3, r4) {
            if (r4 = r4 || {}, t4 = t4.trim(), !(e3 = e3.trim())) {
              if (!r4.alwaysNormalize) return t4;
              var n3 = s3.parseURL(t4);
              if (!n3) throw new Error("Error trying to parse base URL.");
              return n3.path = s3.normalizePath(n3.path), s3.buildURLFromParts(n3);
            }
            var a3 = s3.parseURL(e3);
            if (!a3) throw new Error("Error trying to parse relative URL.");
            if (a3.scheme) return r4.alwaysNormalize ? (a3.path = s3.normalizePath(a3.path), s3.buildURLFromParts(a3)) : e3;
            var o2 = s3.parseURL(t4);
            if (!o2) throw new Error("Error trying to parse base URL.");
            if (!o2.netLoc && o2.path && "/" !== o2.path[0]) {
              var l2 = i4.exec(o2.path);
              o2.netLoc = l2[1], o2.path = l2[2];
            }
            o2.netLoc && !o2.path && (o2.path = "/");
            var u2 = { scheme: o2.scheme, netLoc: a3.netLoc, path: null, params: a3.params, query: a3.query, fragment: a3.fragment };
            if (!a3.netLoc && (u2.netLoc = o2.netLoc, "/" !== a3.path[0])) if (a3.path) {
              var h2 = o2.path, d2 = h2.substring(0, h2.lastIndexOf("/") + 1) + a3.path;
              u2.path = s3.normalizePath(d2);
            } else u2.path = o2.path, a3.params || (u2.params = o2.params, a3.query || (u2.query = o2.query));
            return null === u2.path && (u2.path = r4.alwaysNormalize ? s3.normalizePath(a3.path) : a3.path), s3.buildURLFromParts(u2);
          }, parseURL: function(t4) {
            var e3 = r3.exec(t4);
            return e3 ? { scheme: e3[1] || "", netLoc: e3[2] || "", path: e3[3] || "", params: e3[4] || "", query: e3[5] || "", fragment: e3[6] || "" } : null;
          }, normalizePath: function(t4) {
            for (t4 = t4.split("").reverse().join("").replace(n2, ""); t4.length !== (t4 = t4.replace(a2, "")).length; ) ;
            return t4.split("").reverse().join("");
          }, buildURLFromParts: function(t4) {
            return t4.scheme + t4.netLoc + t4.path + t4.params + t4.query + t4.fragment;
          } }, t3.exports = s3;
        }(m);
        var p = m.exports, y = Number.isFinite || function(t3) {
          return "number" == typeof t3 && isFinite(t3);
        }, E = Number.isSafeInteger || function(t3) {
          return "number" == typeof t3 && Math.abs(t3) <= T;
        }, T = Number.MAX_SAFE_INTEGER || 9007199254740991, S = function(t3) {
          return t3.MEDIA_ATTACHING = "hlsMediaAttaching", t3.MEDIA_ATTACHED = "hlsMediaAttached", t3.MEDIA_DETACHING = "hlsMediaDetaching", t3.MEDIA_DETACHED = "hlsMediaDetached", t3.BUFFER_RESET = "hlsBufferReset", t3.BUFFER_CODECS = "hlsBufferCodecs", t3.BUFFER_CREATED = "hlsBufferCreated", t3.BUFFER_APPENDING = "hlsBufferAppending", t3.BUFFER_APPENDED = "hlsBufferAppended", t3.BUFFER_EOS = "hlsBufferEos", t3.BUFFER_FLUSHING = "hlsBufferFlushing", t3.BUFFER_FLUSHED = "hlsBufferFlushed", t3.MANIFEST_LOADING = "hlsManifestLoading", t3.MANIFEST_LOADED = "hlsManifestLoaded", t3.MANIFEST_PARSED = "hlsManifestParsed", t3.LEVEL_SWITCHING = "hlsLevelSwitching", t3.LEVEL_SWITCHED = "hlsLevelSwitched", t3.LEVEL_LOADING = "hlsLevelLoading", t3.LEVEL_LOADED = "hlsLevelLoaded", t3.LEVEL_UPDATED = "hlsLevelUpdated", t3.LEVEL_PTS_UPDATED = "hlsLevelPtsUpdated", t3.LEVELS_UPDATED = "hlsLevelsUpdated", t3.AUDIO_TRACKS_UPDATED = "hlsAudioTracksUpdated", t3.AUDIO_TRACK_SWITCHING = "hlsAudioTrackSwitching", t3.AUDIO_TRACK_SWITCHED = "hlsAudioTrackSwitched", t3.AUDIO_TRACK_LOADING = "hlsAudioTrackLoading", t3.AUDIO_TRACK_LOADED = "hlsAudioTrackLoaded", t3.SUBTITLE_TRACKS_UPDATED = "hlsSubtitleTracksUpdated", t3.SUBTITLE_TRACKS_CLEARED = "hlsSubtitleTracksCleared", t3.SUBTITLE_TRACK_SWITCH = "hlsSubtitleTrackSwitch", t3.SUBTITLE_TRACK_LOADING = "hlsSubtitleTrackLoading", t3.SUBTITLE_TRACK_LOADED = "hlsSubtitleTrackLoaded", t3.SUBTITLE_FRAG_PROCESSED = "hlsSubtitleFragProcessed", t3.CUES_PARSED = "hlsCuesParsed", t3.NON_NATIVE_TEXT_TRACKS_FOUND = "hlsNonNativeTextTracksFound", t3.INIT_PTS_FOUND = "hlsInitPtsFound", t3.FRAG_LOADING = "hlsFragLoading", t3.FRAG_LOAD_EMERGENCY_ABORTED = "hlsFragLoadEmergencyAborted", t3.FRAG_LOADED = "hlsFragLoaded", t3.FRAG_DECRYPTED = "hlsFragDecrypted", t3.FRAG_PARSING_INIT_SEGMENT = "hlsFragParsingInitSegment", t3.FRAG_PARSING_USERDATA = "hlsFragParsingUserdata", t3.FRAG_PARSING_METADATA = "hlsFragParsingMetadata", t3.FRAG_PARSED = "hlsFragParsed", t3.FRAG_BUFFERED = "hlsFragBuffered", t3.FRAG_CHANGED = "hlsFragChanged", t3.FPS_DROP = "hlsFpsDrop", t3.FPS_DROP_LEVEL_CAPPING = "hlsFpsDropLevelCapping", t3.MAX_AUTO_LEVEL_UPDATED = "hlsMaxAutoLevelUpdated", t3.ERROR = "hlsError", t3.DESTROYING = "hlsDestroying", t3.KEY_LOADING = "hlsKeyLoading", t3.KEY_LOADED = "hlsKeyLoaded", t3.LIVE_BACK_BUFFER_REACHED = "hlsLiveBackBufferReached", t3.BACK_BUFFER_REACHED = "hlsBackBufferReached", t3.STEERING_MANIFEST_LOADED = "hlsSteeringManifestLoaded", t3;
        }({}), L = function(t3) {
          return t3.NETWORK_ERROR = "networkError", t3.MEDIA_ERROR = "mediaError", t3.KEY_SYSTEM_ERROR = "keySystemError", t3.MUX_ERROR = "muxError", t3.OTHER_ERROR = "otherError", t3;
        }({}), A = function(t3) {
          return t3.KEY_SYSTEM_NO_KEYS = "keySystemNoKeys", t3.KEY_SYSTEM_NO_ACCESS = "keySystemNoAccess", t3.KEY_SYSTEM_NO_SESSION = "keySystemNoSession", t3.KEY_SYSTEM_NO_CONFIGURED_LICENSE = "keySystemNoConfiguredLicense", t3.KEY_SYSTEM_LICENSE_REQUEST_FAILED = "keySystemLicenseRequestFailed", t3.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED = "keySystemServerCertificateRequestFailed", t3.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED = "keySystemServerCertificateUpdateFailed", t3.KEY_SYSTEM_SESSION_UPDATE_FAILED = "keySystemSessionUpdateFailed", t3.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED = "keySystemStatusOutputRestricted", t3.KEY_SYSTEM_STATUS_INTERNAL_ERROR = "keySystemStatusInternalError", t3.MANIFEST_LOAD_ERROR = "manifestLoadError", t3.MANIFEST_LOAD_TIMEOUT = "manifestLoadTimeOut", t3.MANIFEST_PARSING_ERROR = "manifestParsingError", t3.MANIFEST_INCOMPATIBLE_CODECS_ERROR = "manifestIncompatibleCodecsError", t3.LEVEL_EMPTY_ERROR = "levelEmptyError", t3.LEVEL_LOAD_ERROR = "levelLoadError", t3.LEVEL_LOAD_TIMEOUT = "levelLoadTimeOut", t3.LEVEL_PARSING_ERROR = "levelParsingError", t3.LEVEL_SWITCH_ERROR = "levelSwitchError", t3.AUDIO_TRACK_LOAD_ERROR = "audioTrackLoadError", t3.AUDIO_TRACK_LOAD_TIMEOUT = "audioTrackLoadTimeOut", t3.SUBTITLE_LOAD_ERROR = "subtitleTrackLoadError", t3.SUBTITLE_TRACK_LOAD_TIMEOUT = "subtitleTrackLoadTimeOut", t3.FRAG_LOAD_ERROR = "fragLoadError", t3.FRAG_LOAD_TIMEOUT = "fragLoadTimeOut", t3.FRAG_DECRYPT_ERROR = "fragDecryptError", t3.FRAG_PARSING_ERROR = "fragParsingError", t3.FRAG_GAP = "fragGap", t3.REMUX_ALLOC_ERROR = "remuxAllocError", t3.KEY_LOAD_ERROR = "keyLoadError", t3.KEY_LOAD_TIMEOUT = "keyLoadTimeOut", t3.BUFFER_ADD_CODEC_ERROR = "bufferAddCodecError", t3.BUFFER_INCOMPATIBLE_CODECS_ERROR = "bufferIncompatibleCodecsError", t3.BUFFER_APPEND_ERROR = "bufferAppendError", t3.BUFFER_APPENDING_ERROR = "bufferAppendingError", t3.BUFFER_STALLED_ERROR = "bufferStalledError", t3.BUFFER_FULL_ERROR = "bufferFullError", t3.BUFFER_SEEK_OVER_HOLE = "bufferSeekOverHole", t3.BUFFER_NUDGE_ON_STALL = "bufferNudgeOnStall", t3.INTERNAL_EXCEPTION = "internalException", t3.INTERNAL_ABORTED = "aborted", t3.UNKNOWN = "unknown", t3;
        }({}), R = function() {
        }, b = { trace: R, debug: R, log: R, warn: R, info: R, error: R }, k = b;
        function D(t3) {
          for (var e2 = arguments.length, r3 = new Array(e2 > 1 ? e2 - 1 : 0), i4 = 1; i4 < e2; i4++) r3[i4 - 1] = arguments[i4];
          r3.forEach(function(e3) {
            k[e3] = t3[e3] ? t3[e3].bind(t3) : function(t4) {
              var e4 = self.console[t4];
              return e4 ? e4.bind(self.console, "[" + t4 + "] >") : R;
            }(e3);
          });
        }
        function I(t3, e2) {
          if ("object" == typeof console && true === t3 || "object" == typeof t3) {
            D(t3, "debug", "log", "info", "warn", "error");
            try {
              k.log('Debug logs enabled for "' + e2 + '" in hls.js version 1.5.15');
            } catch (t4) {
              k = b;
            }
          } else k = b;
        }
        var w = k, C = /^(\d+)x(\d+)$/, _ = /(.+?)=(".*?"|.*?)(?:,|$)/g, x = function() {
          function t3(e3) {
            "string" == typeof e3 && (e3 = t3.parseAttrList(e3)), o(this, e3);
          }
          var e2 = t3.prototype;
          return e2.decimalInteger = function(t4) {
            var e3 = parseInt(this[t4], 10);
            return e3 > Number.MAX_SAFE_INTEGER ? 1 / 0 : e3;
          }, e2.hexadecimalInteger = function(t4) {
            if (this[t4]) {
              var e3 = (this[t4] || "0x").slice(2);
              e3 = (1 & e3.length ? "0" : "") + e3;
              for (var r3 = new Uint8Array(e3.length / 2), i4 = 0; i4 < e3.length / 2; i4++) r3[i4] = parseInt(e3.slice(2 * i4, 2 * i4 + 2), 16);
              return r3;
            }
            return null;
          }, e2.hexadecimalIntegerAsNumber = function(t4) {
            var e3 = parseInt(this[t4], 16);
            return e3 > Number.MAX_SAFE_INTEGER ? 1 / 0 : e3;
          }, e2.decimalFloatingPoint = function(t4) {
            return parseFloat(this[t4]);
          }, e2.optionalFloat = function(t4, e3) {
            var r3 = this[t4];
            return r3 ? parseFloat(r3) : e3;
          }, e2.enumeratedString = function(t4) {
            return this[t4];
          }, e2.bool = function(t4) {
            return "YES" === this[t4];
          }, e2.decimalResolution = function(t4) {
            var e3 = C.exec(this[t4]);
            if (null !== e3) return { width: parseInt(e3[1], 10), height: parseInt(e3[2], 10) };
          }, t3.parseAttrList = function(t4) {
            var e3, r3 = {};
            for (_.lastIndex = 0; null !== (e3 = _.exec(t4)); ) {
              var i4 = e3[2];
              0 === i4.indexOf('"') && i4.lastIndexOf('"') === i4.length - 1 && (i4 = i4.slice(1, -1)), r3[e3[1].trim()] = i4;
            }
            return r3;
          }, s2(t3, [{ key: "clientAttrs", get: function() {
            return Object.keys(this).filter(function(t4) {
              return "X-" === t4.substring(0, 2);
            });
          } }]), t3;
        }();
        function P(t3) {
          return "SCTE35-OUT" === t3 || "SCTE35-IN" === t3;
        }
        var F = function() {
          function t3(t4, e2) {
            if (this.attr = void 0, this._startDate = void 0, this._endDate = void 0, this._badValueForSameId = void 0, e2) {
              var r3 = e2.attr;
              for (var i4 in r3) if (Object.prototype.hasOwnProperty.call(t4, i4) && t4[i4] !== r3[i4]) {
                w.warn('DATERANGE tag attribute: "' + i4 + '" does not match for tags with ID: "' + t4.ID + '"'), this._badValueForSameId = i4;
                break;
              }
              t4 = o(new x({}), r3, t4);
            }
            if (this.attr = t4, this._startDate = new Date(t4["START-DATE"]), "END-DATE" in this.attr) {
              var n2 = new Date(this.attr["END-DATE"]);
              y(n2.getTime()) && (this._endDate = n2);
            }
          }
          return s2(t3, [{ key: "id", get: function() {
            return this.attr.ID;
          } }, { key: "class", get: function() {
            return this.attr.CLASS;
          } }, { key: "startDate", get: function() {
            return this._startDate;
          } }, { key: "endDate", get: function() {
            if (this._endDate) return this._endDate;
            var t4 = this.duration;
            return null !== t4 ? new Date(this._startDate.getTime() + 1e3 * t4) : null;
          } }, { key: "duration", get: function() {
            if ("DURATION" in this.attr) {
              var t4 = this.attr.decimalFloatingPoint("DURATION");
              if (y(t4)) return t4;
            } else if (this._endDate) return (this._endDate.getTime() - this._startDate.getTime()) / 1e3;
            return null;
          } }, { key: "plannedDuration", get: function() {
            return "PLANNED-DURATION" in this.attr ? this.attr.decimalFloatingPoint("PLANNED-DURATION") : null;
          } }, { key: "endOnNext", get: function() {
            return this.attr.bool("END-ON-NEXT");
          } }, { key: "isValid", get: function() {
            return !!this.id && !this._badValueForSameId && y(this.startDate.getTime()) && (null === this.duration || this.duration >= 0) && (!this.endOnNext || !!this.class);
          } }]), t3;
        }(), M = function() {
          this.aborted = false, this.loaded = 0, this.retry = 0, this.total = 0, this.chunkCount = 0, this.bwEstimate = 0, this.loading = { start: 0, first: 0, end: 0 }, this.parsing = { start: 0, end: 0 }, this.buffering = { start: 0, first: 0, end: 0 };
        }, O = "audio", N = "video", U = "audiovideo", B = function() {
          function t3(t4) {
            var e2;
            this._byteRange = null, this._url = null, this.baseurl = void 0, this.relurl = void 0, this.elementaryStreams = ((e2 = {})[O] = null, e2[N] = null, e2[U] = null, e2), this.baseurl = t4;
          }
          return t3.prototype.setByteRange = function(t4, e2) {
            var r3, i4 = t4.split("@", 2);
            r3 = 1 === i4.length ? (null == e2 ? void 0 : e2.byteRangeEndOffset) || 0 : parseInt(i4[1]), this._byteRange = [r3, parseInt(i4[0]) + r3];
          }, s2(t3, [{ key: "byteRange", get: function() {
            return this._byteRange ? this._byteRange : [];
          } }, { key: "byteRangeStartOffset", get: function() {
            return this.byteRange[0];
          } }, { key: "byteRangeEndOffset", get: function() {
            return this.byteRange[1];
          } }, { key: "url", get: function() {
            return !this._url && this.baseurl && this.relurl && (this._url = p.buildAbsoluteURL(this.baseurl, this.relurl, { alwaysNormalize: true })), this._url || "";
          }, set: function(t4) {
            this._url = t4;
          } }]), t3;
        }(), G = function(t3) {
          function e2(e3, r4) {
            var i4;
            return (i4 = t3.call(this, r4) || this)._decryptdata = null, i4.rawProgramDateTime = null, i4.programDateTime = null, i4.tagList = [], i4.duration = 0, i4.sn = 0, i4.levelkeys = void 0, i4.type = void 0, i4.loader = null, i4.keyLoader = null, i4.level = -1, i4.cc = 0, i4.startPTS = void 0, i4.endPTS = void 0, i4.startDTS = void 0, i4.endDTS = void 0, i4.start = 0, i4.deltaPTS = void 0, i4.maxStartPTS = void 0, i4.minEndPTS = void 0, i4.stats = new M(), i4.data = void 0, i4.bitrateTest = false, i4.title = null, i4.initSegment = null, i4.endList = void 0, i4.gap = void 0, i4.urlId = 0, i4.type = e3, i4;
          }
          l(e2, t3);
          var r3 = e2.prototype;
          return r3.setKeyFormat = function(t4) {
            if (this.levelkeys) {
              var e3 = this.levelkeys[t4];
              e3 && !this._decryptdata && (this._decryptdata = e3.getDecryptData(this.sn));
            }
          }, r3.abortRequests = function() {
            var t4, e3;
            null == (t4 = this.loader) || t4.abort(), null == (e3 = this.keyLoader) || e3.abort();
          }, r3.setElementaryStreamInfo = function(t4, e3, r4, i4, n2, a2) {
            void 0 === a2 && (a2 = false);
            var s3 = this.elementaryStreams, o2 = s3[t4];
            o2 ? (o2.startPTS = Math.min(o2.startPTS, e3), o2.endPTS = Math.max(o2.endPTS, r4), o2.startDTS = Math.min(o2.startDTS, i4), o2.endDTS = Math.max(o2.endDTS, n2)) : s3[t4] = { startPTS: e3, endPTS: r4, startDTS: i4, endDTS: n2, partial: a2 };
          }, r3.clearElementaryStreamInfo = function() {
            var t4 = this.elementaryStreams;
            t4[O] = null, t4[N] = null, t4[U] = null;
          }, s2(e2, [{ key: "decryptdata", get: function() {
            if (!this.levelkeys && !this._decryptdata) return null;
            if (!this._decryptdata && this.levelkeys && !this.levelkeys.NONE) {
              var t4 = this.levelkeys.identity;
              if (t4) this._decryptdata = t4.getDecryptData(this.sn);
              else {
                var e3 = Object.keys(this.levelkeys);
                if (1 === e3.length) return this._decryptdata = this.levelkeys[e3[0]].getDecryptData(this.sn);
              }
            }
            return this._decryptdata;
          } }, { key: "end", get: function() {
            return this.start + this.duration;
          } }, { key: "endProgramDateTime", get: function() {
            if (null === this.programDateTime) return null;
            if (!y(this.programDateTime)) return null;
            var t4 = y(this.duration) ? this.duration : 0;
            return this.programDateTime + 1e3 * t4;
          } }, { key: "encrypted", get: function() {
            var t4;
            if (null != (t4 = this._decryptdata) && t4.encrypted) return true;
            if (this.levelkeys) {
              var e3 = Object.keys(this.levelkeys), r4 = e3.length;
              if (r4 > 1 || 1 === r4 && this.levelkeys[e3[0]].encrypted) return true;
            }
            return false;
          } }]), e2;
        }(B), K2 = function(t3) {
          function e2(e3, r3, i4, n2, a2) {
            var s3;
            (s3 = t3.call(this, i4) || this).fragOffset = 0, s3.duration = 0, s3.gap = false, s3.independent = false, s3.relurl = void 0, s3.fragment = void 0, s3.index = void 0, s3.stats = new M(), s3.duration = e3.decimalFloatingPoint("DURATION"), s3.gap = e3.bool("GAP"), s3.independent = e3.bool("INDEPENDENT"), s3.relurl = e3.enumeratedString("URI"), s3.fragment = r3, s3.index = n2;
            var o2 = e3.enumeratedString("BYTERANGE");
            return o2 && s3.setByteRange(o2, a2), a2 && (s3.fragOffset = a2.fragOffset + a2.duration), s3;
          }
          return l(e2, t3), s2(e2, [{ key: "start", get: function() {
            return this.fragment.start + this.fragOffset;
          } }, { key: "end", get: function() {
            return this.start + this.duration;
          } }, { key: "loaded", get: function() {
            var t4 = this.elementaryStreams;
            return !!(t4.audio || t4.video || t4.audiovideo);
          } }]), e2;
        }(B), H = function() {
          function t3(t4) {
            this.PTSKnown = false, this.alignedSliding = false, this.averagetargetduration = void 0, this.endCC = 0, this.endSN = 0, this.fragments = void 0, this.fragmentHint = void 0, this.partList = null, this.dateRanges = void 0, this.live = true, this.ageHeader = 0, this.advancedDateTime = void 0, this.updated = true, this.advanced = true, this.availabilityDelay = void 0, this.misses = 0, this.startCC = 0, this.startSN = 0, this.startTimeOffset = null, this.targetduration = 0, this.totalduration = 0, this.type = null, this.url = void 0, this.m3u8 = "", this.version = null, this.canBlockReload = false, this.canSkipUntil = 0, this.canSkipDateRanges = false, this.skippedSegments = 0, this.recentlyRemovedDateranges = void 0, this.partHoldBack = 0, this.holdBack = 0, this.partTarget = 0, this.preloadHint = void 0, this.renditionReports = void 0, this.tuneInGoal = 0, this.deltaUpdateFailed = void 0, this.driftStartTime = 0, this.driftEndTime = 0, this.driftStart = 0, this.driftEnd = 0, this.encryptedFragments = void 0, this.playlistParsingError = null, this.variableList = null, this.hasVariableRefs = false, this.fragments = [], this.encryptedFragments = [], this.dateRanges = {}, this.url = t4;
          }
          return t3.prototype.reloaded = function(t4) {
            if (!t4) return this.advanced = true, void (this.updated = true);
            var e2 = this.lastPartSn - t4.lastPartSn, r3 = this.lastPartIndex - t4.lastPartIndex;
            this.updated = this.endSN !== t4.endSN || !!r3 || !!e2 || !this.live, this.advanced = this.endSN > t4.endSN || e2 > 0 || 0 === e2 && r3 > 0, this.updated || this.advanced ? this.misses = Math.floor(0.6 * t4.misses) : this.misses = t4.misses + 1, this.availabilityDelay = t4.availabilityDelay;
          }, s2(t3, [{ key: "hasProgramDateTime", get: function() {
            return !!this.fragments.length && y(this.fragments[this.fragments.length - 1].programDateTime);
          } }, { key: "levelTargetDuration", get: function() {
            return this.averagetargetduration || this.targetduration || 10;
          } }, { key: "drift", get: function() {
            var t4 = this.driftEndTime - this.driftStartTime;
            return t4 > 0 ? 1e3 * (this.driftEnd - this.driftStart) / t4 : 1;
          } }, { key: "edge", get: function() {
            return this.partEnd || this.fragmentEnd;
          } }, { key: "partEnd", get: function() {
            var t4;
            return null != (t4 = this.partList) && t4.length ? this.partList[this.partList.length - 1].end : this.fragmentEnd;
          } }, { key: "fragmentEnd", get: function() {
            var t4;
            return null != (t4 = this.fragments) && t4.length ? this.fragments[this.fragments.length - 1].end : 0;
          } }, { key: "age", get: function() {
            return this.advancedDateTime ? Math.max(Date.now() - this.advancedDateTime, 0) / 1e3 : 0;
          } }, { key: "lastPartIndex", get: function() {
            var t4;
            return null != (t4 = this.partList) && t4.length ? this.partList[this.partList.length - 1].index : -1;
          } }, { key: "lastPartSn", get: function() {
            var t4;
            return null != (t4 = this.partList) && t4.length ? this.partList[this.partList.length - 1].fragment.sn : this.endSN;
          } }]), t3;
        }();
        function V(t3) {
          return Uint8Array.from(atob(t3), function(t4) {
            return t4.charCodeAt(0);
          });
        }
        function Y(t3) {
          var e2, r3, i4 = t3.split(":"), n2 = null;
          if ("data" === i4[0] && 2 === i4.length) {
            var a2 = i4[1].split(";"), s3 = a2[a2.length - 1].split(",");
            if (2 === s3.length) {
              var o2 = "base64" === s3[0], l2 = s3[1];
              o2 ? (a2.splice(-1, 1), n2 = V(l2)) : (e2 = W(l2).subarray(0, 16), (r3 = new Uint8Array(16)).set(e2, 16 - e2.length), n2 = r3);
            }
          }
          return n2;
        }
        function W(t3) {
          return Uint8Array.from(unescape(encodeURIComponent(t3)), function(t4) {
            return t4.charCodeAt(0);
          });
        }
        var j = "undefined" != typeof self ? self : void 0, q = { CLEARKEY: "org.w3.clearkey", FAIRPLAY: "com.apple.fps", PLAYREADY: "com.microsoft.playready", WIDEVINE: "com.widevine.alpha" }, X = "org.w3.clearkey", z = "com.apple.streamingkeydelivery", Q = "com.microsoft.playready", J = "urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed";
        function $3(t3) {
          switch (t3) {
            case z:
              return q.FAIRPLAY;
            case Q:
              return q.PLAYREADY;
            case J:
              return q.WIDEVINE;
            case X:
              return q.CLEARKEY;
          }
        }
        var Z = "1077efecc0b24d02ace33c1e52e2fb4b", tt = "e2719d58a985b3c9781ab030af78d30e", et = "9a04f07998404286ab92e65be0885f95", rt = "edef8ba979d64acea3c827dcd51d21ed";
        function it(t3) {
          return t3 === rt ? q.WIDEVINE : t3 === et ? q.PLAYREADY : t3 === Z || t3 === tt ? q.CLEARKEY : void 0;
        }
        function nt(t3) {
          switch (t3) {
            case q.FAIRPLAY:
              return z;
            case q.PLAYREADY:
              return Q;
            case q.WIDEVINE:
              return J;
            case q.CLEARKEY:
              return X;
          }
        }
        function at(t3) {
          var e2 = t3.drmSystems, r3 = t3.widevineLicenseUrl, i4 = e2 ? [q.FAIRPLAY, q.WIDEVINE, q.PLAYREADY, q.CLEARKEY].filter(function(t4) {
            return !!e2[t4];
          }) : [];
          return !i4[q.WIDEVINE] && r3 && i4.push(q.WIDEVINE), i4;
        }
        var st, ot = null != j && null != (st = j.navigator) && st.requestMediaKeySystemAccess ? self.navigator.requestMediaKeySystemAccess.bind(self.navigator) : null;
        function lt(t3, e2, r3) {
          return Uint8Array.prototype.slice ? t3.slice(e2, r3) : new Uint8Array(Array.prototype.slice.call(t3, e2, r3));
        }
        var ut, ht = function(t3, e2) {
          return e2 + 10 <= t3.length && 73 === t3[e2] && 68 === t3[e2 + 1] && 51 === t3[e2 + 2] && t3[e2 + 3] < 255 && t3[e2 + 4] < 255 && t3[e2 + 6] < 128 && t3[e2 + 7] < 128 && t3[e2 + 8] < 128 && t3[e2 + 9] < 128;
        }, dt = function(t3, e2) {
          return e2 + 10 <= t3.length && 51 === t3[e2] && 68 === t3[e2 + 1] && 73 === t3[e2 + 2] && t3[e2 + 3] < 255 && t3[e2 + 4] < 255 && t3[e2 + 6] < 128 && t3[e2 + 7] < 128 && t3[e2 + 8] < 128 && t3[e2 + 9] < 128;
        }, ct = function(t3, e2) {
          for (var r3 = e2, i4 = 0; ht(t3, e2); ) i4 += 10, i4 += ft(t3, e2 + 6), dt(t3, e2 + 10) && (i4 += 10), e2 += i4;
          if (i4 > 0) return t3.subarray(r3, r3 + i4);
        }, ft = function(t3, e2) {
          var r3 = 0;
          return r3 = (127 & t3[e2]) << 21, r3 |= (127 & t3[e2 + 1]) << 14, r3 |= (127 & t3[e2 + 2]) << 7, r3 |= 127 & t3[e2 + 3];
        }, gt = function(t3, e2) {
          return ht(t3, e2) && ft(t3, e2 + 6) + 10 <= t3.length - e2;
        }, vt = function(t3) {
          for (var e2 = yt(t3), r3 = 0; r3 < e2.length; r3++) {
            var i4 = e2[r3];
            if (mt(i4)) return At(i4);
          }
        }, mt = function(t3) {
          return t3 && "PRIV" === t3.key && "com.apple.streaming.transportStreamTimestamp" === t3.info;
        }, pt = function(t3) {
          var e2 = String.fromCharCode(t3[0], t3[1], t3[2], t3[3]), r3 = ft(t3, 4);
          return { type: e2, size: r3, data: t3.subarray(10, 10 + r3) };
        }, yt = function(t3) {
          for (var e2 = 0, r3 = []; ht(t3, e2); ) {
            for (var i4 = ft(t3, e2 + 6), n2 = (e2 += 10) + i4; e2 + 8 < n2; ) {
              var a2 = pt(t3.subarray(e2)), s3 = Et(a2);
              s3 && r3.push(s3), e2 += a2.size + 10;
            }
            dt(t3, e2) && (e2 += 10);
          }
          return r3;
        }, Et = function(t3) {
          return "PRIV" === t3.type ? Tt(t3) : "W" === t3.type[0] ? Lt(t3) : St(t3);
        }, Tt = function(t3) {
          if (!(t3.size < 2)) {
            var e2 = Rt(t3.data, true), r3 = new Uint8Array(t3.data.subarray(e2.length + 1));
            return { key: t3.type, info: e2, data: r3.buffer };
          }
        }, St = function(t3) {
          if (!(t3.size < 2)) {
            if ("TXXX" === t3.type) {
              var e2 = 1, r3 = Rt(t3.data.subarray(e2), true);
              e2 += r3.length + 1;
              var i4 = Rt(t3.data.subarray(e2));
              return { key: t3.type, info: r3, data: i4 };
            }
            var n2 = Rt(t3.data.subarray(1));
            return { key: t3.type, data: n2 };
          }
        }, Lt = function(t3) {
          if ("WXXX" === t3.type) {
            if (t3.size < 2) return;
            var e2 = 1, r3 = Rt(t3.data.subarray(e2), true);
            e2 += r3.length + 1;
            var i4 = Rt(t3.data.subarray(e2));
            return { key: t3.type, info: r3, data: i4 };
          }
          var n2 = Rt(t3.data);
          return { key: t3.type, data: n2 };
        }, At = function(t3) {
          if (8 === t3.data.byteLength) {
            var e2 = new Uint8Array(t3.data), r3 = 1 & e2[3], i4 = (e2[4] << 23) + (e2[5] << 15) + (e2[6] << 7) + e2[7];
            return i4 /= 45, r3 && (i4 += 4772185884e-2), Math.round(i4);
          }
        }, Rt = function(t3, e2) {
          void 0 === e2 && (e2 = false);
          var r3 = bt();
          if (r3) {
            var i4 = r3.decode(t3);
            if (e2) {
              var n2 = i4.indexOf("\0");
              return -1 !== n2 ? i4.substring(0, n2) : i4;
            }
            return i4.replace(/\0/g, "");
          }
          for (var a2, s3, o2, l2 = t3.length, u2 = "", h2 = 0; h2 < l2; ) {
            if (0 === (a2 = t3[h2++]) && e2) return u2;
            if (0 !== a2 && 3 !== a2) switch (a2 >> 4) {
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
                u2 += String.fromCharCode(a2);
                break;
              case 12:
              case 13:
                s3 = t3[h2++], u2 += String.fromCharCode((31 & a2) << 6 | 63 & s3);
                break;
              case 14:
                s3 = t3[h2++], o2 = t3[h2++], u2 += String.fromCharCode((15 & a2) << 12 | (63 & s3) << 6 | (63 & o2) << 0);
            }
          }
          return u2;
        };
        function bt() {
          if (!navigator.userAgent.includes("PlayStation 4")) return ut || void 0 === self.TextDecoder || (ut = new self.TextDecoder("utf-8")), ut;
        }
        var kt = { hexDump: function(t3) {
          for (var e2 = "", r3 = 0; r3 < t3.length; r3++) {
            var i4 = t3[r3].toString(16);
            i4.length < 2 && (i4 = "0" + i4), e2 += i4;
          }
          return e2;
        } }, Dt = Math.pow(2, 32) - 1, It = [].push, wt = { video: 1, audio: 2, id3: 3, text: 4 };
        function Ct(t3) {
          return String.fromCharCode.apply(null, t3);
        }
        function _t(t3, e2) {
          var r3 = t3[e2] << 8 | t3[e2 + 1];
          return r3 < 0 ? 65536 + r3 : r3;
        }
        function xt(t3, e2) {
          var r3 = Ft(t3, e2);
          return r3 < 0 ? 4294967296 + r3 : r3;
        }
        function Pt(t3, e2) {
          var r3 = xt(t3, e2);
          return r3 *= Math.pow(2, 32), r3 += xt(t3, e2 + 4);
        }
        function Ft(t3, e2) {
          return t3[e2] << 24 | t3[e2 + 1] << 16 | t3[e2 + 2] << 8 | t3[e2 + 3];
        }
        function Mt(t3, e2, r3) {
          t3[e2] = r3 >> 24, t3[e2 + 1] = r3 >> 16 & 255, t3[e2 + 2] = r3 >> 8 & 255, t3[e2 + 3] = 255 & r3;
        }
        function Ot(t3, e2) {
          var r3 = [];
          if (!e2.length) return r3;
          for (var i4 = t3.byteLength, n2 = 0; n2 < i4; ) {
            var a2 = xt(t3, n2), s3 = a2 > 1 ? n2 + a2 : i4;
            if (Ct(t3.subarray(n2 + 4, n2 + 8)) === e2[0]) if (1 === e2.length) r3.push(t3.subarray(n2 + 8, s3));
            else {
              var o2 = Ot(t3.subarray(n2 + 8, s3), e2.slice(1));
              o2.length && It.apply(r3, o2);
            }
            n2 = s3;
          }
          return r3;
        }
        function Nt(t3) {
          var e2 = [], r3 = t3[0], i4 = 8, n2 = xt(t3, i4);
          i4 += 4;
          var a2 = 0, s3 = 0;
          0 === r3 ? (a2 = xt(t3, i4), s3 = xt(t3, i4 + 4), i4 += 8) : (a2 = Pt(t3, i4), s3 = Pt(t3, i4 + 8), i4 += 16), i4 += 2;
          var o2 = t3.length + s3, l2 = _t(t3, i4);
          i4 += 2;
          for (var u2 = 0; u2 < l2; u2++) {
            var h2 = i4, d2 = xt(t3, h2);
            h2 += 4;
            var c2 = 2147483647 & d2;
            if (1 == (2147483648 & d2) >>> 31) return w.warn("SIDX has hierarchical references (not supported)"), null;
            var f3 = xt(t3, h2);
            h2 += 4, e2.push({ referenceSize: c2, subsegmentDuration: f3, info: { duration: f3 / n2, start: o2, end: o2 + c2 - 1 } }), o2 += c2, i4 = h2 += 4;
          }
          return { earliestPresentationTime: a2, timescale: n2, version: r3, referencesCount: l2, references: e2 };
        }
        function Ut(t3) {
          for (var e2 = [], r3 = Ot(t3, ["moov", "trak"]), n2 = 0; n2 < r3.length; n2++) {
            var a2 = r3[n2], s3 = Ot(a2, ["tkhd"])[0];
            if (s3) {
              var o2 = s3[0], l2 = xt(s3, 0 === o2 ? 12 : 20), u2 = Ot(a2, ["mdia", "mdhd"])[0];
              if (u2) {
                var h2 = xt(u2, 0 === (o2 = u2[0]) ? 12 : 20), d2 = Ot(a2, ["mdia", "hdlr"])[0];
                if (d2) {
                  var c2 = Ct(d2.subarray(8, 12)), f3 = { soun: O, vide: N }[c2];
                  if (f3) {
                    var g2 = Bt(Ot(a2, ["mdia", "minf", "stbl", "stsd"])[0]);
                    e2[l2] = { timescale: h2, type: f3 }, e2[f3] = i3({ timescale: h2, id: l2 }, g2);
                  }
                }
              }
            }
          }
          return Ot(t3, ["moov", "mvex", "trex"]).forEach(function(t4) {
            var r4 = xt(t4, 4), i4 = e2[r4];
            i4 && (i4.default = { duration: xt(t4, 12), flags: xt(t4, 20) });
          }), e2;
        }
        function Bt(t3) {
          var e2 = t3.subarray(8), r3 = e2.subarray(86), i4 = Ct(e2.subarray(4, 8)), n2 = i4, a2 = "enca" === i4 || "encv" === i4;
          if (a2) {
            var s3 = Ot(e2, [i4])[0];
            Ot(s3.subarray("enca" === i4 ? 28 : 78), ["sinf"]).forEach(function(t4) {
              var e3 = Ot(t4, ["schm"])[0];
              if (e3) {
                var r4 = Ct(e3.subarray(4, 8));
                if ("cbcs" === r4 || "cenc" === r4) {
                  var i5 = Ot(t4, ["frma"])[0];
                  i5 && (n2 = Ct(i5));
                }
              }
            });
          }
          switch (n2) {
            case "avc1":
            case "avc2":
            case "avc3":
            case "avc4":
              var o2 = Ot(r3, ["avcC"])[0];
              n2 += "." + Kt(o2[1]) + Kt(o2[2]) + Kt(o2[3]);
              break;
            case "mp4a":
              var l2 = Ot(e2, [i4])[0], u2 = Ot(l2.subarray(28), ["esds"])[0];
              if (u2 && u2.length > 12) {
                var h2 = 4;
                if (3 !== u2[h2++]) break;
                h2 = Gt(u2, h2), h2 += 2;
                var d2 = u2[h2++];
                if (128 & d2 && (h2 += 2), 64 & d2 && (h2 += u2[h2++]), 4 !== u2[h2++]) break;
                h2 = Gt(u2, h2);
                var c2 = u2[h2++];
                if (64 !== c2) break;
                if (n2 += "." + Kt(c2), h2 += 12, 5 !== u2[h2++]) break;
                h2 = Gt(u2, h2);
                var f3 = u2[h2++], g2 = (248 & f3) >> 3;
                31 === g2 && (g2 += 1 + ((7 & f3) << 3) + ((224 & u2[h2]) >> 5)), n2 += "." + g2;
              }
              break;
            case "hvc1":
            case "hev1":
              var v2 = Ot(r3, ["hvcC"])[0], m2 = v2[1], p2 = ["", "A", "B", "C"][m2 >> 6], y2 = 31 & m2, E2 = xt(v2, 2), T2 = (32 & m2) >> 5 ? "H" : "L", S2 = v2[12], L2 = v2.subarray(6, 12);
              n2 += "." + p2 + y2, n2 += "." + E2.toString(16).toUpperCase(), n2 += "." + T2 + S2;
              for (var A2 = "", R2 = L2.length; R2--; ) {
                var b2 = L2[R2];
                (b2 || A2) && (A2 = "." + b2.toString(16).toUpperCase() + A2);
              }
              n2 += A2;
              break;
            case "dvh1":
            case "dvhe":
              var k2 = Ot(r3, ["dvcC"])[0], D2 = k2[2] >> 1 & 127, I2 = k2[2] << 5 & 32 | k2[3] >> 3 & 31;
              n2 += "." + Ht(D2) + "." + Ht(I2);
              break;
            case "vp09":
              var w2 = Ot(r3, ["vpcC"])[0], C2 = w2[4], _2 = w2[5], x2 = w2[6] >> 4 & 15;
              n2 += "." + Ht(C2) + "." + Ht(_2) + "." + Ht(x2);
              break;
            case "av01":
              var P2 = Ot(r3, ["av1C"])[0], F2 = P2[1] >>> 5, M2 = 31 & P2[1], O2 = P2[2] >>> 7 ? "H" : "M", N2 = (64 & P2[2]) >> 6, U2 = (32 & P2[2]) >> 5, B2 = 2 === F2 && N2 ? U2 ? 12 : 10 : N2 ? 10 : 8, G2 = (16 & P2[2]) >> 4, K3 = (8 & P2[2]) >> 3, H2 = (4 & P2[2]) >> 2, V2 = 3 & P2[2];
              n2 += "." + F2 + "." + Ht(M2) + O2 + "." + Ht(B2) + "." + G2 + "." + K3 + H2 + V2 + "." + Ht(1) + "." + Ht(1) + "." + Ht(1) + ".0";
          }
          return { codec: n2, encrypted: a2 };
        }
        function Gt(t3, e2) {
          for (var r3 = e2 + 5; 128 & t3[e2++] && e2 < r3; ) ;
          return e2;
        }
        function Kt(t3) {
          return ("0" + t3.toString(16).toUpperCase()).slice(-2);
        }
        function Ht(t3) {
          return (t3 < 10 ? "0" : "") + t3;
        }
        function Vt(t3) {
          var e2 = Ot(t3, ["schm"])[0];
          if (e2) {
            var r3 = Ct(e2.subarray(4, 8));
            if ("cbcs" === r3 || "cenc" === r3) return Ot(t3, ["schi", "tenc"])[0];
          }
          return null;
        }
        function Yt(t3) {
          var e2 = xt(t3, 0), r3 = 8;
          1 & e2 && (r3 += 4), 4 & e2 && (r3 += 4);
          for (var i4 = 0, n2 = xt(t3, 4), a2 = 0; a2 < n2; a2++) 256 & e2 && (i4 += xt(t3, r3), r3 += 4), 512 & e2 && (r3 += 4), 1024 & e2 && (r3 += 4), 2048 & e2 && (r3 += 4);
          return i4;
        }
        function Wt(t3, e2) {
          var r3 = new Uint8Array(t3.length + e2.length);
          return r3.set(t3), r3.set(e2, t3.length), r3;
        }
        function jt(t3, e2) {
          var r3 = [], i4 = e2.samples, n2 = e2.timescale, a2 = e2.id, s3 = false;
          return Ot(i4, ["moof"]).map(function(o2) {
            var l2 = o2.byteOffset - 8;
            Ot(o2, ["traf"]).map(function(o3) {
              var u2 = Ot(o3, ["tfdt"]).map(function(t4) {
                var e3 = t4[0], r4 = xt(t4, 4);
                return 1 === e3 && (r4 *= Math.pow(2, 32), r4 += xt(t4, 8)), r4 / n2;
              })[0];
              return void 0 !== u2 && (t3 = u2), Ot(o3, ["tfhd"]).map(function(u3) {
                var h2 = xt(u3, 4), d2 = 16777215 & xt(u3, 0), c2 = 0, f3 = 0 != (16 & d2), g2 = 0, v2 = 0 != (32 & d2), m2 = 8;
                h2 === a2 && (0 != (1 & d2) && (m2 += 8), 0 != (2 & d2) && (m2 += 4), 0 != (8 & d2) && (c2 = xt(u3, m2), m2 += 4), f3 && (g2 = xt(u3, m2), m2 += 4), v2 && (m2 += 4), "video" === e2.type && (s3 = function(t4) {
                  if (!t4) return false;
                  var e3 = t4.indexOf("."), r4 = e3 < 0 ? t4 : t4.substring(0, e3);
                  return "hvc1" === r4 || "hev1" === r4 || "dvh1" === r4 || "dvhe" === r4;
                }(e2.codec)), Ot(o3, ["trun"]).map(function(a3) {
                  var o4 = a3[0], u4 = 16777215 & xt(a3, 0), h3 = 0 != (1 & u4), d3 = 0, f4 = 0 != (4 & u4), v3 = 0 != (256 & u4), m3 = 0, p2 = 0 != (512 & u4), y2 = 0, E2 = 0 != (1024 & u4), T2 = 0 != (2048 & u4), S2 = 0, L2 = xt(a3, 4), A2 = 8;
                  h3 && (d3 = xt(a3, A2), A2 += 4), f4 && (A2 += 4);
                  for (var R2 = d3 + l2, b2 = 0; b2 < L2; b2++) {
                    if (v3 ? (m3 = xt(a3, A2), A2 += 4) : m3 = c2, p2 ? (y2 = xt(a3, A2), A2 += 4) : y2 = g2, E2 && (A2 += 4), T2 && (S2 = 0 === o4 ? xt(a3, A2) : Ft(a3, A2), A2 += 4), e2.type === N) for (var k2 = 0; k2 < y2; ) {
                      var D2 = xt(i4, R2);
                      qt(s3, i4[R2 += 4]) && Xt(i4.subarray(R2, R2 + D2), s3 ? 2 : 1, t3 + S2 / n2, r3), R2 += D2, k2 += D2 + 4;
                    }
                    t3 += m3 / n2;
                  }
                }));
              });
            });
          }), r3;
        }
        function qt(t3, e2) {
          if (t3) {
            var r3 = e2 >> 1 & 63;
            return 39 === r3 || 40 === r3;
          }
          return 6 == (31 & e2);
        }
        function Xt(t3, e2, r3, i4) {
          var n2 = zt(t3), a2 = 0;
          a2 += e2;
          for (var s3 = 0, o2 = 0, l2 = 0; a2 < n2.length; ) {
            s3 = 0;
            do {
              if (a2 >= n2.length) break;
              s3 += l2 = n2[a2++];
            } while (255 === l2);
            o2 = 0;
            do {
              if (a2 >= n2.length) break;
              o2 += l2 = n2[a2++];
            } while (255 === l2);
            var u2 = n2.length - a2, h2 = a2;
            if (o2 < u2) a2 += o2;
            else if (o2 > u2) {
              w.error("Malformed SEI payload. " + o2 + " is too small, only " + u2 + " bytes left to parse.");
              break;
            }
            if (4 === s3) {
              if (181 === n2[h2++]) {
                var d2 = _t(n2, h2);
                if (h2 += 2, 49 === d2) {
                  var c2 = xt(n2, h2);
                  if (h2 += 4, 1195456820 === c2) {
                    var f3 = n2[h2++];
                    if (3 === f3) {
                      var g2 = n2[h2++], v2 = 64 & g2, m2 = v2 ? 2 + 3 * (31 & g2) : 0, p2 = new Uint8Array(m2);
                      if (v2) {
                        p2[0] = g2;
                        for (var y2 = 1; y2 < m2; y2++) p2[y2] = n2[h2++];
                      }
                      i4.push({ type: f3, payloadType: s3, pts: r3, bytes: p2 });
                    }
                  }
                }
              }
            } else if (5 === s3 && o2 > 16) {
              for (var E2 = [], T2 = 0; T2 < 16; T2++) {
                var S2 = n2[h2++].toString(16);
                E2.push(1 == S2.length ? "0" + S2 : S2), 3 !== T2 && 5 !== T2 && 7 !== T2 && 9 !== T2 || E2.push("-");
              }
              for (var L2 = o2 - 16, A2 = new Uint8Array(L2), R2 = 0; R2 < L2; R2++) A2[R2] = n2[h2++];
              i4.push({ payloadType: s3, pts: r3, uuid: E2.join(""), userData: Rt(A2), userDataBytes: A2 });
            }
          }
        }
        function zt(t3) {
          for (var e2 = t3.byteLength, r3 = [], i4 = 1; i4 < e2 - 2; ) 0 === t3[i4] && 0 === t3[i4 + 1] && 3 === t3[i4 + 2] ? (r3.push(i4 + 2), i4 += 2) : i4++;
          if (0 === r3.length) return t3;
          var n2 = e2 - r3.length, a2 = new Uint8Array(n2), s3 = 0;
          for (i4 = 0; i4 < n2; s3++, i4++) s3 === r3[0] && (s3++, r3.shift()), a2[i4] = t3[s3];
          return a2;
        }
        function Qt(t3, e2, r3) {
          if (16 !== t3.byteLength) throw new RangeError("Invalid system id");
          var i4, n2, a2;
          i4 = 0, n2 = new Uint8Array();
          i4 > 0 ? (a2 = new Uint8Array(4), e2.length > 0 && new DataView(a2.buffer).setUint32(0, e2.length, false)) : a2 = new Uint8Array();
          var l2 = new Uint8Array(4);
          return r3 && r3.byteLength > 0 && new DataView(l2.buffer).setUint32(0, r3.byteLength, false), function(t4) {
            for (var e3 = arguments.length, r4 = new Array(e3 > 1 ? e3 - 1 : 0), i5 = 1; i5 < e3; i5++) r4[i5 - 1] = arguments[i5];
            for (var n3 = r4.length, a3 = 8, s3 = n3; s3--; ) a3 += r4[s3].byteLength;
            var o2 = new Uint8Array(a3);
            for (o2[0] = a3 >> 24 & 255, o2[1] = a3 >> 16 & 255, o2[2] = a3 >> 8 & 255, o2[3] = 255 & a3, o2.set(t4, 4), s3 = 0, a3 = 8; s3 < n3; s3++) o2.set(r4[s3], a3), a3 += r4[s3].byteLength;
            return o2;
          }([112, 115, 115, 104], new Uint8Array([i4, 0, 0, 0]), t3, a2, n2, l2, r3 || new Uint8Array());
        }
        function Jt(t3) {
          var e2 = t3.getUint32(0), r3 = t3.byteOffset, i4 = t3.byteLength;
          if (i4 < e2) return { offset: r3, size: i4 };
          if (1886614376 !== t3.getUint32(4)) return { offset: r3, size: e2 };
          var n2 = t3.getUint32(8) >>> 24;
          if (0 !== n2 && 1 !== n2) return { offset: r3, size: e2 };
          var a2 = t3.buffer, s3 = kt.hexDump(new Uint8Array(a2, r3 + 12, 16)), o2 = t3.getUint32(28), l2 = null, u2 = null;
          if (0 === n2) {
            if (e2 - 32 < o2 || o2 < 22) return { offset: r3, size: e2 };
            u2 = new Uint8Array(a2, r3 + 32, o2);
          } else if (1 === n2) {
            if (!o2 || i4 < r3 + 32 + 16 * o2 + 16) return { offset: r3, size: e2 };
            l2 = [];
            for (var h2 = 0; h2 < o2; h2++) l2.push(new Uint8Array(a2, r3 + 32 + 16 * h2, 16));
          }
          return { version: n2, systemId: s3, kids: l2, data: u2, offset: r3, size: e2 };
        }
        var $t = {}, Zt = function() {
          function t3(t4, e3, r3, i4, n2) {
            void 0 === i4 && (i4 = [1]), void 0 === n2 && (n2 = null), this.uri = void 0, this.method = void 0, this.keyFormat = void 0, this.keyFormatVersions = void 0, this.encrypted = void 0, this.isCommonEncryption = void 0, this.iv = null, this.key = null, this.keyId = null, this.pssh = null, this.method = t4, this.uri = e3, this.keyFormat = r3, this.keyFormatVersions = i4, this.iv = n2, this.encrypted = !!t4 && "NONE" !== t4, this.isCommonEncryption = this.encrypted && "AES-128" !== t4;
          }
          t3.clearKeyUriToKeyIdMap = function() {
            $t = {};
          };
          var e2 = t3.prototype;
          return e2.isSupported = function() {
            if (this.method) {
              if ("AES-128" === this.method || "NONE" === this.method) return true;
              if ("identity" === this.keyFormat) return "SAMPLE-AES" === this.method;
              switch (this.keyFormat) {
                case z:
                case J:
                case Q:
                case X:
                  return -1 !== ["ISO-23001-7", "SAMPLE-AES", "SAMPLE-AES-CENC", "SAMPLE-AES-CTR"].indexOf(this.method);
              }
            }
            return false;
          }, e2.getDecryptData = function(e3) {
            if (!this.encrypted || !this.uri) return null;
            if ("AES-128" === this.method && this.uri && !this.iv) {
              "number" != typeof e3 && ("AES-128" !== this.method || this.iv || w.warn('missing IV for initialization segment with method="' + this.method + '" - compliance issue'), e3 = 0);
              var r3 = function(t4) {
                for (var e4 = new Uint8Array(16), r4 = 12; r4 < 16; r4++) e4[r4] = t4 >> 8 * (15 - r4) & 255;
                return e4;
              }(e3);
              return new t3(this.method, this.uri, "identity", this.keyFormatVersions, r3);
            }
            var i4 = Y(this.uri);
            if (i4) switch (this.keyFormat) {
              case J:
                this.pssh = i4, i4.length >= 22 && (this.keyId = i4.subarray(i4.length - 22, i4.length - 6));
                break;
              case Q:
                var n2 = new Uint8Array([154, 4, 240, 121, 152, 64, 66, 134, 171, 146, 230, 91, 224, 136, 95, 149]);
                this.pssh = Qt(n2, null, i4);
                var a2 = new Uint16Array(i4.buffer, i4.byteOffset, i4.byteLength / 2), s3 = String.fromCharCode.apply(null, Array.from(a2)), o2 = s3.substring(s3.indexOf("<"), s3.length), l2 = new DOMParser().parseFromString(o2, "text/xml").getElementsByTagName("KID")[0];
                if (l2) {
                  var u2 = l2.childNodes[0] ? l2.childNodes[0].nodeValue : l2.getAttribute("VALUE");
                  if (u2) {
                    var h2 = V(u2).subarray(0, 16);
                    !function(t4) {
                      var e4 = function(t5, e5, r4) {
                        var i5 = t5[e5];
                        t5[e5] = t5[r4], t5[r4] = i5;
                      };
                      e4(t4, 0, 3), e4(t4, 1, 2), e4(t4, 4, 5), e4(t4, 6, 7);
                    }(h2), this.keyId = h2;
                  }
                }
                break;
              default:
                var d2 = i4.subarray(0, 16);
                if (16 !== d2.length) {
                  var c2 = new Uint8Array(16);
                  c2.set(d2, 16 - d2.length), d2 = c2;
                }
                this.keyId = d2;
            }
            if (!this.keyId || 16 !== this.keyId.byteLength) {
              var f3 = $t[this.uri];
              if (!f3) {
                var g2 = Object.keys($t).length % Number.MAX_SAFE_INTEGER;
                f3 = new Uint8Array(16), new DataView(f3.buffer, 12, 4).setUint32(0, g2), $t[this.uri] = f3;
              }
              this.keyId = f3;
            }
            return this;
          }, t3;
        }(), te = /\{\$([a-zA-Z0-9-_]+)\}/g;
        function ee(t3) {
          return te.test(t3);
        }
        function re(t3, e2, r3) {
          if (null !== t3.variableList || t3.hasVariableRefs) for (var i4 = r3.length; i4--; ) {
            var n2 = r3[i4], a2 = e2[n2];
            a2 && (e2[n2] = ie(t3, a2));
          }
        }
        function ie(t3, e2) {
          if (null !== t3.variableList || t3.hasVariableRefs) {
            var r3 = t3.variableList;
            return e2.replace(te, function(e3) {
              var i4 = e3.substring(2, e3.length - 1), n2 = null == r3 ? void 0 : r3[i4];
              return void 0 === n2 ? (t3.playlistParsingError || (t3.playlistParsingError = new Error('Missing preceding EXT-X-DEFINE tag for Variable Reference: "' + i4 + '"')), e3) : n2;
            });
          }
          return e2;
        }
        function ne(t3, e2, r3) {
          var i4, n2, a2 = t3.variableList;
          if (a2 || (t3.variableList = a2 = {}), "QUERYPARAM" in e2) {
            i4 = e2.QUERYPARAM;
            try {
              var s3 = new self.URL(r3).searchParams;
              if (!s3.has(i4)) throw new Error('"' + i4 + '" does not match any query parameter in URI: "' + r3 + '"');
              n2 = s3.get(i4);
            } catch (e3) {
              t3.playlistParsingError || (t3.playlistParsingError = new Error("EXT-X-DEFINE QUERYPARAM: " + e3.message));
            }
          } else i4 = e2.NAME, n2 = e2.VALUE;
          i4 in a2 ? t3.playlistParsingError || (t3.playlistParsingError = new Error('EXT-X-DEFINE duplicate Variable Name declarations: "' + i4 + '"')) : a2[i4] = n2 || "";
        }
        function ae(t3, e2, r3) {
          var i4 = e2.IMPORT;
          if (r3 && i4 in r3) {
            var n2 = t3.variableList;
            n2 || (t3.variableList = n2 = {}), n2[i4] = r3[i4];
          } else t3.playlistParsingError || (t3.playlistParsingError = new Error('EXT-X-DEFINE IMPORT attribute not found in Multivariant Playlist: "' + i4 + '"'));
        }
        function se(t3) {
          if (void 0 === t3 && (t3 = true), "undefined" != typeof self) return (t3 || !self.MediaSource) && self.ManagedMediaSource || self.MediaSource || self.WebKitMediaSource;
        }
        var oe = { audio: { a3ds: 1, "ac-3": 0.95, "ac-4": 1, alac: 0.9, alaw: 1, dra1: 1, "dts+": 1, "dts-": 1, dtsc: 1, dtse: 1, dtsh: 1, "ec-3": 0.9, enca: 1, fLaC: 0.9, flac: 0.9, FLAC: 0.9, g719: 1, g726: 1, m4ae: 1, mha1: 1, mha2: 1, mhm1: 1, mhm2: 1, mlpa: 1, mp4a: 1, "raw ": 1, Opus: 1, opus: 1, samr: 1, sawb: 1, sawp: 1, sevc: 1, sqcp: 1, ssmv: 1, twos: 1, ulaw: 1 }, video: { avc1: 1, avc2: 1, avc3: 1, avc4: 1, avcp: 1, av01: 0.8, drac: 1, dva1: 1, dvav: 1, dvh1: 0.7, dvhe: 0.7, encv: 1, hev1: 0.75, hvc1: 0.75, mjp2: 1, mp4v: 1, mvc1: 1, mvc2: 1, mvc3: 1, mvc4: 1, resv: 1, rv60: 1, s263: 1, svc1: 1, svc2: 1, "vc-1": 1, vp08: 1, vp09: 0.9 }, text: { stpp: 1, wvtt: 1 } };
        function le(t3, e2, r3) {
          return void 0 === r3 && (r3 = true), !t3.split(",").some(function(t4) {
            return !ue(t4, e2, r3);
          });
        }
        function ue(t3, e2, r3) {
          var i4;
          void 0 === r3 && (r3 = true);
          var n2 = se(r3);
          return null != (i4 = null == n2 ? void 0 : n2.isTypeSupported(he(t3, e2))) && i4;
        }
        function he(t3, e2) {
          return e2 + '/mp4;codecs="' + t3 + '"';
        }
        function de(t3) {
          if (t3) {
            var e2 = t3.substring(0, 4);
            return oe.video[e2];
          }
          return 2;
        }
        function ce(t3) {
          return t3.split(",").reduce(function(t4, e2) {
            var r3 = oe.video[e2];
            return r3 ? (2 * r3 + t4) / (t4 ? 3 : 2) : (oe.audio[e2] + t4) / (t4 ? 2 : 1);
          }, 0);
        }
        var fe = {}, ge = /flac|opus/i;
        function ve(t3, e2) {
          return void 0 === e2 && (e2 = true), t3.replace(ge, function(t4) {
            return function(t5, e3) {
              if (void 0 === e3 && (e3 = true), fe[t5]) return fe[t5];
              for (var r3 = { flac: ["flac", "fLaC", "FLAC"], opus: ["opus", "Opus"] }[t5], i4 = 0; i4 < r3.length; i4++) if (ue(r3[i4], "audio", e3)) return fe[t5] = r3[i4], r3[i4];
              return t5;
            }(t4.toLowerCase(), e2);
          });
        }
        function me(t3, e2) {
          return t3 && "mp4a" !== t3 ? t3 : e2 ? e2.split(",")[0] : e2;
        }
        var pe = /#EXT-X-STREAM-INF:([^\r\n]*)(?:[\r\n](?:#[^\r\n]*)?)*([^\r\n]+)|#EXT-X-(SESSION-DATA|SESSION-KEY|DEFINE|CONTENT-STEERING|START):([^\r\n]*)[\r\n]+/g, ye = /#EXT-X-MEDIA:(.*)/g, Ee = /^#EXT(?:INF|-X-TARGETDURATION):/m, Te = new RegExp([/#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source, /(?!#) *(\S[^\r\n]*)/.source, /#EXT-X-BYTERANGE:*(.+)/.source, /#EXT-X-PROGRAM-DATE-TIME:(.+)/.source, /#.*/.source].join("|"), "g"), Se = new RegExp([/#(EXTM3U)/.source, /#EXT-X-(DATERANGE|DEFINE|KEY|MAP|PART|PART-INF|PLAYLIST-TYPE|PRELOAD-HINT|RENDITION-REPORT|SERVER-CONTROL|SKIP|START):(.+)/.source, /#EXT-X-(BITRATE|DISCONTINUITY-SEQUENCE|MEDIA-SEQUENCE|TARGETDURATION|VERSION): *(\d+)/.source, /#EXT-X-(DISCONTINUITY|ENDLIST|GAP|INDEPENDENT-SEGMENTS)/.source, /(#)([^:]*):(.*)/.source, /(#)(.*)(?:.*)\r?\n?/.source].join("|")), Le = function() {
          function t3() {
          }
          return t3.findGroup = function(t4, e2) {
            for (var r3 = 0; r3 < t4.length; r3++) {
              var i4 = t4[r3];
              if (i4.id === e2) return i4;
            }
          }, t3.resolve = function(t4, e2) {
            return p.buildAbsoluteURL(e2, t4, { alwaysNormalize: true });
          }, t3.isMediaPlaylist = function(t4) {
            return Ee.test(t4);
          }, t3.parseMasterPlaylist = function(e2, r3) {
            var i4, n2 = { contentSteering: null, levels: [], playlistParsingError: null, sessionData: null, sessionKeys: null, startTimeOffset: null, variableList: null, hasVariableRefs: ee(e2) }, a2 = [];
            for (pe.lastIndex = 0; null != (i4 = pe.exec(e2)); ) if (i4[1]) {
              var s3, o2 = new x(i4[1]);
              re(n2, o2, ["CODECS", "SUPPLEMENTAL-CODECS", "ALLOWED-CPC", "PATHWAY-ID", "STABLE-VARIANT-ID", "AUDIO", "VIDEO", "SUBTITLES", "CLOSED-CAPTIONS", "NAME"]);
              var l2 = ie(n2, i4[2]), u2 = { attrs: o2, bitrate: o2.decimalInteger("BANDWIDTH") || o2.decimalInteger("AVERAGE-BANDWIDTH"), name: o2.NAME, url: t3.resolve(l2, r3) }, h2 = o2.decimalResolution("RESOLUTION");
              h2 && (u2.width = h2.width, u2.height = h2.height), be(o2.CODECS, u2), null != (s3 = u2.unknownCodecs) && s3.length || a2.push(u2), n2.levels.push(u2);
            } else if (i4[3]) {
              var d2 = i4[3], c2 = i4[4];
              switch (d2) {
                case "SESSION-DATA":
                  var f3 = new x(c2);
                  re(n2, f3, ["DATA-ID", "LANGUAGE", "VALUE", "URI"]);
                  var g2 = f3["DATA-ID"];
                  g2 && (null === n2.sessionData && (n2.sessionData = {}), n2.sessionData[g2] = f3);
                  break;
                case "SESSION-KEY":
                  var v2 = Ae(c2, r3, n2);
                  v2.encrypted && v2.isSupported() ? (null === n2.sessionKeys && (n2.sessionKeys = []), n2.sessionKeys.push(v2)) : w.warn('[Keys] Ignoring invalid EXT-X-SESSION-KEY tag: "' + c2 + '"');
                  break;
                case "DEFINE":
                  var m2 = new x(c2);
                  re(n2, m2, ["NAME", "VALUE", "QUERYPARAM"]), ne(n2, m2, r3);
                  break;
                case "CONTENT-STEERING":
                  var p2 = new x(c2);
                  re(n2, p2, ["SERVER-URI", "PATHWAY-ID"]), n2.contentSteering = { uri: t3.resolve(p2["SERVER-URI"], r3), pathwayId: p2["PATHWAY-ID"] || "." };
                  break;
                case "START":
                  n2.startTimeOffset = Re(c2);
              }
            }
            var y2 = a2.length > 0 && a2.length < n2.levels.length;
            return n2.levels = y2 ? a2 : n2.levels, 0 === n2.levels.length && (n2.playlistParsingError = new Error("no levels found in manifest")), n2;
          }, t3.parseMasterPlaylistMedia = function(e2, r3, i4) {
            var n2, a2 = {}, s3 = i4.levels, o2 = { AUDIO: s3.map(function(t4) {
              return { id: t4.attrs.AUDIO, audioCodec: t4.audioCodec };
            }), SUBTITLES: s3.map(function(t4) {
              return { id: t4.attrs.SUBTITLES, textCodec: t4.textCodec };
            }), "CLOSED-CAPTIONS": [] }, l2 = 0;
            for (ye.lastIndex = 0; null !== (n2 = ye.exec(e2)); ) {
              var u2 = new x(n2[1]), h2 = u2.TYPE;
              if (h2) {
                var d2 = o2[h2], c2 = a2[h2] || [];
                a2[h2] = c2, re(i4, u2, ["URI", "GROUP-ID", "LANGUAGE", "ASSOC-LANGUAGE", "STABLE-RENDITION-ID", "NAME", "INSTREAM-ID", "CHARACTERISTICS", "CHANNELS"]);
                var f3 = u2.LANGUAGE, g2 = u2["ASSOC-LANGUAGE"], v2 = u2.CHANNELS, m2 = u2.CHARACTERISTICS, p2 = u2["INSTREAM-ID"], y2 = { attrs: u2, bitrate: 0, id: l2++, groupId: u2["GROUP-ID"] || "", name: u2.NAME || f3 || "", type: h2, default: u2.bool("DEFAULT"), autoselect: u2.bool("AUTOSELECT"), forced: u2.bool("FORCED"), lang: f3, url: u2.URI ? t3.resolve(u2.URI, r3) : "" };
                if (g2 && (y2.assocLang = g2), v2 && (y2.channels = v2), m2 && (y2.characteristics = m2), p2 && (y2.instreamId = p2), null != d2 && d2.length) {
                  var E2 = t3.findGroup(d2, y2.groupId) || d2[0];
                  ke(y2, E2, "audioCodec"), ke(y2, E2, "textCodec");
                }
                c2.push(y2);
              }
            }
            return a2;
          }, t3.parseLevelPlaylist = function(t4, e2, r3, i4, n2, a2) {
            var s3, l2, u2, h2 = new H(e2), d2 = h2.fragments, c2 = null, f3 = 0, g2 = 0, v2 = 0, m2 = 0, p2 = null, E2 = new G(i4, e2), T2 = -1, S2 = false, L2 = null;
            for (Te.lastIndex = 0, h2.m3u8 = t4, h2.hasVariableRefs = ee(t4); null !== (s3 = Te.exec(t4)); ) {
              S2 && (S2 = false, (E2 = new G(i4, e2)).start = v2, E2.sn = f3, E2.cc = m2, E2.level = r3, c2 && (E2.initSegment = c2, E2.rawProgramDateTime = c2.rawProgramDateTime, c2.rawProgramDateTime = null, L2 && (E2.setByteRange(L2), L2 = null)));
              var A2 = s3[1];
              if (A2) {
                E2.duration = parseFloat(A2);
                var R2 = (" " + s3[2]).slice(1);
                E2.title = R2 || null, E2.tagList.push(R2 ? ["INF", A2, R2] : ["INF", A2]);
              } else if (s3[3]) {
                if (y(E2.duration)) {
                  E2.start = v2, u2 && we(E2, u2, h2), E2.sn = f3, E2.level = r3, E2.cc = m2, d2.push(E2);
                  var b2 = (" " + s3[3]).slice(1);
                  E2.relurl = ie(h2, b2), De(E2, p2), p2 = E2, v2 += E2.duration, f3++, g2 = 0, S2 = true;
                }
              } else if (s3[4]) {
                var k2 = (" " + s3[4]).slice(1);
                p2 ? E2.setByteRange(k2, p2) : E2.setByteRange(k2);
              } else if (s3[5]) E2.rawProgramDateTime = (" " + s3[5]).slice(1), E2.tagList.push(["PROGRAM-DATE-TIME", E2.rawProgramDateTime]), -1 === T2 && (T2 = d2.length);
              else {
                if (!(s3 = s3[0].match(Se))) {
                  w.warn("No matches on slow regex match for level playlist!");
                  continue;
                }
                for (l2 = 1; l2 < s3.length && void 0 === s3[l2]; l2++) ;
                var D2 = (" " + s3[l2]).slice(1), I2 = (" " + s3[l2 + 1]).slice(1), C2 = s3[l2 + 2] ? (" " + s3[l2 + 2]).slice(1) : "";
                switch (D2) {
                  case "PLAYLIST-TYPE":
                    h2.type = I2.toUpperCase();
                    break;
                  case "MEDIA-SEQUENCE":
                    f3 = h2.startSN = parseInt(I2);
                    break;
                  case "SKIP":
                    var _2 = new x(I2);
                    re(h2, _2, ["RECENTLY-REMOVED-DATERANGES"]);
                    var P2 = _2.decimalInteger("SKIPPED-SEGMENTS");
                    if (y(P2)) {
                      h2.skippedSegments = P2;
                      for (var M2 = P2; M2--; ) d2.unshift(null);
                      f3 += P2;
                    }
                    var O2 = _2.enumeratedString("RECENTLY-REMOVED-DATERANGES");
                    O2 && (h2.recentlyRemovedDateranges = O2.split("	"));
                    break;
                  case "TARGETDURATION":
                    h2.targetduration = Math.max(parseInt(I2), 1);
                    break;
                  case "VERSION":
                    h2.version = parseInt(I2);
                    break;
                  case "INDEPENDENT-SEGMENTS":
                  case "EXTM3U":
                    break;
                  case "ENDLIST":
                    h2.live = false;
                    break;
                  case "#":
                    (I2 || C2) && E2.tagList.push(C2 ? [I2, C2] : [I2]);
                    break;
                  case "DISCONTINUITY":
                    m2++, E2.tagList.push(["DIS"]);
                    break;
                  case "GAP":
                    E2.gap = true, E2.tagList.push([D2]);
                    break;
                  case "BITRATE":
                    E2.tagList.push([D2, I2]);
                    break;
                  case "DATERANGE":
                    var N2 = new x(I2);
                    re(h2, N2, ["ID", "CLASS", "START-DATE", "END-DATE", "SCTE35-CMD", "SCTE35-OUT", "SCTE35-IN"]), re(h2, N2, N2.clientAttrs);
                    var U2 = new F(N2, h2.dateRanges[N2.ID]);
                    U2.isValid || h2.skippedSegments ? h2.dateRanges[U2.id] = U2 : w.warn('Ignoring invalid DATERANGE tag: "' + I2 + '"'), E2.tagList.push(["EXT-X-DATERANGE", I2]);
                    break;
                  case "DEFINE":
                    var B2 = new x(I2);
                    re(h2, B2, ["NAME", "VALUE", "IMPORT", "QUERYPARAM"]), "IMPORT" in B2 ? ae(h2, B2, a2) : ne(h2, B2, e2);
                    break;
                  case "DISCONTINUITY-SEQUENCE":
                    m2 = parseInt(I2);
                    break;
                  case "KEY":
                    var V2 = Ae(I2, e2, h2);
                    if (V2.isSupported()) {
                      if ("NONE" === V2.method) {
                        u2 = void 0;
                        break;
                      }
                      u2 || (u2 = {}), u2[V2.keyFormat] && (u2 = o({}, u2)), u2[V2.keyFormat] = V2;
                    } else w.warn('[Keys] Ignoring invalid EXT-X-KEY tag: "' + I2 + '"');
                    break;
                  case "START":
                    h2.startTimeOffset = Re(I2);
                    break;
                  case "MAP":
                    var Y2 = new x(I2);
                    if (re(h2, Y2, ["BYTERANGE", "URI"]), E2.duration) {
                      var W2 = new G(i4, e2);
                      Ie(W2, Y2, r3, u2), c2 = W2, E2.initSegment = c2, c2.rawProgramDateTime && !E2.rawProgramDateTime && (E2.rawProgramDateTime = c2.rawProgramDateTime);
                    } else {
                      var j2 = E2.byteRangeEndOffset;
                      if (j2) {
                        var q2 = E2.byteRangeStartOffset;
                        L2 = j2 - q2 + "@" + q2;
                      } else L2 = null;
                      Ie(E2, Y2, r3, u2), c2 = E2, S2 = true;
                    }
                    break;
                  case "SERVER-CONTROL":
                    var X2 = new x(I2);
                    h2.canBlockReload = X2.bool("CAN-BLOCK-RELOAD"), h2.canSkipUntil = X2.optionalFloat("CAN-SKIP-UNTIL", 0), h2.canSkipDateRanges = h2.canSkipUntil > 0 && X2.bool("CAN-SKIP-DATERANGES"), h2.partHoldBack = X2.optionalFloat("PART-HOLD-BACK", 0), h2.holdBack = X2.optionalFloat("HOLD-BACK", 0);
                    break;
                  case "PART-INF":
                    var z2 = new x(I2);
                    h2.partTarget = z2.decimalFloatingPoint("PART-TARGET");
                    break;
                  case "PART":
                    var Q2 = h2.partList;
                    Q2 || (Q2 = h2.partList = []);
                    var J2 = g2 > 0 ? Q2[Q2.length - 1] : void 0, $4 = g2++, Z2 = new x(I2);
                    re(h2, Z2, ["BYTERANGE", "URI"]);
                    var tt2 = new K2(Z2, E2, e2, $4, J2);
                    Q2.push(tt2), E2.duration += tt2.duration;
                    break;
                  case "PRELOAD-HINT":
                    var et2 = new x(I2);
                    re(h2, et2, ["URI"]), h2.preloadHint = et2;
                    break;
                  case "RENDITION-REPORT":
                    var rt2 = new x(I2);
                    re(h2, rt2, ["URI"]), h2.renditionReports = h2.renditionReports || [], h2.renditionReports.push(rt2);
                    break;
                  default:
                    w.warn("line parsed but not handled: " + s3);
                }
              }
            }
            p2 && !p2.relurl ? (d2.pop(), v2 -= p2.duration, h2.partList && (h2.fragmentHint = p2)) : h2.partList && (De(E2, p2), E2.cc = m2, h2.fragmentHint = E2, u2 && we(E2, u2, h2));
            var it2 = d2.length, nt2 = d2[0], at2 = d2[it2 - 1];
            if ((v2 += h2.skippedSegments * h2.targetduration) > 0 && it2 && at2) {
              h2.averagetargetduration = v2 / it2;
              var st2 = at2.sn;
              h2.endSN = "initSegment" !== st2 ? st2 : 0, h2.live || (at2.endList = true), nt2 && (h2.startCC = nt2.cc);
            } else h2.endSN = 0, h2.startCC = 0;
            return h2.fragmentHint && (v2 += h2.fragmentHint.duration), h2.totalduration = v2, h2.endCC = m2, T2 > 0 && function(t5, e3) {
              for (var r4 = t5[e3], i5 = e3; i5--; ) {
                var n3 = t5[i5];
                if (!n3) return;
                n3.programDateTime = r4.programDateTime - 1e3 * n3.duration, r4 = n3;
              }
            }(d2, T2), h2;
          }, t3;
        }();
        function Ae(t3, e2, r3) {
          var i4, n2, a2 = new x(t3);
          re(r3, a2, ["KEYFORMAT", "KEYFORMATVERSIONS", "URI", "IV", "URI"]);
          var s3 = null != (i4 = a2.METHOD) ? i4 : "", o2 = a2.URI, l2 = a2.hexadecimalInteger("IV"), u2 = a2.KEYFORMATVERSIONS, h2 = null != (n2 = a2.KEYFORMAT) ? n2 : "identity";
          o2 && a2.IV && !l2 && w.error("Invalid IV: " + a2.IV);
          var d2 = o2 ? Le.resolve(o2, e2) : "", c2 = (u2 || "1").split("/").map(Number).filter(Number.isFinite);
          return new Zt(s3, d2, h2, c2, l2);
        }
        function Re(t3) {
          var e2 = new x(t3).decimalFloatingPoint("TIME-OFFSET");
          return y(e2) ? e2 : null;
        }
        function be(t3, e2) {
          var r3 = (t3 || "").split(/[ ,]+/).filter(function(t4) {
            return t4;
          });
          ["video", "audio", "text"].forEach(function(t4) {
            var i4 = r3.filter(function(e3) {
              return function(t5, e4) {
                var r4 = oe[e4];
                return !!r4 && !!r4[t5.slice(0, 4)];
              }(e3, t4);
            });
            i4.length && (e2[t4 + "Codec"] = i4.join(","), r3 = r3.filter(function(t5) {
              return -1 === i4.indexOf(t5);
            }));
          }), e2.unknownCodecs = r3;
        }
        function ke(t3, e2, r3) {
          var i4 = e2[r3];
          i4 && (t3[r3] = i4);
        }
        function De(t3, e2) {
          t3.rawProgramDateTime ? t3.programDateTime = Date.parse(t3.rawProgramDateTime) : null != e2 && e2.programDateTime && (t3.programDateTime = e2.endProgramDateTime), y(t3.programDateTime) || (t3.programDateTime = null, t3.rawProgramDateTime = null);
        }
        function Ie(t3, e2, r3, i4) {
          t3.relurl = e2.URI, e2.BYTERANGE && t3.setByteRange(e2.BYTERANGE), t3.level = r3, t3.sn = "initSegment", i4 && (t3.levelkeys = i4), t3.initSegment = null;
        }
        function we(t3, e2, r3) {
          t3.levelkeys = e2;
          var i4 = r3.encryptedFragments;
          i4.length && i4[i4.length - 1].levelkeys === e2 || !Object.keys(e2).some(function(t4) {
            return e2[t4].isCommonEncryption;
          }) || i4.push(t3);
        }
        var Ce = "manifest", _e = "level", xe = "audioTrack", Pe = "subtitleTrack", Fe = "main", Me = "audio", Oe = "subtitle";
        function Ne(t3) {
          switch (t3.type) {
            case xe:
              return Me;
            case Pe:
              return Oe;
            default:
              return Fe;
          }
        }
        function Ue(t3, e2) {
          var r3 = t3.url;
          return void 0 !== r3 && 0 !== r3.indexOf("data:") || (r3 = e2.url), r3;
        }
        var Be = function() {
          function t3(t4) {
            this.hls = void 0, this.loaders = /* @__PURE__ */ Object.create(null), this.variableList = null, this.hls = t4, this.registerListeners();
          }
          var e2 = t3.prototype;
          return e2.startLoad = function(t4) {
          }, e2.stopLoad = function() {
            this.destroyInternalLoaders();
          }, e2.registerListeners = function() {
            var t4 = this.hls;
            t4.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(S.LEVEL_LOADING, this.onLevelLoading, this), t4.on(S.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this), t4.on(S.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
          }, e2.unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(S.LEVEL_LOADING, this.onLevelLoading, this), t4.off(S.AUDIO_TRACK_LOADING, this.onAudioTrackLoading, this), t4.off(S.SUBTITLE_TRACK_LOADING, this.onSubtitleTrackLoading, this);
          }, e2.createInternalLoader = function(t4) {
            var e3 = this.hls.config, r3 = e3.pLoader, i4 = e3.loader, n2 = new (r3 || i4)(e3);
            return this.loaders[t4.type] = n2, n2;
          }, e2.getInternalLoader = function(t4) {
            return this.loaders[t4.type];
          }, e2.resetInternalLoader = function(t4) {
            this.loaders[t4] && delete this.loaders[t4];
          }, e2.destroyInternalLoaders = function() {
            for (var t4 in this.loaders) {
              var e3 = this.loaders[t4];
              e3 && e3.destroy(), this.resetInternalLoader(t4);
            }
          }, e2.destroy = function() {
            this.variableList = null, this.unregisterListeners(), this.destroyInternalLoaders();
          }, e2.onManifestLoading = function(t4, e3) {
            var r3 = e3.url;
            this.variableList = null, this.load({ id: null, level: 0, responseType: "text", type: Ce, url: r3, deliveryDirectives: null });
          }, e2.onLevelLoading = function(t4, e3) {
            var r3 = e3.id, i4 = e3.level, n2 = e3.pathwayId, a2 = e3.url, s3 = e3.deliveryDirectives;
            this.load({ id: r3, level: i4, pathwayId: n2, responseType: "text", type: _e, url: a2, deliveryDirectives: s3 });
          }, e2.onAudioTrackLoading = function(t4, e3) {
            var r3 = e3.id, i4 = e3.groupId, n2 = e3.url, a2 = e3.deliveryDirectives;
            this.load({ id: r3, groupId: i4, level: null, responseType: "text", type: xe, url: n2, deliveryDirectives: a2 });
          }, e2.onSubtitleTrackLoading = function(t4, e3) {
            var r3 = e3.id, i4 = e3.groupId, n2 = e3.url, a2 = e3.deliveryDirectives;
            this.load({ id: r3, groupId: i4, level: null, responseType: "text", type: Pe, url: n2, deliveryDirectives: a2 });
          }, e2.load = function(t4) {
            var e3, r3, i4, n2 = this, a2 = this.hls.config, s3 = this.getInternalLoader(t4);
            if (s3) {
              var l2 = s3.context;
              if (l2 && l2.url === t4.url && l2.level === t4.level) return void w.trace("[playlist-loader]: playlist request ongoing");
              w.log("[playlist-loader]: aborting previous loader for type: " + t4.type), s3.abort();
            }
            if (r3 = t4.type === Ce ? a2.manifestLoadPolicy.default : o({}, a2.playlistLoadPolicy.default, { timeoutRetry: null, errorRetry: null }), s3 = this.createInternalLoader(t4), y(null == (e3 = t4.deliveryDirectives) ? void 0 : e3.part) && (t4.type === _e && null !== t4.level ? i4 = this.hls.levels[t4.level].details : t4.type === xe && null !== t4.id ? i4 = this.hls.audioTracks[t4.id].details : t4.type === Pe && null !== t4.id && (i4 = this.hls.subtitleTracks[t4.id].details), i4)) {
              var u2 = i4.partTarget, h2 = i4.targetduration;
              if (u2 && h2) {
                var d2 = 1e3 * Math.max(3 * u2, 0.8 * h2);
                r3 = o({}, r3, { maxTimeToFirstByteMs: Math.min(d2, r3.maxTimeToFirstByteMs), maxLoadTimeMs: Math.min(d2, r3.maxTimeToFirstByteMs) });
              }
            }
            var c2 = r3.errorRetry || r3.timeoutRetry || {}, f3 = { loadPolicy: r3, timeout: r3.maxLoadTimeMs, maxRetry: c2.maxNumRetry || 0, retryDelay: c2.retryDelayMs || 0, maxRetryDelay: c2.maxRetryDelayMs || 0 }, g2 = { onSuccess: function(t5, e4, r4, i5) {
              var a3 = n2.getInternalLoader(r4);
              n2.resetInternalLoader(r4.type);
              var s4 = t5.data;
              0 === s4.indexOf("#EXTM3U") ? (e4.parsing.start = performance.now(), Le.isMediaPlaylist(s4) ? n2.handleTrackOrLevelPlaylist(t5, e4, r4, i5 || null, a3) : n2.handleMasterPlaylist(t5, e4, r4, i5)) : n2.handleManifestParsingError(t5, r4, new Error("no EXTM3U delimiter"), i5 || null, e4);
            }, onError: function(t5, e4, r4, i5) {
              n2.handleNetworkError(e4, r4, false, t5, i5);
            }, onTimeout: function(t5, e4, r4) {
              n2.handleNetworkError(e4, r4, true, void 0, t5);
            } };
            s3.load(t4, f3, g2);
          }, e2.handleMasterPlaylist = function(t4, e3, r3, i4) {
            var n2 = this.hls, a2 = t4.data, s3 = Ue(t4, r3), o2 = Le.parseMasterPlaylist(a2, s3);
            if (o2.playlistParsingError) this.handleManifestParsingError(t4, r3, o2.playlistParsingError, i4, e3);
            else {
              var l2 = o2.contentSteering, u2 = o2.levels, h2 = o2.sessionData, d2 = o2.sessionKeys, c2 = o2.startTimeOffset, f3 = o2.variableList;
              this.variableList = f3;
              var g2 = Le.parseMasterPlaylistMedia(a2, s3, o2), v2 = g2.AUDIO, m2 = void 0 === v2 ? [] : v2, p2 = g2.SUBTITLES, y2 = g2["CLOSED-CAPTIONS"];
              m2.length && (m2.some(function(t5) {
                return !t5.url;
              }) || !u2[0].audioCodec || u2[0].attrs.AUDIO || (w.log("[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one"), m2.unshift({ type: "main", name: "main", groupId: "main", default: false, autoselect: false, forced: false, id: -1, attrs: new x({}), bitrate: 0, url: "" }))), n2.trigger(S.MANIFEST_LOADED, { levels: u2, audioTracks: m2, subtitles: p2, captions: y2, contentSteering: l2, url: s3, stats: e3, networkDetails: i4, sessionData: h2, sessionKeys: d2, startTimeOffset: c2, variableList: f3 });
            }
          }, e2.handleTrackOrLevelPlaylist = function(t4, e3, r3, i4, n2) {
            var a2 = this.hls, s3 = r3.id, o2 = r3.level, l2 = r3.type, u2 = Ue(t4, r3), h2 = y(o2) ? o2 : y(s3) ? s3 : 0, d2 = Ne(r3), c2 = Le.parseLevelPlaylist(t4.data, u2, h2, d2, 0, this.variableList);
            if (l2 === Ce) {
              var f3 = { attrs: new x({}), bitrate: 0, details: c2, name: "", url: u2 };
              a2.trigger(S.MANIFEST_LOADED, { levels: [f3], audioTracks: [], url: u2, stats: e3, networkDetails: i4, sessionData: null, sessionKeys: null, contentSteering: null, startTimeOffset: null, variableList: null });
            }
            e3.parsing.end = performance.now(), r3.levelDetails = c2, this.handlePlaylistLoaded(c2, t4, e3, r3, i4, n2);
          }, e2.handleManifestParsingError = function(t4, e3, r3, i4, n2) {
            this.hls.trigger(S.ERROR, { type: L.NETWORK_ERROR, details: A.MANIFEST_PARSING_ERROR, fatal: e3.type === Ce, url: t4.url, err: r3, error: r3, reason: r3.message, response: t4, context: e3, networkDetails: i4, stats: n2 });
          }, e2.handleNetworkError = function(t4, e3, r3, n2, a2) {
            void 0 === r3 && (r3 = false);
            var s3 = "A network " + (r3 ? "timeout" : "error" + (n2 ? " (status " + n2.code + ")" : "")) + " occurred while loading " + t4.type;
            t4.type === _e ? s3 += ": " + t4.level + " id: " + t4.id : t4.type !== xe && t4.type !== Pe || (s3 += " id: " + t4.id + ' group-id: "' + t4.groupId + '"');
            var o2 = new Error(s3);
            w.warn("[playlist-loader]: " + s3);
            var l2 = A.UNKNOWN, u2 = false, h2 = this.getInternalLoader(t4);
            switch (t4.type) {
              case Ce:
                l2 = r3 ? A.MANIFEST_LOAD_TIMEOUT : A.MANIFEST_LOAD_ERROR, u2 = true;
                break;
              case _e:
                l2 = r3 ? A.LEVEL_LOAD_TIMEOUT : A.LEVEL_LOAD_ERROR, u2 = false;
                break;
              case xe:
                l2 = r3 ? A.AUDIO_TRACK_LOAD_TIMEOUT : A.AUDIO_TRACK_LOAD_ERROR, u2 = false;
                break;
              case Pe:
                l2 = r3 ? A.SUBTITLE_TRACK_LOAD_TIMEOUT : A.SUBTITLE_LOAD_ERROR, u2 = false;
            }
            h2 && this.resetInternalLoader(t4.type);
            var d2 = { type: L.NETWORK_ERROR, details: l2, fatal: u2, url: t4.url, loader: h2, context: t4, error: o2, networkDetails: e3, stats: a2 };
            if (n2) {
              var c2 = (null == e3 ? void 0 : e3.url) || t4.url;
              d2.response = i3({ url: c2, data: void 0 }, n2);
            }
            this.hls.trigger(S.ERROR, d2);
          }, e2.handlePlaylistLoaded = function(t4, e3, r3, i4, n2, a2) {
            var s3 = this.hls, o2 = i4.type, l2 = i4.level, u2 = i4.id, h2 = i4.groupId, d2 = i4.deliveryDirectives, c2 = Ue(e3, i4), f3 = Ne(i4), g2 = "number" == typeof i4.level && f3 === Fe ? l2 : void 0;
            if (t4.fragments.length) {
              t4.targetduration || (t4.playlistParsingError = new Error("Missing Target Duration"));
              var v2 = t4.playlistParsingError;
              if (v2) s3.trigger(S.ERROR, { type: L.NETWORK_ERROR, details: A.LEVEL_PARSING_ERROR, fatal: false, url: c2, error: v2, reason: v2.message, response: e3, context: i4, level: g2, parent: f3, networkDetails: n2, stats: r3 });
              else switch (t4.live && a2 && (a2.getCacheAge && (t4.ageHeader = a2.getCacheAge() || 0), a2.getCacheAge && !isNaN(t4.ageHeader) || (t4.ageHeader = 0)), o2) {
                case Ce:
                case _e:
                  s3.trigger(S.LEVEL_LOADED, { details: t4, level: g2 || 0, id: u2 || 0, stats: r3, networkDetails: n2, deliveryDirectives: d2 });
                  break;
                case xe:
                  s3.trigger(S.AUDIO_TRACK_LOADED, { details: t4, id: u2 || 0, groupId: h2 || "", stats: r3, networkDetails: n2, deliveryDirectives: d2 });
                  break;
                case Pe:
                  s3.trigger(S.SUBTITLE_TRACK_LOADED, { details: t4, id: u2 || 0, groupId: h2 || "", stats: r3, networkDetails: n2, deliveryDirectives: d2 });
              }
            } else {
              var m2 = new Error("No Segments found in Playlist");
              s3.trigger(S.ERROR, { type: L.NETWORK_ERROR, details: A.LEVEL_EMPTY_ERROR, fatal: false, url: c2, error: m2, reason: m2.message, response: e3, context: i4, level: g2, parent: f3, networkDetails: n2, stats: r3 });
            }
          }, t3;
        }();
        function Ge(t3, e2) {
          var r3;
          try {
            r3 = new Event("addtrack");
          } catch (t4) {
            (r3 = document.createEvent("Event")).initEvent("addtrack", false, false);
          }
          r3.track = t3, e2.dispatchEvent(r3);
        }
        function Ke(t3, e2) {
          var r3 = t3.mode;
          if ("disabled" === r3 && (t3.mode = "hidden"), t3.cues && !t3.cues.getCueById(e2.id)) try {
            if (t3.addCue(e2), !t3.cues.getCueById(e2.id)) throw new Error("addCue is failed for: " + e2);
          } catch (r4) {
            w.debug("[texttrack-utils]: " + r4);
            try {
              var i4 = new self.TextTrackCue(e2.startTime, e2.endTime, e2.text);
              i4.id = e2.id, t3.addCue(i4);
            } catch (t4) {
              w.debug("[texttrack-utils]: Legacy TextTrackCue fallback failed: " + t4);
            }
          }
          "disabled" === r3 && (t3.mode = r3);
        }
        function He(t3) {
          var e2 = t3.mode;
          if ("disabled" === e2 && (t3.mode = "hidden"), t3.cues) for (var r3 = t3.cues.length; r3--; ) t3.removeCue(t3.cues[r3]);
          "disabled" === e2 && (t3.mode = e2);
        }
        function Ve(t3, e2, r3, i4) {
          var n2 = t3.mode;
          if ("disabled" === n2 && (t3.mode = "hidden"), t3.cues && t3.cues.length > 0) for (var a2 = function(t4, e3, r4) {
            var i5 = [], n3 = function(t5, e4) {
              if (e4 < t5[0].startTime) return 0;
              var r5 = t5.length - 1;
              if (e4 > t5[r5].endTime) return -1;
              for (var i6 = 0, n4 = r5; i6 <= n4; ) {
                var a4 = Math.floor((n4 + i6) / 2);
                if (e4 < t5[a4].startTime) n4 = a4 - 1;
                else {
                  if (!(e4 > t5[a4].startTime && i6 < r5)) return a4;
                  i6 = a4 + 1;
                }
              }
              return t5[i6].startTime - e4 < e4 - t5[n4].startTime ? i6 : n4;
            }(t4, e3);
            if (n3 > -1) for (var a3 = n3, s4 = t4.length; a3 < s4; a3++) {
              var o2 = t4[a3];
              if (o2.startTime >= e3 && o2.endTime <= r4) i5.push(o2);
              else if (o2.startTime > r4) return i5;
            }
            return i5;
          }(t3.cues, e2, r3), s3 = 0; s3 < a2.length; s3++) i4 && !i4(a2[s3]) || t3.removeCue(a2[s3]);
          "disabled" === n2 && (t3.mode = n2);
        }
        function Ye(t3) {
          for (var e2 = [], r3 = 0; r3 < t3.length; r3++) {
            var i4 = t3[r3];
            "subtitles" !== i4.kind && "captions" !== i4.kind || !i4.label || e2.push(t3[r3]);
          }
          return e2;
        }
        var We = "org.id3", je = "com.apple.quicktime.HLS", qe = "https://aomedia.org/emsg/ID3";
        function Xe() {
          if ("undefined" != typeof self) return self.VTTCue || self.TextTrackCue;
        }
        function ze(t3, e2, r3, n2, a2) {
          var s3 = new t3(e2, r3, "");
          try {
            s3.value = n2, a2 && (s3.type = a2);
          } catch (o2) {
            s3 = new t3(e2, r3, JSON.stringify(a2 ? i3({ type: a2 }, n2) : n2));
          }
          return s3;
        }
        var Qe = function() {
          var t3 = Xe();
          try {
            t3 && new t3(0, Number.POSITIVE_INFINITY, "");
          } catch (t4) {
            return Number.MAX_VALUE;
          }
          return Number.POSITIVE_INFINITY;
        }();
        function Je(t3, e2) {
          return t3.getTime() / 1e3 - e2;
        }
        var $e = function() {
          function t3(t4) {
            this.hls = void 0, this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {}, this.hls = t4, this._registerListeners();
          }
          var e2 = t3.prototype;
          return e2.destroy = function() {
            this._unregisterListeners(), this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {}, this.hls = null;
          }, e2._registerListeners = function() {
            var t4 = this.hls;
            t4.on(S.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(S.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(S.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this), t4.on(S.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.on(S.LEVEL_UPDATED, this.onLevelUpdated, this);
          }, e2._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(S.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(S.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(S.FRAG_PARSING_METADATA, this.onFragParsingMetadata, this), t4.off(S.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.off(S.LEVEL_UPDATED, this.onLevelUpdated, this);
          }, e2.onMediaAttached = function(t4, e3) {
            this.media = e3.media;
          }, e2.onMediaDetaching = function() {
            this.id3Track && (He(this.id3Track), this.id3Track = null, this.media = null, this.dateRangeCuesAppended = {});
          }, e2.onManifestLoading = function() {
            this.dateRangeCuesAppended = {};
          }, e2.createTrack = function(t4) {
            var e3 = this.getID3Track(t4.textTracks);
            return e3.mode = "hidden", e3;
          }, e2.getID3Track = function(t4) {
            if (this.media) {
              for (var e3 = 0; e3 < t4.length; e3++) {
                var r3 = t4[e3];
                if ("metadata" === r3.kind && "id3" === r3.label) return Ge(r3, this.media), r3;
              }
              return this.media.addTextTrack("metadata", "id3");
            }
          }, e2.onFragParsingMetadata = function(t4, e3) {
            if (this.media) {
              var r3 = this.hls.config, i4 = r3.enableEmsgMetadataCues, n2 = r3.enableID3MetadataCues;
              if (i4 || n2) {
                var a2 = e3.samples;
                this.id3Track || (this.id3Track = this.createTrack(this.media));
                var s3 = Xe();
                if (s3) for (var o2 = 0; o2 < a2.length; o2++) {
                  var l2 = a2[o2].type;
                  if ((l2 !== qe || i4) && n2) {
                    var u2 = yt(a2[o2].data);
                    if (u2) {
                      var h2 = a2[o2].pts, d2 = h2 + a2[o2].duration;
                      d2 > Qe && (d2 = Qe), d2 - h2 <= 0 && (d2 = h2 + 0.25);
                      for (var c2 = 0; c2 < u2.length; c2++) {
                        var f3 = u2[c2];
                        if (!mt(f3)) {
                          this.updateId3CueEnds(h2, l2);
                          var g2 = ze(s3, h2, d2, f3, l2);
                          g2 && this.id3Track.addCue(g2);
                        }
                      }
                    }
                  }
                }
              }
            }
          }, e2.updateId3CueEnds = function(t4, e3) {
            var r3, i4 = null == (r3 = this.id3Track) ? void 0 : r3.cues;
            if (i4) for (var n2 = i4.length; n2--; ) {
              var a2 = i4[n2];
              a2.type === e3 && a2.startTime < t4 && a2.endTime === Qe && (a2.endTime = t4);
            }
          }, e2.onBufferFlushing = function(t4, e3) {
            var r3 = e3.startOffset, i4 = e3.endOffset, n2 = e3.type, a2 = this.id3Track, s3 = this.hls;
            if (s3) {
              var o2 = s3.config, l2 = o2.enableEmsgMetadataCues, u2 = o2.enableID3MetadataCues;
              a2 && (l2 || u2) && Ve(a2, r3, i4, "audio" === n2 ? function(t5) {
                return t5.type === We && u2;
              } : "video" === n2 ? function(t5) {
                return t5.type === qe && l2;
              } : function(t5) {
                return t5.type === We && u2 || t5.type === qe && l2;
              });
            }
          }, e2.onLevelUpdated = function(t4, e3) {
            var r3 = this, i4 = e3.details;
            if (this.media && i4.hasProgramDateTime && this.hls.config.enableDateRangeMetadataCues) {
              var n2 = this.dateRangeCuesAppended, a2 = this.id3Track, s3 = i4.dateRanges, o2 = Object.keys(s3);
              if (a2) for (var l2 = Object.keys(n2).filter(function(t5) {
                return !o2.includes(t5);
              }), u2 = function() {
                var t5 = l2[h2];
                Object.keys(n2[t5].cues).forEach(function(e4) {
                  a2.removeCue(n2[t5].cues[e4]);
                }), delete n2[t5];
              }, h2 = l2.length; h2--; ) u2();
              var d2 = i4.fragments[i4.fragments.length - 1];
              if (0 !== o2.length && y(null == d2 ? void 0 : d2.programDateTime)) {
                this.id3Track || (this.id3Track = this.createTrack(this.media));
                for (var c2 = d2.programDateTime / 1e3 - d2.start, f3 = Xe(), g2 = function() {
                  var t5 = o2[v2], e4 = s3[t5], i5 = Je(e4.startDate, c2), a3 = n2[t5], l3 = (null == a3 ? void 0 : a3.cues) || {}, u3 = (null == a3 ? void 0 : a3.durationKnown) || false, h3 = Qe, d3 = e4.endDate;
                  if (d3) h3 = Je(d3, c2), u3 = true;
                  else if (e4.endOnNext && !u3) {
                    var g3 = o2.reduce(function(t6, r4) {
                      if (r4 !== e4.id) {
                        var i6 = s3[r4];
                        if (i6.class === e4.class && i6.startDate > e4.startDate && (!t6 || e4.startDate < t6.startDate)) return i6;
                      }
                      return t6;
                    }, null);
                    g3 && (h3 = Je(g3.startDate, c2), u3 = true);
                  }
                  for (var m2, p2, y2 = Object.keys(e4.attr), E2 = 0; E2 < y2.length; E2++) {
                    var T2 = y2[E2];
                    if ("ID" !== (p2 = T2) && "CLASS" !== p2 && "START-DATE" !== p2 && "DURATION" !== p2 && "END-DATE" !== p2 && "END-ON-NEXT" !== p2) {
                      var S2 = l3[T2];
                      if (S2) u3 && !a3.durationKnown && (S2.endTime = h3);
                      else if (f3) {
                        var L2 = e4.attr[T2];
                        P(T2) && (m2 = L2, L2 = Uint8Array.from(m2.replace(/^0x/, "").replace(/([\da-fA-F]{2}) ?/g, "0x$1 ").replace(/ +$/, "").split(" ")).buffer);
                        var A2 = ze(f3, i5, h3, { key: T2, data: L2 }, je);
                        A2 && (A2.id = t5, r3.id3Track.addCue(A2), l3[T2] = A2);
                      }
                    }
                  }
                  n2[t5] = { cues: l3, dateRange: e4, durationKnown: u3 };
                }, v2 = 0; v2 < o2.length; v2++) g2();
              }
            }
          }, t3;
        }(), Ze = function() {
          function t3(t4) {
            var e3 = this;
            this.hls = void 0, this.config = void 0, this.media = null, this.levelDetails = null, this.currentTime = 0, this.stallCount = 0, this._latency = null, this.timeupdateHandler = function() {
              return e3.timeupdate();
            }, this.hls = t4, this.config = t4.config, this.registerListeners();
          }
          var e2 = t3.prototype;
          return e2.destroy = function() {
            this.unregisterListeners(), this.onMediaDetaching(), this.levelDetails = null, this.hls = this.timeupdateHandler = null;
          }, e2.registerListeners = function() {
            this.hls.on(S.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.on(S.MEDIA_DETACHING, this.onMediaDetaching, this), this.hls.on(S.MANIFEST_LOADING, this.onManifestLoading, this), this.hls.on(S.LEVEL_UPDATED, this.onLevelUpdated, this), this.hls.on(S.ERROR, this.onError, this);
          }, e2.unregisterListeners = function() {
            this.hls.off(S.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.off(S.MEDIA_DETACHING, this.onMediaDetaching, this), this.hls.off(S.MANIFEST_LOADING, this.onManifestLoading, this), this.hls.off(S.LEVEL_UPDATED, this.onLevelUpdated, this), this.hls.off(S.ERROR, this.onError, this);
          }, e2.onMediaAttached = function(t4, e3) {
            this.media = e3.media, this.media.addEventListener("timeupdate", this.timeupdateHandler);
          }, e2.onMediaDetaching = function() {
            this.media && (this.media.removeEventListener("timeupdate", this.timeupdateHandler), this.media = null);
          }, e2.onManifestLoading = function() {
            this.levelDetails = null, this._latency = null, this.stallCount = 0;
          }, e2.onLevelUpdated = function(t4, e3) {
            var r3 = e3.details;
            this.levelDetails = r3, r3.advanced && this.timeupdate(), !r3.live && this.media && this.media.removeEventListener("timeupdate", this.timeupdateHandler);
          }, e2.onError = function(t4, e3) {
            var r3;
            e3.details === A.BUFFER_STALLED_ERROR && (this.stallCount++, null != (r3 = this.levelDetails) && r3.live && w.warn("[playback-rate-controller]: Stall detected, adjusting target latency"));
          }, e2.timeupdate = function() {
            var t4 = this.media, e3 = this.levelDetails;
            if (t4 && e3) {
              this.currentTime = t4.currentTime;
              var r3 = this.computeLatency();
              if (null !== r3) {
                this._latency = r3;
                var i4 = this.config, n2 = i4.lowLatencyMode, a2 = i4.maxLiveSyncPlaybackRate;
                if (n2 && 1 !== a2 && e3.live) {
                  var s3 = this.targetLatency;
                  if (null !== s3) {
                    var o2 = r3 - s3;
                    if (o2 < Math.min(this.maxLatency, s3 + e3.targetduration) && o2 > 0.05 && this.forwardBufferLength > 1) {
                      var l2 = Math.min(2, Math.max(1, a2)), u2 = Math.round(2 / (1 + Math.exp(-0.75 * o2 - this.edgeStalled)) * 20) / 20;
                      t4.playbackRate = Math.min(l2, Math.max(1, u2));
                    } else 1 !== t4.playbackRate && 0 !== t4.playbackRate && (t4.playbackRate = 1);
                  }
                }
              }
            }
          }, e2.estimateLiveEdge = function() {
            var t4 = this.levelDetails;
            return null === t4 ? null : t4.edge + t4.age;
          }, e2.computeLatency = function() {
            var t4 = this.estimateLiveEdge();
            return null === t4 ? null : t4 - this.currentTime;
          }, s2(t3, [{ key: "latency", get: function() {
            return this._latency || 0;
          } }, { key: "maxLatency", get: function() {
            var t4 = this.config, e3 = this.levelDetails;
            return void 0 !== t4.liveMaxLatencyDuration ? t4.liveMaxLatencyDuration : e3 ? t4.liveMaxLatencyDurationCount * e3.targetduration : 0;
          } }, { key: "targetLatency", get: function() {
            var t4 = this.levelDetails;
            if (null === t4) return null;
            var e3 = t4.holdBack, r3 = t4.partHoldBack, i4 = t4.targetduration, n2 = this.config, a2 = n2.liveSyncDuration, s3 = n2.liveSyncDurationCount, o2 = n2.lowLatencyMode, l2 = this.hls.userConfig, u2 = o2 && r3 || e3;
            (l2.liveSyncDuration || l2.liveSyncDurationCount || 0 === u2) && (u2 = void 0 !== a2 ? a2 : s3 * i4);
            var h2 = i4;
            return u2 + Math.min(1 * this.stallCount, h2);
          } }, { key: "liveSyncPosition", get: function() {
            var t4 = this.estimateLiveEdge(), e3 = this.targetLatency, r3 = this.levelDetails;
            if (null === t4 || null === e3 || null === r3) return null;
            var i4 = r3.edge, n2 = t4 - e3 - this.edgeStalled, a2 = i4 - r3.totalduration, s3 = i4 - (this.config.lowLatencyMode && r3.partTarget || r3.targetduration);
            return Math.min(Math.max(a2, n2), s3);
          } }, { key: "drift", get: function() {
            var t4 = this.levelDetails;
            return null === t4 ? 1 : t4.drift;
          } }, { key: "edgeStalled", get: function() {
            var t4 = this.levelDetails;
            if (null === t4) return 0;
            var e3 = 3 * (this.config.lowLatencyMode && t4.partTarget || t4.targetduration);
            return Math.max(t4.age - e3, 0);
          } }, { key: "forwardBufferLength", get: function() {
            var t4 = this.media, e3 = this.levelDetails;
            if (!t4 || !e3) return 0;
            var r3 = t4.buffered.length;
            return (r3 ? t4.buffered.end(r3 - 1) : e3.edge) - this.currentTime;
          } }]), t3;
        }(), tr = ["NONE", "TYPE-0", "TYPE-1", null], er = ["SDR", "PQ", "HLG"], rr = "", ir = "YES", nr = "v2";
        function ar(t3) {
          var e2 = t3.canSkipUntil, r3 = t3.canSkipDateRanges, i4 = t3.age;
          return e2 && i4 < e2 / 2 ? r3 ? nr : ir : rr;
        }
        var sr = function() {
          function t3(t4, e2, r3) {
            this.msn = void 0, this.part = void 0, this.skip = void 0, this.msn = t4, this.part = e2, this.skip = r3;
          }
          return t3.prototype.addDirectives = function(t4) {
            var e2 = new self.URL(t4);
            return void 0 !== this.msn && e2.searchParams.set("_HLS_msn", this.msn.toString()), void 0 !== this.part && e2.searchParams.set("_HLS_part", this.part.toString()), this.skip && e2.searchParams.set("_HLS_skip", this.skip), e2.href;
          }, t3;
        }(), or = function() {
          function t3(t4) {
            this._attrs = void 0, this.audioCodec = void 0, this.bitrate = void 0, this.codecSet = void 0, this.url = void 0, this.frameRate = void 0, this.height = void 0, this.id = void 0, this.name = void 0, this.videoCodec = void 0, this.width = void 0, this.details = void 0, this.fragmentError = 0, this.loadError = 0, this.loaded = void 0, this.realBitrate = 0, this.supportedPromise = void 0, this.supportedResult = void 0, this._avgBitrate = 0, this._audioGroups = void 0, this._subtitleGroups = void 0, this._urlId = 0, this.url = [t4.url], this._attrs = [t4.attrs], this.bitrate = t4.bitrate, t4.details && (this.details = t4.details), this.id = t4.id || 0, this.name = t4.name, this.width = t4.width || 0, this.height = t4.height || 0, this.frameRate = t4.attrs.optionalFloat("FRAME-RATE", 0), this._avgBitrate = t4.attrs.decimalInteger("AVERAGE-BANDWIDTH"), this.audioCodec = t4.audioCodec, this.videoCodec = t4.videoCodec, this.codecSet = [t4.videoCodec, t4.audioCodec].filter(function(t5) {
              return !!t5;
            }).map(function(t5) {
              return t5.substring(0, 4);
            }).join(","), this.addGroupId("audio", t4.attrs.AUDIO), this.addGroupId("text", t4.attrs.SUBTITLES);
          }
          var e2 = t3.prototype;
          return e2.hasAudioGroup = function(t4) {
            return lr(this._audioGroups, t4);
          }, e2.hasSubtitleGroup = function(t4) {
            return lr(this._subtitleGroups, t4);
          }, e2.addGroupId = function(t4, e3) {
            if (e3) {
              if ("audio" === t4) {
                var r3 = this._audioGroups;
                r3 || (r3 = this._audioGroups = []), -1 === r3.indexOf(e3) && r3.push(e3);
              } else if ("text" === t4) {
                var i4 = this._subtitleGroups;
                i4 || (i4 = this._subtitleGroups = []), -1 === i4.indexOf(e3) && i4.push(e3);
              }
            }
          }, e2.addFallback = function() {
          }, s2(t3, [{ key: "maxBitrate", get: function() {
            return Math.max(this.realBitrate, this.bitrate);
          } }, { key: "averageBitrate", get: function() {
            return this._avgBitrate || this.realBitrate || this.bitrate;
          } }, { key: "attrs", get: function() {
            return this._attrs[0];
          } }, { key: "codecs", get: function() {
            return this.attrs.CODECS || "";
          } }, { key: "pathwayId", get: function() {
            return this.attrs["PATHWAY-ID"] || ".";
          } }, { key: "videoRange", get: function() {
            return this.attrs["VIDEO-RANGE"] || "SDR";
          } }, { key: "score", get: function() {
            return this.attrs.optionalFloat("SCORE", 0);
          } }, { key: "uri", get: function() {
            return this.url[0] || "";
          } }, { key: "audioGroups", get: function() {
            return this._audioGroups;
          } }, { key: "subtitleGroups", get: function() {
            return this._subtitleGroups;
          } }, { key: "urlId", get: function() {
            return 0;
          }, set: function(t4) {
          } }, { key: "audioGroupIds", get: function() {
            return this.audioGroups ? [this.audioGroupId] : void 0;
          } }, { key: "textGroupIds", get: function() {
            return this.subtitleGroups ? [this.textGroupId] : void 0;
          } }, { key: "audioGroupId", get: function() {
            var t4;
            return null == (t4 = this.audioGroups) ? void 0 : t4[0];
          } }, { key: "textGroupId", get: function() {
            var t4;
            return null == (t4 = this.subtitleGroups) ? void 0 : t4[0];
          } }]), t3;
        }();
        function lr(t3, e2) {
          return !(!e2 || !t3) && -1 !== t3.indexOf(e2);
        }
        function ur(t3, e2) {
          var r3 = e2.startPTS;
          if (y(r3)) {
            var i4, n2 = 0;
            e2.sn > t3.sn ? (n2 = r3 - t3.start, i4 = t3) : (n2 = t3.start - r3, i4 = e2), i4.duration !== n2 && (i4.duration = n2);
          } else e2.sn > t3.sn ? t3.cc === e2.cc && t3.minEndPTS ? e2.start = t3.start + (t3.minEndPTS - t3.start) : e2.start = t3.start + t3.duration : e2.start = Math.max(t3.start - e2.duration, 0);
        }
        function hr(t3, e2, r3, i4, n2, a2) {
          i4 - r3 <= 0 && (w.warn("Fragment should have a positive duration", e2), i4 = r3 + e2.duration, a2 = n2 + e2.duration);
          var s3 = r3, o2 = i4, l2 = e2.startPTS, u2 = e2.endPTS;
          if (y(l2)) {
            var h2 = Math.abs(l2 - r3);
            y(e2.deltaPTS) ? e2.deltaPTS = Math.max(h2, e2.deltaPTS) : e2.deltaPTS = h2, s3 = Math.max(r3, l2), r3 = Math.min(r3, l2), n2 = Math.min(n2, e2.startDTS), o2 = Math.min(i4, u2), i4 = Math.max(i4, u2), a2 = Math.max(a2, e2.endDTS);
          }
          var d2 = r3 - e2.start;
          0 !== e2.start && (e2.start = r3), e2.duration = i4 - e2.start, e2.startPTS = r3, e2.maxStartPTS = s3, e2.startDTS = n2, e2.endPTS = i4, e2.minEndPTS = o2, e2.endDTS = a2;
          var c2, f3 = e2.sn;
          if (!t3 || f3 < t3.startSN || f3 > t3.endSN) return 0;
          var g2 = f3 - t3.startSN, v2 = t3.fragments;
          for (v2[g2] = e2, c2 = g2; c2 > 0; c2--) ur(v2[c2], v2[c2 - 1]);
          for (c2 = g2; c2 < v2.length - 1; c2++) ur(v2[c2], v2[c2 + 1]);
          return t3.fragmentHint && ur(v2[v2.length - 1], t3.fragmentHint), t3.PTSKnown = t3.alignedSliding = true, d2;
        }
        function dr(t3, e2) {
          for (var r3 = null, i4 = t3.fragments, n2 = i4.length - 1; n2 >= 0; n2--) {
            var a2 = i4[n2].initSegment;
            if (a2) {
              r3 = a2;
              break;
            }
          }
          t3.fragmentHint && delete t3.fragmentHint.endPTS;
          var s3, l2, u2, h2, d2, c2 = 0;
          if (function(t4, e3, r4) {
            for (var i5 = e3.skippedSegments, n3 = Math.max(t4.startSN, e3.startSN) - e3.startSN, a3 = (t4.fragmentHint ? 1 : 0) + (i5 ? e3.endSN : Math.min(t4.endSN, e3.endSN)) - e3.startSN, s4 = e3.startSN - t4.startSN, o2 = e3.fragmentHint ? e3.fragments.concat(e3.fragmentHint) : e3.fragments, l3 = t4.fragmentHint ? t4.fragments.concat(t4.fragmentHint) : t4.fragments, u3 = n3; u3 <= a3; u3++) {
              var h3 = l3[s4 + u3], d3 = o2[u3];
              i5 && !d3 && u3 < i5 && (d3 = e3.fragments[u3] = h3), h3 && d3 && r4(h3, d3);
            }
          }(t3, e2, function(t4, i5) {
            t4.relurl && (c2 = t4.cc - i5.cc), y(t4.startPTS) && y(t4.endPTS) && (i5.start = i5.startPTS = t4.startPTS, i5.startDTS = t4.startDTS, i5.maxStartPTS = t4.maxStartPTS, i5.endPTS = t4.endPTS, i5.endDTS = t4.endDTS, i5.minEndPTS = t4.minEndPTS, i5.duration = t4.endPTS - t4.startPTS, i5.duration && (s3 = i5), e2.PTSKnown = e2.alignedSliding = true), i5.elementaryStreams = t4.elementaryStreams, i5.loader = t4.loader, i5.stats = t4.stats, t4.initSegment && (i5.initSegment = t4.initSegment, r3 = t4.initSegment);
          }), r3 && (e2.fragmentHint ? e2.fragments.concat(e2.fragmentHint) : e2.fragments).forEach(function(t4) {
            var e3;
            !t4 || t4.initSegment && t4.initSegment.relurl !== (null == (e3 = r3) ? void 0 : e3.relurl) || (t4.initSegment = r3);
          }), e2.skippedSegments) if (e2.deltaUpdateFailed = e2.fragments.some(function(t4) {
            return !t4;
          }), e2.deltaUpdateFailed) {
            w.warn("[level-helper] Previous playlist missing segments skipped in delta playlist");
            for (var f3 = e2.skippedSegments; f3--; ) e2.fragments.shift();
            e2.startSN = e2.fragments[0].sn, e2.startCC = e2.fragments[0].cc;
          } else e2.canSkipDateRanges && (e2.dateRanges = (l2 = t3.dateRanges, u2 = e2.dateRanges, h2 = e2.recentlyRemovedDateranges, d2 = o({}, l2), h2 && h2.forEach(function(t4) {
            delete d2[t4];
          }), Object.keys(u2).forEach(function(t4) {
            var e3 = new F(u2[t4].attr, d2[t4]);
            e3.isValid ? d2[t4] = e3 : w.warn('Ignoring invalid Playlist Delta Update DATERANGE tag: "' + JSON.stringify(u2[t4].attr) + '"');
          }), d2));
          var g2 = e2.fragments;
          if (c2) {
            w.warn("discontinuity sliding from playlist, take drift into account");
            for (var v2 = 0; v2 < g2.length; v2++) g2[v2].cc += c2;
          }
          e2.skippedSegments && (e2.startCC = e2.fragments[0].cc), function(t4, e3, r4) {
            if (t4 && e3) for (var i5 = 0, n3 = 0, a3 = t4.length; n3 <= a3; n3++) {
              var s4 = t4[n3], o2 = e3[n3 + i5];
              s4 && o2 && s4.index === o2.index && s4.fragment.sn === o2.fragment.sn ? r4(s4, o2) : i5--;
            }
          }(t3.partList, e2.partList, function(t4, e3) {
            e3.elementaryStreams = t4.elementaryStreams, e3.stats = t4.stats;
          }), s3 ? hr(e2, s3, s3.startPTS, s3.endPTS, s3.startDTS, s3.endDTS) : cr(t3, e2), g2.length && (e2.totalduration = e2.edge - g2[0].start), e2.driftStartTime = t3.driftStartTime, e2.driftStart = t3.driftStart;
          var m2 = e2.advancedDateTime;
          if (e2.advanced && m2) {
            var p2 = e2.edge;
            e2.driftStart || (e2.driftStartTime = m2, e2.driftStart = p2), e2.driftEndTime = m2, e2.driftEnd = p2;
          } else e2.driftEndTime = t3.driftEndTime, e2.driftEnd = t3.driftEnd, e2.advancedDateTime = t3.advancedDateTime;
        }
        function cr(t3, e2) {
          var r3 = e2.startSN + e2.skippedSegments - t3.startSN, i4 = t3.fragments;
          r3 < 0 || r3 >= i4.length || fr(e2, i4[r3].start);
        }
        function fr(t3, e2) {
          if (e2) {
            for (var r3 = t3.fragments, i4 = t3.skippedSegments; i4 < r3.length; i4++) r3[i4].start += e2;
            t3.fragmentHint && (t3.fragmentHint.start += e2);
          }
        }
        function gr(t3, e2, r3) {
          var i4;
          return null != t3 && t3.details ? vr(null == (i4 = t3.details) ? void 0 : i4.partList, e2, r3) : null;
        }
        function vr(t3, e2, r3) {
          if (t3) for (var i4 = t3.length; i4--; ) {
            var n2 = t3[i4];
            if (n2.index === r3 && n2.fragment.sn === e2) return n2;
          }
          return null;
        }
        function mr(t3) {
          t3.forEach(function(t4, e2) {
            var r3 = t4.details;
            null != r3 && r3.fragments && r3.fragments.forEach(function(t5) {
              t5.level = e2;
            });
          });
        }
        function pr(t3) {
          switch (t3.details) {
            case A.FRAG_LOAD_TIMEOUT:
            case A.KEY_LOAD_TIMEOUT:
            case A.LEVEL_LOAD_TIMEOUT:
            case A.MANIFEST_LOAD_TIMEOUT:
              return true;
          }
          return false;
        }
        function yr(t3, e2) {
          var r3 = pr(e2);
          return t3.default[(r3 ? "timeout" : "error") + "Retry"];
        }
        function Er(t3, e2) {
          var r3 = "linear" === t3.backoff ? 1 : Math.pow(2, e2);
          return Math.min(r3 * t3.retryDelayMs, t3.maxRetryDelayMs);
        }
        function Tr(t3) {
          return i3(i3({}, t3), { errorRetry: null, timeoutRetry: null });
        }
        function Sr(t3, e2, r3, i4) {
          if (!t3) return false;
          var n2 = null == i4 ? void 0 : i4.code, a2 = e2 < t3.maxNumRetry && (function(t4) {
            return 0 === t4 && false === navigator.onLine || !!t4 && (t4 < 400 || t4 > 499);
          }(n2) || !!r3);
          return t3.shouldRetry ? t3.shouldRetry(t3, e2, r3, i4, a2) : a2;
        }
        var Lr = function(t3, e2) {
          for (var r3 = 0, i4 = t3.length - 1, n2 = null, a2 = null; r3 <= i4; ) {
            var s3 = e2(a2 = t3[n2 = (r3 + i4) / 2 | 0]);
            if (s3 > 0) r3 = n2 + 1;
            else {
              if (!(s3 < 0)) return a2;
              i4 = n2 - 1;
            }
          }
          return null;
        };
        function Ar(t3, e2, r3, i4, n2) {
          void 0 === r3 && (r3 = 0), void 0 === i4 && (i4 = 0), void 0 === n2 && (n2 = 5e-3);
          var a2 = null;
          if (t3) {
            a2 = e2[t3.sn - e2[0].sn + 1] || null;
            var s3 = t3.endDTS - r3;
            s3 > 0 && s3 < 15e-7 && (r3 += 15e-7);
          } else 0 === r3 && 0 === e2[0].start && (a2 = e2[0]);
          if (a2 && ((!t3 || t3.level === a2.level) && 0 === Rr(r3, i4, a2) || function(t4, e3, r4) {
            if (e3 && 0 === e3.start && e3.level < t4.level && (e3.endPTS || 0) > 0) {
              var i5 = e3.tagList.reduce(function(t5, e4) {
                return "INF" === e4[0] && (t5 += parseFloat(e4[1])), t5;
              }, r4);
              return t4.start <= i5;
            }
            return false;
          }(a2, t3, Math.min(n2, i4)))) return a2;
          var o2 = Lr(e2, Rr.bind(null, r3, i4));
          return !o2 || o2 === t3 && a2 ? a2 : o2;
        }
        function Rr(t3, e2, r3) {
          if (void 0 === t3 && (t3 = 0), void 0 === e2 && (e2 = 0), r3.start <= t3 && r3.start + r3.duration > t3) return 0;
          var i4 = Math.min(e2, r3.duration + (r3.deltaPTS ? r3.deltaPTS : 0));
          return r3.start + r3.duration - i4 <= t3 ? 1 : r3.start - i4 > t3 && r3.start ? -1 : 0;
        }
        function br(t3, e2, r3) {
          var i4 = 1e3 * Math.min(e2, r3.duration + (r3.deltaPTS ? r3.deltaPTS : 0));
          return (r3.endProgramDateTime || 0) - i4 > t3;
        }
        var kr = 0, Dr = 2, Ir = 3, wr = 5, Cr = 0, _r = 1, xr = 2, Pr = function() {
          function t3(t4) {
            this.hls = void 0, this.playlistError = 0, this.penalizedRenditions = {}, this.log = void 0, this.warn = void 0, this.error = void 0, this.hls = t4, this.log = w.log.bind(w, "[info]:"), this.warn = w.warn.bind(w, "[warning]:"), this.error = w.error.bind(w, "[error]:"), this.registerListeners();
          }
          var e2 = t3.prototype;
          return e2.registerListeners = function() {
            var t4 = this.hls;
            t4.on(S.ERROR, this.onError, this), t4.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(S.LEVEL_UPDATED, this.onLevelUpdated, this);
          }, e2.unregisterListeners = function() {
            var t4 = this.hls;
            t4 && (t4.off(S.ERROR, this.onError, this), t4.off(S.ERROR, this.onErrorOut, this), t4.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(S.LEVEL_UPDATED, this.onLevelUpdated, this));
          }, e2.destroy = function() {
            this.unregisterListeners(), this.hls = null, this.penalizedRenditions = {};
          }, e2.startLoad = function(t4) {
          }, e2.stopLoad = function() {
            this.playlistError = 0;
          }, e2.getVariantLevelIndex = function(t4) {
            return (null == t4 ? void 0 : t4.type) === Fe ? t4.level : this.hls.loadLevel;
          }, e2.onManifestLoading = function() {
            this.playlistError = 0, this.penalizedRenditions = {};
          }, e2.onLevelUpdated = function() {
            this.playlistError = 0;
          }, e2.onError = function(t4, e3) {
            var r3, i4;
            if (!e3.fatal) {
              var n2 = this.hls, a2 = e3.context;
              switch (e3.details) {
                case A.FRAG_LOAD_ERROR:
                case A.FRAG_LOAD_TIMEOUT:
                case A.KEY_LOAD_ERROR:
                case A.KEY_LOAD_TIMEOUT:
                  return void (e3.errorAction = this.getFragRetryOrSwitchAction(e3));
                case A.FRAG_PARSING_ERROR:
                  if (null != (r3 = e3.frag) && r3.gap) return void (e3.errorAction = { action: kr, flags: Cr });
                case A.FRAG_GAP:
                case A.FRAG_DECRYPT_ERROR:
                  return e3.errorAction = this.getFragRetryOrSwitchAction(e3), void (e3.errorAction.action = Dr);
                case A.LEVEL_EMPTY_ERROR:
                case A.LEVEL_PARSING_ERROR:
                  var s3, o2, l2 = e3.parent === Fe ? e3.level : n2.loadLevel;
                  return void (e3.details === A.LEVEL_EMPTY_ERROR && null != (s3 = e3.context) && null != (o2 = s3.levelDetails) && o2.live ? e3.errorAction = this.getPlaylistRetryOrSwitchAction(e3, l2) : (e3.levelRetry = false, e3.errorAction = this.getLevelSwitchAction(e3, l2)));
                case A.LEVEL_LOAD_ERROR:
                case A.LEVEL_LOAD_TIMEOUT:
                  return void ("number" == typeof (null == a2 ? void 0 : a2.level) && (e3.errorAction = this.getPlaylistRetryOrSwitchAction(e3, a2.level)));
                case A.AUDIO_TRACK_LOAD_ERROR:
                case A.AUDIO_TRACK_LOAD_TIMEOUT:
                case A.SUBTITLE_LOAD_ERROR:
                case A.SUBTITLE_TRACK_LOAD_TIMEOUT:
                  if (a2) {
                    var u2 = n2.levels[n2.loadLevel];
                    if (u2 && (a2.type === xe && u2.hasAudioGroup(a2.groupId) || a2.type === Pe && u2.hasSubtitleGroup(a2.groupId))) return e3.errorAction = this.getPlaylistRetryOrSwitchAction(e3, n2.loadLevel), e3.errorAction.action = Dr, void (e3.errorAction.flags = _r);
                  }
                  return;
                case A.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED:
                  var h2 = n2.levels[n2.loadLevel], d2 = null == h2 ? void 0 : h2.attrs["HDCP-LEVEL"];
                  return void (d2 ? e3.errorAction = { action: Dr, flags: xr, hdcpLevel: d2 } : this.keySystemError(e3));
                case A.BUFFER_ADD_CODEC_ERROR:
                case A.REMUX_ALLOC_ERROR:
                case A.BUFFER_APPEND_ERROR:
                  return void (e3.errorAction = this.getLevelSwitchAction(e3, null != (i4 = e3.level) ? i4 : n2.loadLevel));
                case A.INTERNAL_EXCEPTION:
                case A.BUFFER_APPENDING_ERROR:
                case A.BUFFER_FULL_ERROR:
                case A.LEVEL_SWITCH_ERROR:
                case A.BUFFER_STALLED_ERROR:
                case A.BUFFER_SEEK_OVER_HOLE:
                case A.BUFFER_NUDGE_ON_STALL:
                  return void (e3.errorAction = { action: kr, flags: Cr });
              }
              e3.type === L.KEY_SYSTEM_ERROR && this.keySystemError(e3);
            }
          }, e2.keySystemError = function(t4) {
            var e3 = this.getVariantLevelIndex(t4.frag);
            t4.levelRetry = false, t4.errorAction = this.getLevelSwitchAction(t4, e3);
          }, e2.getPlaylistRetryOrSwitchAction = function(t4, e3) {
            var r3 = yr(this.hls.config.playlistLoadPolicy, t4), i4 = this.playlistError++;
            if (Sr(r3, i4, pr(t4), t4.response)) return { action: wr, flags: Cr, retryConfig: r3, retryCount: i4 };
            var n2 = this.getLevelSwitchAction(t4, e3);
            return r3 && (n2.retryConfig = r3, n2.retryCount = i4), n2;
          }, e2.getFragRetryOrSwitchAction = function(t4) {
            var e3 = this.hls, r3 = this.getVariantLevelIndex(t4.frag), i4 = e3.levels[r3], n2 = e3.config, a2 = n2.fragLoadPolicy, s3 = n2.keyLoadPolicy, o2 = yr(t4.details.startsWith("key") ? s3 : a2, t4), l2 = e3.levels.reduce(function(t5, e4) {
              return t5 + e4.fragmentError;
            }, 0);
            if (i4 && (t4.details !== A.FRAG_GAP && i4.fragmentError++, Sr(o2, l2, pr(t4), t4.response))) return { action: wr, flags: Cr, retryConfig: o2, retryCount: l2 };
            var u2 = this.getLevelSwitchAction(t4, r3);
            return o2 && (u2.retryConfig = o2, u2.retryCount = l2), u2;
          }, e2.getLevelSwitchAction = function(t4, e3) {
            var r3 = this.hls;
            null == e3 && (e3 = r3.loadLevel);
            var i4 = this.hls.levels[e3];
            if (i4) {
              var n2, a2, s3 = t4.details;
              i4.loadError++, s3 === A.BUFFER_APPEND_ERROR && i4.fragmentError++;
              var o2 = -1, l2 = r3.levels, u2 = r3.loadLevel, h2 = r3.minAutoLevel, d2 = r3.maxAutoLevel;
              r3.autoLevelEnabled || (r3.loadLevel = -1);
              for (var c2, f3 = null == (n2 = t4.frag) ? void 0 : n2.type, g2 = (f3 === Me && s3 === A.FRAG_PARSING_ERROR || "audio" === t4.sourceBufferName && (s3 === A.BUFFER_ADD_CODEC_ERROR || s3 === A.BUFFER_APPEND_ERROR)) && l2.some(function(t5) {
                var e4 = t5.audioCodec;
                return i4.audioCodec !== e4;
              }), v2 = "video" === t4.sourceBufferName && (s3 === A.BUFFER_ADD_CODEC_ERROR || s3 === A.BUFFER_APPEND_ERROR) && l2.some(function(t5) {
                var e4 = t5.codecSet, r4 = t5.audioCodec;
                return i4.codecSet !== e4 && i4.audioCodec === r4;
              }), m2 = null != (a2 = t4.context) ? a2 : {}, p2 = m2.type, y2 = m2.groupId, E2 = function() {
                var e4 = (T2 + u2) % l2.length;
                if (e4 !== u2 && e4 >= h2 && e4 <= d2 && 0 === l2[e4].loadError) {
                  var r4, n3, a3 = l2[e4];
                  if (s3 === A.FRAG_GAP && f3 === Fe && t4.frag) {
                    var c3 = l2[e4].details;
                    if (c3) {
                      var m3 = Ar(t4.frag, c3.fragments, t4.frag.start);
                      if (null != m3 && m3.gap) return 0;
                    }
                  } else {
                    if (p2 === xe && a3.hasAudioGroup(y2) || p2 === Pe && a3.hasSubtitleGroup(y2)) return 0;
                    if (f3 === Me && null != (r4 = i4.audioGroups) && r4.some(function(t5) {
                      return a3.hasAudioGroup(t5);
                    }) || f3 === Oe && null != (n3 = i4.subtitleGroups) && n3.some(function(t5) {
                      return a3.hasSubtitleGroup(t5);
                    }) || g2 && i4.audioCodec === a3.audioCodec || !g2 && i4.audioCodec !== a3.audioCodec || v2 && i4.codecSet === a3.codecSet) return 0;
                  }
                  return o2 = e4, 1;
                }
              }, T2 = l2.length; T2-- && (0 === (c2 = E2()) || 1 !== c2); ) ;
              if (o2 > -1 && r3.loadLevel !== o2) return t4.levelRetry = true, this.playlistError = 0, { action: Dr, flags: Cr, nextAutoLevel: o2 };
            }
            return { action: Dr, flags: _r };
          }, e2.onErrorOut = function(t4, e3) {
            var r3;
            switch (null == (r3 = e3.errorAction) ? void 0 : r3.action) {
              case kr:
                break;
              case Dr:
                this.sendAlternateToPenaltyBox(e3), e3.errorAction.resolved || e3.details === A.FRAG_GAP ? /MediaSource readyState: ended/.test(e3.error.message) && (this.warn('MediaSource ended after "' + e3.sourceBufferName + '" sourceBuffer append error. Attempting to recover from media error.'), this.hls.recoverMediaError()) : e3.fatal = true;
            }
            e3.fatal && this.hls.stopLoad();
          }, e2.sendAlternateToPenaltyBox = function(t4) {
            var e3 = this.hls, r3 = t4.errorAction;
            if (r3) {
              var i4 = r3.flags, n2 = r3.hdcpLevel, a2 = r3.nextAutoLevel;
              switch (i4) {
                case Cr:
                  this.switchLevel(t4, a2);
                  break;
                case xr:
                  n2 && (e3.maxHdcpLevel = tr[tr.indexOf(n2) - 1], r3.resolved = true), this.warn('Restricting playback to HDCP-LEVEL of "' + e3.maxHdcpLevel + '" or lower');
              }
              r3.resolved || this.switchLevel(t4, a2);
            }
          }, e2.switchLevel = function(t4, e3) {
            void 0 !== e3 && t4.errorAction && (this.warn("switching to level " + e3 + " after " + t4.details), this.hls.nextAutoLevel = e3, t4.errorAction.resolved = true, this.hls.nextLoadLevel = this.hls.nextAutoLevel);
          }, t3;
        }(), Fr = function() {
          function t3(t4, e3) {
            this.hls = void 0, this.timer = -1, this.requestScheduled = -1, this.canLoad = false, this.log = void 0, this.warn = void 0, this.log = w.log.bind(w, e3 + ":"), this.warn = w.warn.bind(w, e3 + ":"), this.hls = t4;
          }
          var e2 = t3.prototype;
          return e2.destroy = function() {
            this.clearTimer(), this.hls = this.log = this.warn = null;
          }, e2.clearTimer = function() {
            -1 !== this.timer && (self.clearTimeout(this.timer), this.timer = -1);
          }, e2.startLoad = function() {
            this.canLoad = true, this.requestScheduled = -1, this.loadPlaylist();
          }, e2.stopLoad = function() {
            this.canLoad = false, this.clearTimer();
          }, e2.switchParams = function(t4, e3, r3) {
            var i4 = null == e3 ? void 0 : e3.renditionReports;
            if (i4) {
              for (var n2 = -1, a2 = 0; a2 < i4.length; a2++) {
                var s3 = i4[a2], o2 = void 0;
                try {
                  o2 = new self.URL(s3.URI, e3.url).href;
                } catch (t5) {
                  w.warn("Could not construct new URL for Rendition Report: " + t5), o2 = s3.URI || "";
                }
                if (o2 === t4) {
                  n2 = a2;
                  break;
                }
                o2 === t4.substring(0, o2.length) && (n2 = a2);
              }
              if (-1 !== n2) {
                var l2 = i4[n2], u2 = parseInt(l2["LAST-MSN"]) || (null == e3 ? void 0 : e3.lastPartSn), h2 = parseInt(l2["LAST-PART"]) || (null == e3 ? void 0 : e3.lastPartIndex);
                if (this.hls.config.lowLatencyMode) {
                  var d2 = Math.min(e3.age - e3.partTarget, e3.targetduration);
                  h2 >= 0 && d2 > e3.partTarget && (h2 += 1);
                }
                var c2 = r3 && ar(r3);
                return new sr(u2, h2 >= 0 ? h2 : void 0, c2);
              }
            }
          }, e2.loadPlaylist = function(t4) {
            -1 === this.requestScheduled && (this.requestScheduled = self.performance.now());
          }, e2.shouldLoadPlaylist = function(t4) {
            return this.canLoad && !!t4 && !!t4.url && (!t4.details || t4.details.live);
          }, e2.shouldReloadPlaylist = function(t4) {
            return -1 === this.timer && -1 === this.requestScheduled && this.shouldLoadPlaylist(t4);
          }, e2.playlistLoaded = function(t4, e3, r3) {
            var i4 = this, n2 = e3.details, a2 = e3.stats, s3 = self.performance.now(), o2 = a2.loading.first ? Math.max(0, s3 - a2.loading.first) : 0;
            if (n2.advancedDateTime = Date.now() - o2, n2.live || null != r3 && r3.live) {
              if (n2.reloaded(r3), r3 && this.log("live playlist " + t4 + " " + (n2.advanced ? "REFRESHED " + n2.lastPartSn + "-" + n2.lastPartIndex : n2.updated ? "UPDATED" : "MISSED")), r3 && n2.fragments.length > 0 && dr(r3, n2), !this.canLoad || !n2.live) return;
              var l2, u2 = void 0, h2 = void 0;
              if (n2.canBlockReload && n2.endSN && n2.advanced) {
                var d2 = this.hls.config.lowLatencyMode, c2 = n2.lastPartSn, f3 = n2.endSN, g2 = n2.lastPartIndex, v2 = c2 === f3;
                -1 !== g2 ? (u2 = v2 ? f3 + 1 : c2, h2 = v2 ? d2 ? 0 : g2 : g2 + 1) : u2 = f3 + 1;
                var m2 = n2.age, p2 = m2 + n2.ageHeader, y2 = Math.min(p2 - n2.partTarget, 1.5 * n2.targetduration);
                if (y2 > 0) {
                  if (r3 && y2 > r3.tuneInGoal) this.warn("CDN Tune-in goal increased from: " + r3.tuneInGoal + " to: " + y2 + " with playlist age: " + n2.age), y2 = 0;
                  else {
                    var E2 = Math.floor(y2 / n2.targetduration);
                    u2 += E2, void 0 !== h2 && (h2 += Math.round(y2 % n2.targetduration / n2.partTarget)), this.log("CDN Tune-in age: " + n2.ageHeader + "s last advanced " + m2.toFixed(2) + "s goal: " + y2 + " skip sn " + E2 + " to part " + h2);
                  }
                  n2.tuneInGoal = y2;
                }
                if (l2 = this.getDeliveryDirectives(n2, e3.deliveryDirectives, u2, h2), d2 || !v2) return void this.loadPlaylist(l2);
              } else (n2.canBlockReload || n2.canSkipUntil) && (l2 = this.getDeliveryDirectives(n2, e3.deliveryDirectives, u2, h2));
              var T2 = this.hls.mainForwardBufferInfo, S2 = T2 ? T2.end - T2.len : 0, L2 = function(t5, e4) {
                void 0 === e4 && (e4 = 1 / 0);
                var r4 = 1e3 * t5.targetduration;
                if (t5.updated) {
                  var i5 = t5.fragments;
                  if (i5.length && 4 * r4 > e4) {
                    var n3 = 1e3 * i5[i5.length - 1].duration;
                    n3 < r4 && (r4 = n3);
                  }
                } else r4 /= 2;
                return Math.round(r4);
              }(n2, 1e3 * (n2.edge - S2));
              n2.updated && s3 > this.requestScheduled + L2 && (this.requestScheduled = a2.loading.start), void 0 !== u2 && n2.canBlockReload ? this.requestScheduled = a2.loading.first + L2 - (1e3 * n2.partTarget || 1e3) : -1 === this.requestScheduled || this.requestScheduled + L2 < s3 ? this.requestScheduled = s3 : this.requestScheduled - s3 <= 0 && (this.requestScheduled += L2);
              var A2 = this.requestScheduled - s3;
              A2 = Math.max(0, A2), this.log("reload live playlist " + t4 + " in " + Math.round(A2) + " ms"), this.timer = self.setTimeout(function() {
                return i4.loadPlaylist(l2);
              }, A2);
            } else this.clearTimer();
          }, e2.getDeliveryDirectives = function(t4, e3, r3, i4) {
            var n2 = ar(t4);
            return null != e3 && e3.skip && t4.deltaUpdateFailed && (r3 = e3.msn, i4 = e3.part, n2 = rr), new sr(r3, i4, n2);
          }, e2.checkRetry = function(t4) {
            var e3 = this, r3 = t4.details, i4 = pr(t4), n2 = t4.errorAction, a2 = n2 || {}, s3 = a2.action, o2 = a2.retryCount, l2 = void 0 === o2 ? 0 : o2, u2 = a2.retryConfig, h2 = !!n2 && !!u2 && (s3 === wr || !n2.resolved && s3 === Dr);
            if (h2) {
              var d2;
              if (this.requestScheduled = -1, l2 >= u2.maxNumRetry) return false;
              if (i4 && null != (d2 = t4.context) && d2.deliveryDirectives) this.warn("Retrying playlist loading " + (l2 + 1) + "/" + u2.maxNumRetry + ' after "' + r3 + '" without delivery-directives'), this.loadPlaylist();
              else {
                var c2 = Er(u2, l2);
                this.timer = self.setTimeout(function() {
                  return e3.loadPlaylist();
                }, c2), this.warn("Retrying playlist loading " + (l2 + 1) + "/" + u2.maxNumRetry + ' after "' + r3 + '" in ' + c2 + "ms");
              }
              t4.levelRetry = true, n2.resolved = true;
            }
            return h2;
          }, t3;
        }(), Mr = function() {
          function t3(t4, e3, r3) {
            void 0 === e3 && (e3 = 0), void 0 === r3 && (r3 = 0), this.halfLife = void 0, this.alpha_ = void 0, this.estimate_ = void 0, this.totalWeight_ = void 0, this.halfLife = t4, this.alpha_ = t4 ? Math.exp(Math.log(0.5) / t4) : 0, this.estimate_ = e3, this.totalWeight_ = r3;
          }
          var e2 = t3.prototype;
          return e2.sample = function(t4, e3) {
            var r3 = Math.pow(this.alpha_, t4);
            this.estimate_ = e3 * (1 - r3) + r3 * this.estimate_, this.totalWeight_ += t4;
          }, e2.getTotalWeight = function() {
            return this.totalWeight_;
          }, e2.getEstimate = function() {
            if (this.alpha_) {
              var t4 = 1 - Math.pow(this.alpha_, this.totalWeight_);
              if (t4) return this.estimate_ / t4;
            }
            return this.estimate_;
          }, t3;
        }(), Or = function() {
          function t3(t4, e3, r3, i4) {
            void 0 === i4 && (i4 = 100), this.defaultEstimate_ = void 0, this.minWeight_ = void 0, this.minDelayMs_ = void 0, this.slow_ = void 0, this.fast_ = void 0, this.defaultTTFB_ = void 0, this.ttfb_ = void 0, this.defaultEstimate_ = r3, this.minWeight_ = 1e-3, this.minDelayMs_ = 50, this.slow_ = new Mr(t4), this.fast_ = new Mr(e3), this.defaultTTFB_ = i4, this.ttfb_ = new Mr(t4);
          }
          var e2 = t3.prototype;
          return e2.update = function(t4, e3) {
            var r3 = this.slow_, i4 = this.fast_, n2 = this.ttfb_;
            r3.halfLife !== t4 && (this.slow_ = new Mr(t4, r3.getEstimate(), r3.getTotalWeight())), i4.halfLife !== e3 && (this.fast_ = new Mr(e3, i4.getEstimate(), i4.getTotalWeight())), n2.halfLife !== t4 && (this.ttfb_ = new Mr(t4, n2.getEstimate(), n2.getTotalWeight()));
          }, e2.sample = function(t4, e3) {
            var r3 = (t4 = Math.max(t4, this.minDelayMs_)) / 1e3, i4 = 8 * e3 / r3;
            this.fast_.sample(r3, i4), this.slow_.sample(r3, i4);
          }, e2.sampleTTFB = function(t4) {
            var e3 = t4 / 1e3, r3 = Math.sqrt(2) * Math.exp(-Math.pow(e3, 2) / 2);
            this.ttfb_.sample(r3, Math.max(t4, 5));
          }, e2.canEstimate = function() {
            return this.fast_.getTotalWeight() >= this.minWeight_;
          }, e2.getEstimate = function() {
            return this.canEstimate() ? Math.min(this.fast_.getEstimate(), this.slow_.getEstimate()) : this.defaultEstimate_;
          }, e2.getEstimateTTFB = function() {
            return this.ttfb_.getTotalWeight() >= this.minWeight_ ? this.ttfb_.getEstimate() : this.defaultTTFB_;
          }, e2.destroy = function() {
          }, t3;
        }(), Nr = { supported: true, configurations: [], decodingInfoResults: [{ supported: true, powerEfficient: true, smooth: true }] }, Ur = {};
        function Br(t3, e2, r3) {
          var n2 = t3.videoCodec, a2 = t3.audioCodec;
          if (!n2 || !a2 || !r3) return Promise.resolve(Nr);
          var s3 = { width: t3.width, height: t3.height, bitrate: Math.ceil(Math.max(0.9 * t3.bitrate, t3.averageBitrate)), framerate: t3.frameRate || 30 }, o2 = t3.videoRange;
          "SDR" !== o2 && (s3.transferFunction = o2.toLowerCase());
          var l2 = n2.split(",").map(function(t4) {
            return { type: "media-source", video: i3(i3({}, s3), {}, { contentType: he(t4, "video") }) };
          });
          return a2 && t3.audioGroups && t3.audioGroups.forEach(function(t4) {
            var r4;
            t4 && (null == (r4 = e2.groups[t4]) || r4.tracks.forEach(function(e3) {
              if (e3.groupId === t4) {
                var r5 = e3.channels || "", i4 = parseFloat(r5);
                y(i4) && i4 > 2 && l2.push.apply(l2, a2.split(",").map(function(t5) {
                  return { type: "media-source", audio: { contentType: he(t5, "audio"), channels: "" + i4 } };
                }));
              }
            }));
          }), Promise.all(l2.map(function(t4) {
            var e3 = function(t5) {
              var e4 = t5.audio, r4 = t5.video, i4 = r4 || e4;
              if (i4) {
                var n3 = i4.contentType.split('"')[1];
                if (r4) return "r" + r4.height + "x" + r4.width + "f" + Math.ceil(r4.framerate) + (r4.transferFunction || "sd") + "_" + n3 + "_" + Math.ceil(r4.bitrate / 1e5);
                if (e4) return "c" + e4.channels + (e4.spatialRendering ? "s" : "n") + "_" + n3;
              }
              return "";
            }(t4);
            return Ur[e3] || (Ur[e3] = r3.decodingInfo(t4));
          })).then(function(t4) {
            return { supported: !t4.some(function(t5) {
              return !t5.supported;
            }), configurations: l2, decodingInfoResults: t4 };
          }).catch(function(t4) {
            return { supported: false, configurations: l2, decodingInfoResults: [], error: t4 };
          });
        }
        function Gr(t3, e2) {
          var r3 = false, i4 = [];
          return t3 && (r3 = "SDR" !== t3, i4 = [t3]), e2 && (i4 = e2.allowedVideoRanges || er.slice(0), i4 = (r3 = void 0 !== e2.preferHDR ? e2.preferHDR : function() {
            if ("function" == typeof matchMedia) {
              var t4 = matchMedia("(dynamic-range: high)"), e3 = matchMedia("bad query");
              if (t4.media !== e3.media) return true === t4.matches;
            }
            return false;
          }()) ? i4.filter(function(t4) {
            return "SDR" !== t4;
          }) : ["SDR"]), { preferHDR: r3, allowedVideoRanges: i4 };
        }
        function Kr(t3, e2) {
          w.log('[abr] start candidates with "' + t3 + '" ignored because ' + e2);
        }
        function Hr(t3, e2, r3) {
          if ("attrs" in t3) {
            var i4 = e2.indexOf(t3);
            if (-1 !== i4) return i4;
          }
          for (var n2 = 0; n2 < e2.length; n2++) if (Vr(t3, e2[n2], r3)) return n2;
          return -1;
        }
        function Vr(t3, e2, r3) {
          var i4 = t3.groupId, n2 = t3.name, a2 = t3.lang, s3 = t3.assocLang, o2 = t3.characteristics, l2 = t3.default, u2 = t3.forced;
          return (void 0 === i4 || e2.groupId === i4) && (void 0 === n2 || e2.name === n2) && (void 0 === a2 || e2.lang === a2) && (void 0 === a2 || e2.assocLang === s3) && (void 0 === l2 || e2.default === l2) && (void 0 === u2 || e2.forced === u2) && (void 0 === o2 || function(t4, e3) {
            void 0 === e3 && (e3 = "");
            var r4 = t4.split(","), i5 = e3.split(",");
            return r4.length === i5.length && !r4.some(function(t5) {
              return -1 === i5.indexOf(t5);
            });
          }(o2, e2.characteristics)) && (void 0 === r3 || r3(t3, e2));
        }
        function Yr(t3, e2) {
          var r3 = t3.audioCodec, i4 = t3.channels;
          return !(void 0 !== r3 && (e2.audioCodec || "").substring(0, 4) !== r3.substring(0, 4) || void 0 !== i4 && i4 !== (e2.channels || "2"));
        }
        function Wr(t3, e2, r3) {
          for (var i4 = e2; i4; i4--) if (r3(t3[i4])) return i4;
          for (var n2 = e2 + 1; n2 < t3.length; n2++) if (r3(t3[n2])) return n2;
          return -1;
        }
        var jr = function() {
          function t3(t4) {
            var e3 = this;
            this.hls = void 0, this.lastLevelLoadSec = 0, this.lastLoadedFragLevel = -1, this.firstSelection = -1, this._nextAutoLevel = -1, this.nextAutoLevelKey = "", this.audioTracksByGroup = null, this.codecTiers = null, this.timer = -1, this.fragCurrent = null, this.partCurrent = null, this.bitrateTestDelay = 0, this.bwEstimator = void 0, this._abandonRulesCheck = function() {
              var t5 = e3.fragCurrent, r3 = e3.partCurrent, i4 = e3.hls, n2 = i4.autoLevelEnabled, a2 = i4.media;
              if (t5 && a2) {
                var s3 = performance.now(), o2 = r3 ? r3.stats : t5.stats, l2 = r3 ? r3.duration : t5.duration, u2 = s3 - o2.loading.start, h2 = i4.minAutoLevel;
                if (o2.aborted || o2.loaded && o2.loaded === o2.total || t5.level <= h2) return e3.clearTimer(), void (e3._nextAutoLevel = -1);
                if (n2 && !a2.paused && a2.playbackRate && a2.readyState) {
                  var d2 = i4.mainForwardBufferInfo;
                  if (null !== d2) {
                    var c2 = e3.bwEstimator.getEstimateTTFB(), f3 = Math.abs(a2.playbackRate);
                    if (!(u2 <= Math.max(c2, l2 / (2 * f3) * 1e3))) {
                      var g2 = d2.len / f3, v2 = o2.loading.first ? o2.loading.first - o2.loading.start : -1, m2 = o2.loaded && v2 > -1, p2 = e3.getBwEstimate(), E2 = i4.levels, T2 = E2[t5.level], L2 = o2.total || Math.max(o2.loaded, Math.round(l2 * T2.averageBitrate / 8)), A2 = m2 ? u2 - v2 : u2;
                      A2 < 1 && m2 && (A2 = Math.min(u2, 8 * o2.loaded / p2));
                      var R2 = m2 ? 1e3 * o2.loaded / A2 : 0, b2 = R2 ? (L2 - o2.loaded) / R2 : 8 * L2 / p2 + c2 / 1e3;
                      if (!(b2 <= g2)) {
                        var k2, D2 = R2 ? 8 * R2 : p2, I2 = Number.POSITIVE_INFINITY;
                        for (k2 = t5.level - 1; k2 > h2; k2--) {
                          var C2 = E2[k2].maxBitrate;
                          if ((I2 = e3.getTimeToLoadFrag(c2 / 1e3, D2, l2 * C2, !E2[k2].details)) < g2) break;
                        }
                        if (!(I2 >= b2 || I2 > 10 * l2)) {
                          i4.nextLoadLevel = i4.nextAutoLevel = k2, m2 ? e3.bwEstimator.sample(u2 - Math.min(c2, v2), o2.loaded) : e3.bwEstimator.sampleTTFB(u2);
                          var _2 = E2[k2].maxBitrate;
                          e3.getBwEstimate() * e3.hls.config.abrBandWidthUpFactor > _2 && e3.resetEstimator(_2), e3.clearTimer(), w.warn("[abr] Fragment " + t5.sn + (r3 ? " part " + r3.index : "") + " of level " + t5.level + " is loading too slowly;\n      Time to underbuffer: " + g2.toFixed(3) + " s\n      Estimated load time for current fragment: " + b2.toFixed(3) + " s\n      Estimated load time for down switch fragment: " + I2.toFixed(3) + " s\n      TTFB estimate: " + (0 | v2) + " ms\n      Current BW estimate: " + (y(p2) ? 0 | p2 : "Unknown") + " bps\n      New BW estimate: " + (0 | e3.getBwEstimate()) + " bps\n      Switching to level " + k2 + " @ " + (0 | _2) + " bps"), i4.trigger(S.FRAG_LOAD_EMERGENCY_ABORTED, { frag: t5, part: r3, stats: o2 });
                        }
                      }
                    }
                  }
                }
              }
            }, this.hls = t4, this.bwEstimator = this.initEstimator(), this.registerListeners();
          }
          var e2 = t3.prototype;
          return e2.resetEstimator = function(t4) {
            t4 && (w.log("setting initial bwe to " + t4), this.hls.config.abrEwmaDefaultEstimate = t4), this.firstSelection = -1, this.bwEstimator = this.initEstimator();
          }, e2.initEstimator = function() {
            var t4 = this.hls.config;
            return new Or(t4.abrEwmaSlowVoD, t4.abrEwmaFastVoD, t4.abrEwmaDefaultEstimate);
          }, e2.registerListeners = function() {
            var t4 = this.hls;
            t4.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(S.FRAG_LOADING, this.onFragLoading, this), t4.on(S.FRAG_LOADED, this.onFragLoaded, this), t4.on(S.FRAG_BUFFERED, this.onFragBuffered, this), t4.on(S.LEVEL_SWITCHING, this.onLevelSwitching, this), t4.on(S.LEVEL_LOADED, this.onLevelLoaded, this), t4.on(S.LEVELS_UPDATED, this.onLevelsUpdated, this), t4.on(S.MAX_AUTO_LEVEL_UPDATED, this.onMaxAutoLevelUpdated, this), t4.on(S.ERROR, this.onError, this);
          }, e2.unregisterListeners = function() {
            var t4 = this.hls;
            t4 && (t4.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(S.FRAG_LOADING, this.onFragLoading, this), t4.off(S.FRAG_LOADED, this.onFragLoaded, this), t4.off(S.FRAG_BUFFERED, this.onFragBuffered, this), t4.off(S.LEVEL_SWITCHING, this.onLevelSwitching, this), t4.off(S.LEVEL_LOADED, this.onLevelLoaded, this), t4.off(S.LEVELS_UPDATED, this.onLevelsUpdated, this), t4.off(S.MAX_AUTO_LEVEL_UPDATED, this.onMaxAutoLevelUpdated, this), t4.off(S.ERROR, this.onError, this));
          }, e2.destroy = function() {
            this.unregisterListeners(), this.clearTimer(), this.hls = this._abandonRulesCheck = null, this.fragCurrent = this.partCurrent = null;
          }, e2.onManifestLoading = function(t4, e3) {
            this.lastLoadedFragLevel = -1, this.firstSelection = -1, this.lastLevelLoadSec = 0, this.fragCurrent = this.partCurrent = null, this.onLevelsUpdated(), this.clearTimer();
          }, e2.onLevelsUpdated = function() {
            this.lastLoadedFragLevel > -1 && this.fragCurrent && (this.lastLoadedFragLevel = this.fragCurrent.level), this._nextAutoLevel = -1, this.onMaxAutoLevelUpdated(), this.codecTiers = null, this.audioTracksByGroup = null;
          }, e2.onMaxAutoLevelUpdated = function() {
            this.firstSelection = -1, this.nextAutoLevelKey = "";
          }, e2.onFragLoading = function(t4, e3) {
            var r3, i4 = e3.frag;
            this.ignoreFragment(i4) || (i4.bitrateTest || (this.fragCurrent = i4, this.partCurrent = null != (r3 = e3.part) ? r3 : null), this.clearTimer(), this.timer = self.setInterval(this._abandonRulesCheck, 100));
          }, e2.onLevelSwitching = function(t4, e3) {
            this.clearTimer();
          }, e2.onError = function(t4, e3) {
            if (!e3.fatal) switch (e3.details) {
              case A.BUFFER_ADD_CODEC_ERROR:
              case A.BUFFER_APPEND_ERROR:
                this.lastLoadedFragLevel = -1, this.firstSelection = -1;
                break;
              case A.FRAG_LOAD_TIMEOUT:
                var r3 = e3.frag, i4 = this.fragCurrent, n2 = this.partCurrent;
                if (r3 && i4 && r3.sn === i4.sn && r3.level === i4.level) {
                  var a2 = performance.now(), s3 = n2 ? n2.stats : r3.stats, o2 = a2 - s3.loading.start, l2 = s3.loading.first ? s3.loading.first - s3.loading.start : -1;
                  if (s3.loaded && l2 > -1) {
                    var u2 = this.bwEstimator.getEstimateTTFB();
                    this.bwEstimator.sample(o2 - Math.min(u2, l2), s3.loaded);
                  } else this.bwEstimator.sampleTTFB(o2);
                }
            }
          }, e2.getTimeToLoadFrag = function(t4, e3, r3, i4) {
            return t4 + r3 / e3 + (i4 ? this.lastLevelLoadSec : 0);
          }, e2.onLevelLoaded = function(t4, e3) {
            var r3 = this.hls.config, i4 = e3.stats.loading, n2 = i4.end - i4.start;
            y(n2) && (this.lastLevelLoadSec = n2 / 1e3), e3.details.live ? this.bwEstimator.update(r3.abrEwmaSlowLive, r3.abrEwmaFastLive) : this.bwEstimator.update(r3.abrEwmaSlowVoD, r3.abrEwmaFastVoD);
          }, e2.onFragLoaded = function(t4, e3) {
            var r3 = e3.frag, i4 = e3.part, n2 = i4 ? i4.stats : r3.stats;
            if (r3.type === Fe && this.bwEstimator.sampleTTFB(n2.loading.first - n2.loading.start), !this.ignoreFragment(r3)) {
              if (this.clearTimer(), r3.level === this._nextAutoLevel && (this._nextAutoLevel = -1), this.firstSelection = -1, this.hls.config.abrMaxWithRealBitrate) {
                var a2 = i4 ? i4.duration : r3.duration, s3 = this.hls.levels[r3.level], o2 = (s3.loaded ? s3.loaded.bytes : 0) + n2.loaded, l2 = (s3.loaded ? s3.loaded.duration : 0) + a2;
                s3.loaded = { bytes: o2, duration: l2 }, s3.realBitrate = Math.round(8 * o2 / l2);
              }
              if (r3.bitrateTest) {
                var u2 = { stats: n2, frag: r3, part: i4, id: r3.type };
                this.onFragBuffered(S.FRAG_BUFFERED, u2), r3.bitrateTest = false;
              } else this.lastLoadedFragLevel = r3.level;
            }
          }, e2.onFragBuffered = function(t4, e3) {
            var r3 = e3.frag, i4 = e3.part, n2 = null != i4 && i4.stats.loaded ? i4.stats : r3.stats;
            if (!n2.aborted && !this.ignoreFragment(r3)) {
              var a2 = n2.parsing.end - n2.loading.start - Math.min(n2.loading.first - n2.loading.start, this.bwEstimator.getEstimateTTFB());
              this.bwEstimator.sample(a2, n2.loaded), n2.bwEstimate = this.getBwEstimate(), r3.bitrateTest ? this.bitrateTestDelay = a2 / 1e3 : this.bitrateTestDelay = 0;
            }
          }, e2.ignoreFragment = function(t4) {
            return t4.type !== Fe || "initSegment" === t4.sn;
          }, e2.clearTimer = function() {
            this.timer > -1 && (self.clearInterval(this.timer), this.timer = -1);
          }, e2.getAutoLevelKey = function() {
            return this.getBwEstimate() + "_" + this.getStarvationDelay().toFixed(2);
          }, e2.getNextABRAutoLevel = function() {
            var t4 = this.fragCurrent, e3 = this.partCurrent, r3 = this.hls, i4 = r3.maxAutoLevel, n2 = r3.config, a2 = r3.minAutoLevel, s3 = e3 ? e3.duration : t4 ? t4.duration : 0, o2 = this.getBwEstimate(), l2 = this.getStarvationDelay(), u2 = n2.abrBandWidthFactor, h2 = n2.abrBandWidthUpFactor;
            if (l2) {
              var d2 = this.findBestLevel(o2, a2, i4, l2, 0, u2, h2);
              if (d2 >= 0) return d2;
            }
            var c2 = s3 ? Math.min(s3, n2.maxStarvationDelay) : n2.maxStarvationDelay;
            if (!l2) {
              var f3 = this.bitrateTestDelay;
              f3 && (c2 = (s3 ? Math.min(s3, n2.maxLoadingDelay) : n2.maxLoadingDelay) - f3, w.info("[abr] bitrate test took " + Math.round(1e3 * f3) + "ms, set first fragment max fetchDuration to " + Math.round(1e3 * c2) + " ms"), u2 = h2 = 1);
            }
            var g2 = this.findBestLevel(o2, a2, i4, l2, c2, u2, h2);
            if (w.info("[abr] " + (l2 ? "rebuffering expected" : "buffer is empty") + ", optimal quality level " + g2), g2 > -1) return g2;
            var v2 = r3.levels[a2], m2 = r3.levels[r3.loadLevel];
            return (null == v2 ? void 0 : v2.bitrate) < (null == m2 ? void 0 : m2.bitrate) ? a2 : r3.loadLevel;
          }, e2.getStarvationDelay = function() {
            var t4 = this.hls, e3 = t4.media;
            if (!e3) return 1 / 0;
            var r3 = e3 && 0 !== e3.playbackRate ? Math.abs(e3.playbackRate) : 1, i4 = t4.mainForwardBufferInfo;
            return (i4 ? i4.len : 0) / r3;
          }, e2.getBwEstimate = function() {
            return this.bwEstimator.canEstimate() ? this.bwEstimator.getEstimate() : this.hls.config.abrEwmaDefaultEstimate;
          }, e2.findBestLevel = function(t4, e3, r3, i4, n2, a2, s3) {
            var o2, l2 = this, u2 = i4 + n2, h2 = this.lastLoadedFragLevel, d2 = -1 === h2 ? this.hls.firstLevel : h2, c2 = this.fragCurrent, f3 = this.partCurrent, g2 = this.hls, v2 = g2.levels, m2 = g2.allAudioTracks, p2 = g2.loadLevel, E2 = g2.config;
            if (1 === v2.length) return 0;
            var T2, S2 = v2[d2], L2 = !(null == S2 || null == (o2 = S2.details) || !o2.live), A2 = -1 === p2 || -1 === h2, R2 = "SDR", b2 = (null == S2 ? void 0 : S2.frameRate) || 0, k2 = E2.audioPreference, D2 = E2.videoPreference, I2 = this.audioTracksByGroup || (this.audioTracksByGroup = function(t5) {
              return t5.reduce(function(t6, e4) {
                var r4 = t6.groups[e4.groupId];
                r4 || (r4 = t6.groups[e4.groupId] = { tracks: [], channels: { 2: 0 }, hasDefault: false, hasAutoSelect: false }), r4.tracks.push(e4);
                var i5 = e4.channels || "2";
                return r4.channels[i5] = (r4.channels[i5] || 0) + 1, r4.hasDefault = r4.hasDefault || e4.default, r4.hasAutoSelect = r4.hasAutoSelect || e4.autoselect, r4.hasDefault && (t6.hasDefaultAudio = true), r4.hasAutoSelect && (t6.hasAutoSelectAudio = true), t6;
              }, { hasDefaultAudio: false, hasAutoSelectAudio: false, groups: {} });
            }(m2));
            if (A2) {
              if (-1 !== this.firstSelection) return this.firstSelection;
              var C2 = this.codecTiers || (this.codecTiers = function(t5, e4, r4, i5) {
                return t5.slice(r4, i5 + 1).reduce(function(t6, r5) {
                  if (!r5.codecSet) return t6;
                  var i6 = r5.audioGroups, n3 = t6[r5.codecSet];
                  n3 || (t6[r5.codecSet] = n3 = { minBitrate: 1 / 0, minHeight: 1 / 0, minFramerate: 1 / 0, maxScore: 0, videoRanges: { SDR: 0 }, channels: { 2: 0 }, hasDefaultAudio: !i6, fragmentError: 0 }), n3.minBitrate = Math.min(n3.minBitrate, r5.bitrate);
                  var a3 = Math.min(r5.height, r5.width);
                  return n3.minHeight = Math.min(n3.minHeight, a3), n3.minFramerate = Math.min(n3.minFramerate, r5.frameRate), n3.maxScore = Math.max(n3.maxScore, r5.score), n3.fragmentError += r5.fragmentError, n3.videoRanges[r5.videoRange] = (n3.videoRanges[r5.videoRange] || 0) + 1, i6 && i6.forEach(function(t7) {
                    if (t7) {
                      var r6 = e4.groups[t7];
                      r6 && (n3.hasDefaultAudio = n3.hasDefaultAudio || e4.hasDefaultAudio ? r6.hasDefault : r6.hasAutoSelect || !e4.hasDefaultAudio && !e4.hasAutoSelectAudio, Object.keys(r6.channels).forEach(function(t8) {
                        n3.channels[t8] = (n3.channels[t8] || 0) + r6.channels[t8];
                      }));
                    }
                  }), t6;
                }, {});
              }(v2, I2, e3, r3)), _2 = function(t5, e4, r4, i5, n3) {
                for (var a3 = Object.keys(t5), s4 = null == i5 ? void 0 : i5.channels, o3 = null == i5 ? void 0 : i5.audioCodec, l3 = s4 && 2 === parseInt(s4), u3 = true, h3 = false, d3 = 1 / 0, c3 = 1 / 0, f4 = 1 / 0, g3 = 0, v3 = [], m3 = Gr(e4, n3), p3 = m3.preferHDR, E3 = m3.allowedVideoRanges, T3 = function() {
                  var e5 = t5[a3[S3]];
                  u3 = e5.channels[2] > 0, d3 = Math.min(d3, e5.minHeight), c3 = Math.min(c3, e5.minFramerate), f4 = Math.min(f4, e5.minBitrate);
                  var r5 = E3.filter(function(t6) {
                    return e5.videoRanges[t6] > 0;
                  });
                  r5.length > 0 && (h3 = true, v3 = r5);
                }, S3 = a3.length; S3--; ) T3();
                d3 = y(d3) ? d3 : 0, c3 = y(c3) ? c3 : 0;
                var L3 = Math.max(1080, d3), A3 = Math.max(30, c3);
                return f4 = y(f4) ? f4 : r4, r4 = Math.max(f4, r4), h3 || (e4 = void 0, v3 = []), { codecSet: a3.reduce(function(e5, i6) {
                  var n4 = t5[i6];
                  if (i6 === e5) return e5;
                  if (n4.minBitrate > r4) return Kr(i6, "min bitrate of " + n4.minBitrate + " > current estimate of " + r4), e5;
                  if (!n4.hasDefaultAudio) return Kr(i6, "no renditions with default or auto-select sound found"), e5;
                  if (o3 && i6.indexOf(o3.substring(0, 4)) % 5 != 0) return Kr(i6, 'audio codec preference "' + o3 + '" not found'), e5;
                  if (s4 && !l3) {
                    if (!n4.channels[s4]) return Kr(i6, "no renditions with " + s4 + " channel sound found (channels options: " + Object.keys(n4.channels) + ")"), e5;
                  } else if ((!o3 || l3) && u3 && 0 === n4.channels[2]) return Kr(i6, "no renditions with stereo sound found"), e5;
                  return n4.minHeight > L3 ? (Kr(i6, "min resolution of " + n4.minHeight + " > maximum of " + L3), e5) : n4.minFramerate > A3 ? (Kr(i6, "min framerate of " + n4.minFramerate + " > maximum of " + A3), e5) : v3.some(function(t6) {
                    return n4.videoRanges[t6] > 0;
                  }) ? n4.maxScore < g3 ? (Kr(i6, "max score of " + n4.maxScore + " < selected max of " + g3), e5) : e5 && (ce(i6) >= ce(e5) || n4.fragmentError > t5[e5].fragmentError) ? e5 : (g3 = n4.maxScore, i6) : (Kr(i6, "no variants with VIDEO-RANGE of " + JSON.stringify(v3) + " found"), e5);
                }, void 0), videoRanges: v3, preferHDR: p3, minFramerate: c3, minBitrate: f4 };
              }(C2, R2, t4, k2, D2), x2 = _2.codecSet, P2 = _2.videoRanges, F2 = _2.minFramerate, M2 = _2.minBitrate, O2 = _2.preferHDR;
              T2 = x2, R2 = O2 ? P2[P2.length - 1] : P2[0], b2 = F2, t4 = Math.max(t4, M2), w.log("[abr] picked start tier " + JSON.stringify(_2));
            } else T2 = null == S2 ? void 0 : S2.codecSet, R2 = null == S2 ? void 0 : S2.videoRange;
            for (var N2, U2 = f3 ? f3.duration : c2 ? c2.duration : 0, B2 = this.bwEstimator.getEstimateTTFB() / 1e3, G2 = [], K3 = function() {
              var e4, o3 = v2[H2], c3 = H2 > d2;
              if (!o3) return 0;
              if (E2.useMediaCapabilities && !o3.supportedResult && !o3.supportedPromise) {
                var g3 = navigator.mediaCapabilities;
                "function" == typeof (null == g3 ? void 0 : g3.decodingInfo) && function(t5, e5, r4, i5, n3, a3) {
                  var s4 = t5.audioCodec ? t5.audioGroups : null, o4 = null == a3 ? void 0 : a3.audioCodec, l3 = null == a3 ? void 0 : a3.channels, u3 = l3 ? parseInt(l3) : o4 ? 1 / 0 : 2, h3 = null;
                  if (null != s4 && s4.length) try {
                    h3 = 1 === s4.length && s4[0] ? e5.groups[s4[0]].channels : s4.reduce(function(t6, r5) {
                      if (r5) {
                        var i6 = e5.groups[r5];
                        if (!i6) throw new Error("Audio track group " + r5 + " not found");
                        Object.keys(i6.channels).forEach(function(e6) {
                          t6[e6] = (t6[e6] || 0) + i6.channels[e6];
                        });
                      }
                      return t6;
                    }, { 2: 0 });
                  } catch (t6) {
                    return true;
                  }
                  return void 0 !== t5.videoCodec && (t5.width > 1920 && t5.height > 1088 || t5.height > 1920 && t5.width > 1088 || t5.frameRate > Math.max(i5, 30) || "SDR" !== t5.videoRange && t5.videoRange !== r4 || t5.bitrate > Math.max(n3, 8e6)) || !!h3 && y(u3) && Object.keys(h3).some(function(t6) {
                    return parseInt(t6) > u3;
                  });
                }(o3, I2, R2, b2, t4, k2) ? (o3.supportedPromise = Br(o3, I2, g3), o3.supportedPromise.then(function(t5) {
                  if (l2.hls) {
                    o3.supportedResult = t5;
                    var e5 = l2.hls.levels, r4 = e5.indexOf(o3);
                    t5.error ? w.warn('[abr] MediaCapabilities decodingInfo error: "' + t5.error + '" for level ' + r4 + " " + JSON.stringify(t5)) : t5.supported || (w.warn("[abr] Unsupported MediaCapabilities decodingInfo result for level " + r4 + " " + JSON.stringify(t5)), r4 > -1 && e5.length > 1 && (w.log("[abr] Removing unsupported level " + r4), l2.hls.removeLevel(r4)));
                  }
                })) : o3.supportedResult = Nr;
              }
              if (T2 && o3.codecSet !== T2 || R2 && o3.videoRange !== R2 || c3 && b2 > o3.frameRate || !c3 && b2 > 0 && b2 < o3.frameRate || o3.supportedResult && (null == (e4 = o3.supportedResult.decodingInfoResults) || !e4[0].smooth)) return G2.push(H2), 0;
              var m3, D3 = o3.details, C3 = (f3 ? null == D3 ? void 0 : D3.partTarget : null == D3 ? void 0 : D3.averagetargetduration) || U2;
              m3 = c3 ? s3 * t4 : a2 * t4;
              var _3 = U2 && i4 >= 2 * U2 && 0 === n2 ? v2[H2].averageBitrate : v2[H2].maxBitrate, x3 = l2.getTimeToLoadFrag(B2, m3, _3 * C3, void 0 === D3);
              if (m3 >= _3 && (H2 === h2 || 0 === o3.loadError && 0 === o3.fragmentError) && (x3 <= B2 || !y(x3) || L2 && !l2.bitrateTestDelay || x3 < u2)) {
                var P3 = l2.forcedAutoLevel;
                return H2 === p2 || -1 !== P3 && P3 === p2 || (G2.length && w.trace("[abr] Skipped level(s) " + G2.join(",") + " of " + r3 + ' max with CODECS and VIDEO-RANGE:"' + v2[G2[0]].codecs + '" ' + v2[G2[0]].videoRange + '; not compatible with "' + S2.codecs + '" ' + R2), w.info("[abr] switch candidate:" + d2 + "->" + H2 + " adjustedbw(" + Math.round(m3) + ")-bitrate=" + Math.round(m3 - _3) + " ttfb:" + B2.toFixed(1) + " avgDuration:" + C3.toFixed(1) + " maxFetchDuration:" + u2.toFixed(1) + " fetchDuration:" + x3.toFixed(1) + " firstSelection:" + A2 + " codecSet:" + T2 + " videoRange:" + R2 + " hls.loadLevel:" + p2)), A2 && (l2.firstSelection = H2), { v: H2 };
              }
            }, H2 = r3; H2 >= e3; H2--) if (0 !== (N2 = K3()) && N2) return N2.v;
            return -1;
          }, s2(t3, [{ key: "firstAutoLevel", get: function() {
            var t4 = this.hls, e3 = t4.maxAutoLevel, r3 = t4.minAutoLevel, i4 = this.getBwEstimate(), n2 = this.hls.config.maxStarvationDelay, a2 = this.findBestLevel(i4, r3, e3, 0, n2, 1, 1);
            if (a2 > -1) return a2;
            var s3 = this.hls.firstLevel, o2 = Math.min(Math.max(s3, r3), e3);
            return w.warn("[abr] Could not find best starting auto level. Defaulting to first in playlist " + s3 + " clamped to " + o2), o2;
          } }, { key: "forcedAutoLevel", get: function() {
            return this.nextAutoLevelKey ? -1 : this._nextAutoLevel;
          } }, { key: "nextAutoLevel", get: function() {
            var t4 = this.forcedAutoLevel, e3 = this.bwEstimator.canEstimate(), r3 = this.lastLoadedFragLevel > -1;
            if (!(-1 === t4 || e3 && r3 && this.nextAutoLevelKey !== this.getAutoLevelKey())) return t4;
            var i4 = e3 && r3 ? this.getNextABRAutoLevel() : this.firstAutoLevel;
            if (-1 !== t4) {
              var n2 = this.hls.levels;
              if (n2.length > Math.max(t4, i4) && n2[t4].loadError <= n2[i4].loadError) return t4;
            }
            return this._nextAutoLevel = i4, this.nextAutoLevelKey = this.getAutoLevelKey(), i4;
          }, set: function(t4) {
            var e3 = this.hls, r3 = e3.maxAutoLevel, i4 = e3.minAutoLevel, n2 = Math.min(Math.max(t4, i4), r3);
            this._nextAutoLevel !== n2 && (this.nextAutoLevelKey = "", this._nextAutoLevel = n2);
          } }]), t3;
        }(), qr = function() {
          function t3() {
            this._boundTick = void 0, this._tickTimer = null, this._tickInterval = null, this._tickCallCount = 0, this._boundTick = this.tick.bind(this);
          }
          var e2 = t3.prototype;
          return e2.destroy = function() {
            this.onHandlerDestroying(), this.onHandlerDestroyed();
          }, e2.onHandlerDestroying = function() {
            this.clearNextTick(), this.clearInterval();
          }, e2.onHandlerDestroyed = function() {
          }, e2.hasInterval = function() {
            return !!this._tickInterval;
          }, e2.hasNextTick = function() {
            return !!this._tickTimer;
          }, e2.setInterval = function(t4) {
            return !this._tickInterval && (this._tickCallCount = 0, this._tickInterval = self.setInterval(this._boundTick, t4), true);
          }, e2.clearInterval = function() {
            return !!this._tickInterval && (self.clearInterval(this._tickInterval), this._tickInterval = null, true);
          }, e2.clearNextTick = function() {
            return !!this._tickTimer && (self.clearTimeout(this._tickTimer), this._tickTimer = null, true);
          }, e2.tick = function() {
            this._tickCallCount++, 1 === this._tickCallCount && (this.doTick(), this._tickCallCount > 1 && this.tickImmediate(), this._tickCallCount = 0);
          }, e2.tickImmediate = function() {
            this.clearNextTick(), this._tickTimer = self.setTimeout(this._boundTick, 0);
          }, e2.doTick = function() {
          }, t3;
        }(), Xr = "NOT_LOADED", zr = "APPENDING", Qr = "PARTIAL", Jr = "OK", $r = function() {
          function t3(t4) {
            this.activePartLists = /* @__PURE__ */ Object.create(null), this.endListFragments = /* @__PURE__ */ Object.create(null), this.fragments = /* @__PURE__ */ Object.create(null), this.timeRanges = /* @__PURE__ */ Object.create(null), this.bufferPadding = 0.2, this.hls = void 0, this.hasGaps = false, this.hls = t4, this._registerListeners();
          }
          var e2 = t3.prototype;
          return e2._registerListeners = function() {
            var t4 = this.hls;
            t4.on(S.BUFFER_APPENDED, this.onBufferAppended, this), t4.on(S.FRAG_BUFFERED, this.onFragBuffered, this), t4.on(S.FRAG_LOADED, this.onFragLoaded, this);
          }, e2._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(S.BUFFER_APPENDED, this.onBufferAppended, this), t4.off(S.FRAG_BUFFERED, this.onFragBuffered, this), t4.off(S.FRAG_LOADED, this.onFragLoaded, this);
          }, e2.destroy = function() {
            this._unregisterListeners(), this.fragments = this.activePartLists = this.endListFragments = this.timeRanges = null;
          }, e2.getAppendedFrag = function(t4, e3) {
            var r3 = this.activePartLists[e3];
            if (r3) for (var i4 = r3.length; i4--; ) {
              var n2 = r3[i4];
              if (!n2) break;
              var a2 = n2.end;
              if (n2.start <= t4 && null !== a2 && t4 <= a2) return n2;
            }
            return this.getBufferedFrag(t4, e3);
          }, e2.getBufferedFrag = function(t4, e3) {
            for (var r3 = this.fragments, i4 = Object.keys(r3), n2 = i4.length; n2--; ) {
              var a2 = r3[i4[n2]];
              if ((null == a2 ? void 0 : a2.body.type) === e3 && a2.buffered) {
                var s3 = a2.body;
                if (s3.start <= t4 && t4 <= s3.end) return s3;
              }
            }
            return null;
          }, e2.detectEvictedFragments = function(t4, e3, r3, i4) {
            var n2 = this;
            this.timeRanges && (this.timeRanges[t4] = e3);
            var a2 = (null == i4 ? void 0 : i4.fragment.sn) || -1;
            Object.keys(this.fragments).forEach(function(i5) {
              var s3 = n2.fragments[i5];
              if (s3 && !(a2 >= s3.body.sn)) if (s3.buffered || s3.loaded) {
                var o2 = s3.range[t4];
                o2 && o2.time.some(function(t5) {
                  var r4 = !n2.isTimeBuffered(t5.startPTS, t5.endPTS, e3);
                  return r4 && n2.removeFragment(s3.body), r4;
                });
              } else s3.body.type === r3 && n2.removeFragment(s3.body);
            });
          }, e2.detectPartialFragments = function(t4) {
            var e3 = this, r3 = this.timeRanges, i4 = t4.frag, n2 = t4.part;
            if (r3 && "initSegment" !== i4.sn) {
              var a2 = ti(i4), s3 = this.fragments[a2];
              if (!(!s3 || s3.buffered && i4.gap)) {
                var o2 = !i4.relurl;
                Object.keys(r3).forEach(function(t5) {
                  var a3 = i4.elementaryStreams[t5];
                  if (a3) {
                    var l2 = r3[t5], u2 = o2 || true === a3.partial;
                    s3.range[t5] = e3.getBufferedTimes(i4, n2, u2, l2);
                  }
                }), s3.loaded = null, Object.keys(s3.range).length ? (s3.buffered = true, (s3.body.endList = i4.endList || s3.body.endList) && (this.endListFragments[s3.body.type] = s3), Zr(s3) || this.removeParts(i4.sn - 1, i4.type)) : this.removeFragment(s3.body);
              }
            }
          }, e2.removeParts = function(t4, e3) {
            var r3 = this.activePartLists[e3];
            r3 && (this.activePartLists[e3] = r3.filter(function(e4) {
              return e4.fragment.sn >= t4;
            }));
          }, e2.fragBuffered = function(t4, e3) {
            var r3 = ti(t4), i4 = this.fragments[r3];
            !i4 && e3 && (i4 = this.fragments[r3] = { body: t4, appendedPTS: null, loaded: null, buffered: false, range: /* @__PURE__ */ Object.create(null) }, t4.gap && (this.hasGaps = true)), i4 && (i4.loaded = null, i4.buffered = true);
          }, e2.getBufferedTimes = function(t4, e3, r3, i4) {
            for (var n2 = { time: [], partial: r3 }, a2 = t4.start, s3 = t4.end, o2 = t4.minEndPTS || s3, l2 = t4.maxStartPTS || a2, u2 = 0; u2 < i4.length; u2++) {
              var h2 = i4.start(u2) - this.bufferPadding, d2 = i4.end(u2) + this.bufferPadding;
              if (l2 >= h2 && o2 <= d2) {
                n2.time.push({ startPTS: Math.max(a2, i4.start(u2)), endPTS: Math.min(s3, i4.end(u2)) });
                break;
              }
              if (a2 < d2 && s3 > h2) {
                var c2 = Math.max(a2, i4.start(u2)), f3 = Math.min(s3, i4.end(u2));
                f3 > c2 && (n2.partial = true, n2.time.push({ startPTS: c2, endPTS: f3 }));
              } else if (s3 <= h2) break;
            }
            return n2;
          }, e2.getPartialFragment = function(t4) {
            var e3, r3, i4, n2 = null, a2 = 0, s3 = this.bufferPadding, o2 = this.fragments;
            return Object.keys(o2).forEach(function(l2) {
              var u2 = o2[l2];
              u2 && Zr(u2) && (r3 = u2.body.start - s3, i4 = u2.body.end + s3, t4 >= r3 && t4 <= i4 && (e3 = Math.min(t4 - r3, i4 - t4), a2 <= e3 && (n2 = u2.body, a2 = e3)));
            }), n2;
          }, e2.isEndListAppended = function(t4) {
            var e3 = this.endListFragments[t4];
            return void 0 !== e3 && (e3.buffered || Zr(e3));
          }, e2.getState = function(t4) {
            var e3 = ti(t4), r3 = this.fragments[e3];
            return r3 ? r3.buffered ? Zr(r3) ? Qr : Jr : zr : Xr;
          }, e2.isTimeBuffered = function(t4, e3, r3) {
            for (var i4, n2, a2 = 0; a2 < r3.length; a2++) {
              if (i4 = r3.start(a2) - this.bufferPadding, n2 = r3.end(a2) + this.bufferPadding, t4 >= i4 && e3 <= n2) return true;
              if (e3 <= i4) return false;
            }
            return false;
          }, e2.onFragLoaded = function(t4, e3) {
            var r3 = e3.frag, i4 = e3.part;
            if ("initSegment" !== r3.sn && !r3.bitrateTest) {
              var n2 = i4 ? null : e3, a2 = ti(r3);
              this.fragments[a2] = { body: r3, appendedPTS: null, loaded: n2, buffered: false, range: /* @__PURE__ */ Object.create(null) };
            }
          }, e2.onBufferAppended = function(t4, e3) {
            var r3 = this, i4 = e3.frag, n2 = e3.part, a2 = e3.timeRanges;
            if ("initSegment" !== i4.sn) {
              var s3 = i4.type;
              if (n2) {
                var o2 = this.activePartLists[s3];
                o2 || (this.activePartLists[s3] = o2 = []), o2.push(n2);
              }
              this.timeRanges = a2, Object.keys(a2).forEach(function(t5) {
                var e4 = a2[t5];
                r3.detectEvictedFragments(t5, e4, s3, n2);
              });
            }
          }, e2.onFragBuffered = function(t4, e3) {
            this.detectPartialFragments(e3);
          }, e2.hasFragment = function(t4) {
            var e3 = ti(t4);
            return !!this.fragments[e3];
          }, e2.hasParts = function(t4) {
            var e3;
            return !(null == (e3 = this.activePartLists[t4]) || !e3.length);
          }, e2.removeFragmentsInRange = function(t4, e3, r3, i4, n2) {
            var a2 = this;
            i4 && !this.hasGaps || Object.keys(this.fragments).forEach(function(s3) {
              var o2 = a2.fragments[s3];
              if (o2) {
                var l2 = o2.body;
                l2.type !== r3 || i4 && !l2.gap || l2.start < e3 && l2.end > t4 && (o2.buffered || n2) && a2.removeFragment(l2);
              }
            });
          }, e2.removeFragment = function(t4) {
            var e3 = ti(t4);
            t4.stats.loaded = 0, t4.clearElementaryStreamInfo();
            var r3 = this.activePartLists[t4.type];
            if (r3) {
              var i4 = t4.sn;
              this.activePartLists[t4.type] = r3.filter(function(t5) {
                return t5.fragment.sn !== i4;
              });
            }
            delete this.fragments[e3], t4.endList && delete this.endListFragments[t4.type];
          }, e2.removeAllFragments = function() {
            this.fragments = /* @__PURE__ */ Object.create(null), this.endListFragments = /* @__PURE__ */ Object.create(null), this.activePartLists = /* @__PURE__ */ Object.create(null), this.hasGaps = false;
          }, t3;
        }();
        function Zr(t3) {
          var e2, r3, i4;
          return t3.buffered && (t3.body.gap || (null == (e2 = t3.range.video) ? void 0 : e2.partial) || (null == (r3 = t3.range.audio) ? void 0 : r3.partial) || (null == (i4 = t3.range.audiovideo) ? void 0 : i4.partial));
        }
        function ti(t3) {
          return t3.type + "_" + t3.level + "_" + t3.sn;
        }
        var ei = { length: 0, start: function() {
          return 0;
        }, end: function() {
          return 0;
        } }, ri = function() {
          function t3() {
          }
          return t3.isBuffered = function(e2, r3) {
            try {
              if (e2) {
                for (var i4 = t3.getBuffered(e2), n2 = 0; n2 < i4.length; n2++) if (r3 >= i4.start(n2) && r3 <= i4.end(n2)) return true;
              }
            } catch (t4) {
            }
            return false;
          }, t3.bufferInfo = function(e2, r3, i4) {
            try {
              if (e2) {
                var n2, a2 = t3.getBuffered(e2), s3 = [];
                for (n2 = 0; n2 < a2.length; n2++) s3.push({ start: a2.start(n2), end: a2.end(n2) });
                return this.bufferedInfo(s3, r3, i4);
              }
            } catch (t4) {
            }
            return { len: 0, start: r3, end: r3, nextStart: void 0 };
          }, t3.bufferedInfo = function(t4, e2, r3) {
            e2 = Math.max(0, e2), t4.sort(function(t5, e3) {
              var r4 = t5.start - e3.start;
              return r4 || e3.end - t5.end;
            });
            var i4 = [];
            if (r3) for (var n2 = 0; n2 < t4.length; n2++) {
              var a2 = i4.length;
              if (a2) {
                var s3 = i4[a2 - 1].end;
                t4[n2].start - s3 < r3 ? t4[n2].end > s3 && (i4[a2 - 1].end = t4[n2].end) : i4.push(t4[n2]);
              } else i4.push(t4[n2]);
            }
            else i4 = t4;
            for (var o2, l2 = 0, u2 = e2, h2 = e2, d2 = 0; d2 < i4.length; d2++) {
              var c2 = i4[d2].start, f3 = i4[d2].end;
              if (e2 + r3 >= c2 && e2 < f3) u2 = c2, l2 = (h2 = f3) - e2;
              else if (e2 + r3 < c2) {
                o2 = c2;
                break;
              }
            }
            return { len: l2, start: u2 || 0, end: h2 || 0, nextStart: o2 };
          }, t3.getBuffered = function(t4) {
            try {
              return t4.buffered;
            } catch (t5) {
              return w.log("failed to get media.buffered", t5), ei;
            }
          }, t3;
        }(), ii = function(t3, e2, r3, i4, n2, a2) {
          void 0 === i4 && (i4 = 0), void 0 === n2 && (n2 = -1), void 0 === a2 && (a2 = false), this.level = void 0, this.sn = void 0, this.part = void 0, this.id = void 0, this.size = void 0, this.partial = void 0, this.transmuxing = { start: 0, executeStart: 0, executeEnd: 0, end: 0 }, this.buffering = { audio: { start: 0, executeStart: 0, executeEnd: 0, end: 0 }, video: { start: 0, executeStart: 0, executeEnd: 0, end: 0 }, audiovideo: { start: 0, executeStart: 0, executeEnd: 0, end: 0 } }, this.level = t3, this.sn = e2, this.id = r3, this.size = i4, this.part = n2, this.partial = a2;
        };
        function ni(t3, e2) {
          for (var r3 = 0, i4 = t3.length; r3 < i4; r3++) {
            var n2;
            if ((null == (n2 = t3[r3]) ? void 0 : n2.cc) === e2) return t3[r3];
          }
          return null;
        }
        function ai(t3, e2) {
          if (t3) {
            var r3 = t3.start + e2;
            t3.start = t3.startPTS = r3, t3.endPTS = r3 + t3.duration;
          }
        }
        function si(t3, e2) {
          for (var r3 = e2.fragments, i4 = 0, n2 = r3.length; i4 < n2; i4++) ai(r3[i4], t3);
          e2.fragmentHint && ai(e2.fragmentHint, t3), e2.alignedSliding = true;
        }
        function oi(t3, e2, r3) {
          e2 && (function(t4, e3, r4) {
            if (function(t5, e4, r5) {
              return !(!e4 || !(r5.endCC > r5.startCC || t5 && t5.cc < r5.startCC));
            }(t4, r4, e3)) {
              var i4 = function(t5, e4) {
                var r5 = t5.fragments, i5 = e4.fragments;
                if (i5.length && r5.length) {
                  var n2 = ni(r5, i5[0].cc);
                  if (n2 && (!n2 || n2.startPTS)) return n2;
                  w.log("No frag in previous level to align on");
                } else w.log("No fragments to align");
              }(r4, e3);
              i4 && y(i4.start) && (w.log("Adjusting PTS using last level due to CC increase within current level " + e3.url), si(i4.start, e3));
            }
          }(t3, r3, e2), !r3.alignedSliding && e2 && li(r3, e2), r3.alignedSliding || !e2 || r3.skippedSegments || cr(e2, r3));
        }
        function li(t3, e2) {
          if (t3.hasProgramDateTime && e2.hasProgramDateTime) {
            var r3 = t3.fragments, i4 = e2.fragments;
            if (r3.length && i4.length) {
              var n2, a2, s3 = Math.min(e2.endCC, t3.endCC);
              e2.startCC < s3 && t3.startCC < s3 && (n2 = ni(i4, s3), a2 = ni(r3, s3)), n2 && a2 || (a2 = ni(r3, (n2 = i4[Math.floor(i4.length / 2)]).cc) || r3[Math.floor(r3.length / 2)]);
              var o2 = n2.programDateTime, l2 = a2.programDateTime;
              o2 && l2 && si((l2 - o2) / 1e3 - (a2.start - n2.start), t3);
            }
          }
        }
        var ui2 = Math.pow(2, 17), hi = function() {
          function t3(t4) {
            this.config = void 0, this.loader = null, this.partLoadTimeout = -1, this.config = t4;
          }
          var e2 = t3.prototype;
          return e2.destroy = function() {
            this.loader && (this.loader.destroy(), this.loader = null);
          }, e2.abort = function() {
            this.loader && this.loader.abort();
          }, e2.load = function(t4, e3) {
            var r3 = this, n2 = t4.url;
            if (!n2) return Promise.reject(new fi({ type: L.NETWORK_ERROR, details: A.FRAG_LOAD_ERROR, fatal: false, frag: t4, error: new Error("Fragment does not have a " + (n2 ? "part list" : "url")), networkDetails: null }));
            this.abort();
            var a2 = this.config, s3 = a2.fLoader, o2 = a2.loader;
            return new Promise(function(l2, u2) {
              if (r3.loader && r3.loader.destroy(), t4.gap) {
                if (t4.tagList.some(function(t5) {
                  return "GAP" === t5[0];
                })) return void u2(ci(t4));
                t4.gap = false;
              }
              var h2 = r3.loader = t4.loader = s3 ? new s3(a2) : new o2(a2), d2 = di(t4), c2 = Tr(a2.fragLoadPolicy.default), f3 = { loadPolicy: c2, timeout: c2.maxLoadTimeMs, maxRetry: 0, retryDelay: 0, maxRetryDelay: 0, highWaterMark: "initSegment" === t4.sn ? 1 / 0 : ui2 };
              t4.stats = h2.stats, h2.load(d2, f3, { onSuccess: function(e4, i4, n3, a3) {
                r3.resetLoader(t4, h2);
                var s4 = e4.data;
                n3.resetIV && t4.decryptdata && (t4.decryptdata.iv = new Uint8Array(s4.slice(0, 16)), s4 = s4.slice(16)), l2({ frag: t4, part: null, payload: s4, networkDetails: a3 });
              }, onError: function(e4, a3, s4, o3) {
                r3.resetLoader(t4, h2), u2(new fi({ type: L.NETWORK_ERROR, details: A.FRAG_LOAD_ERROR, fatal: false, frag: t4, response: i3({ url: n2, data: void 0 }, e4), error: new Error("HTTP Error " + e4.code + " " + e4.text), networkDetails: s4, stats: o3 }));
              }, onAbort: function(e4, i4, n3) {
                r3.resetLoader(t4, h2), u2(new fi({ type: L.NETWORK_ERROR, details: A.INTERNAL_ABORTED, fatal: false, frag: t4, error: new Error("Aborted"), networkDetails: n3, stats: e4 }));
              }, onTimeout: function(e4, i4, n3) {
                r3.resetLoader(t4, h2), u2(new fi({ type: L.NETWORK_ERROR, details: A.FRAG_LOAD_TIMEOUT, fatal: false, frag: t4, error: new Error("Timeout after " + f3.timeout + "ms"), networkDetails: n3, stats: e4 }));
              }, onProgress: function(r4, i4, n3, a3) {
                e3 && e3({ frag: t4, part: null, payload: n3, networkDetails: a3 });
              } });
            });
          }, e2.loadPart = function(t4, e3, r3) {
            var n2 = this;
            this.abort();
            var a2 = this.config, s3 = a2.fLoader, o2 = a2.loader;
            return new Promise(function(l2, u2) {
              if (n2.loader && n2.loader.destroy(), t4.gap || e3.gap) u2(ci(t4, e3));
              else {
                var h2 = n2.loader = t4.loader = s3 ? new s3(a2) : new o2(a2), d2 = di(t4, e3), c2 = Tr(a2.fragLoadPolicy.default), f3 = { loadPolicy: c2, timeout: c2.maxLoadTimeMs, maxRetry: 0, retryDelay: 0, maxRetryDelay: 0, highWaterMark: ui2 };
                e3.stats = h2.stats, h2.load(d2, f3, { onSuccess: function(i4, a3, s4, o3) {
                  n2.resetLoader(t4, h2), n2.updateStatsFromPart(t4, e3);
                  var u3 = { frag: t4, part: e3, payload: i4.data, networkDetails: o3 };
                  r3(u3), l2(u3);
                }, onError: function(r4, a3, s4, o3) {
                  n2.resetLoader(t4, h2), u2(new fi({ type: L.NETWORK_ERROR, details: A.FRAG_LOAD_ERROR, fatal: false, frag: t4, part: e3, response: i3({ url: d2.url, data: void 0 }, r4), error: new Error("HTTP Error " + r4.code + " " + r4.text), networkDetails: s4, stats: o3 }));
                }, onAbort: function(r4, i4, a3) {
                  t4.stats.aborted = e3.stats.aborted, n2.resetLoader(t4, h2), u2(new fi({ type: L.NETWORK_ERROR, details: A.INTERNAL_ABORTED, fatal: false, frag: t4, part: e3, error: new Error("Aborted"), networkDetails: a3, stats: r4 }));
                }, onTimeout: function(r4, i4, a3) {
                  n2.resetLoader(t4, h2), u2(new fi({ type: L.NETWORK_ERROR, details: A.FRAG_LOAD_TIMEOUT, fatal: false, frag: t4, part: e3, error: new Error("Timeout after " + f3.timeout + "ms"), networkDetails: a3, stats: r4 }));
                } });
              }
            });
          }, e2.updateStatsFromPart = function(t4, e3) {
            var r3 = t4.stats, i4 = e3.stats, n2 = i4.total;
            if (r3.loaded += i4.loaded, n2) {
              var a2 = Math.round(t4.duration / e3.duration), s3 = Math.min(Math.round(r3.loaded / n2), a2), o2 = (a2 - s3) * Math.round(r3.loaded / s3);
              r3.total = r3.loaded + o2;
            } else r3.total = Math.max(r3.loaded, r3.total);
            var l2 = r3.loading, u2 = i4.loading;
            l2.start ? l2.first += u2.first - u2.start : (l2.start = u2.start, l2.first = u2.first), l2.end = u2.end;
          }, e2.resetLoader = function(t4, e3) {
            t4.loader = null, this.loader === e3 && (self.clearTimeout(this.partLoadTimeout), this.loader = null), e3.destroy();
          }, t3;
        }();
        function di(t3, e2) {
          void 0 === e2 && (e2 = null);
          var r3 = e2 || t3, i4 = { frag: t3, part: e2, responseType: "arraybuffer", url: r3.url, headers: {}, rangeStart: 0, rangeEnd: 0 }, n2 = r3.byteRangeStartOffset, a2 = r3.byteRangeEndOffset;
          if (y(n2) && y(a2)) {
            var s3, o2 = n2, l2 = a2;
            if ("initSegment" === t3.sn && "AES-128" === (null == (s3 = t3.decryptdata) ? void 0 : s3.method)) {
              var u2 = a2 - n2;
              u2 % 16 && (l2 = a2 + (16 - u2 % 16)), 0 !== n2 && (i4.resetIV = true, o2 = n2 - 16);
            }
            i4.rangeStart = o2, i4.rangeEnd = l2;
          }
          return i4;
        }
        function ci(t3, e2) {
          var r3 = new Error("GAP " + (t3.gap ? "tag" : "attribute") + " found"), i4 = { type: L.MEDIA_ERROR, details: A.FRAG_GAP, fatal: false, frag: t3, error: r3, networkDetails: null };
          return e2 && (i4.part = e2), (e2 || t3).stats.aborted = true, new fi(i4);
        }
        var fi = function(t3) {
          function e2(e3) {
            var r3;
            return (r3 = t3.call(this, e3.error.message) || this).data = void 0, r3.data = e3, r3;
          }
          return l(e2, t3), e2;
        }(c(Error)), gi = function() {
          function t3(t4, e2) {
            this.subtle = void 0, this.aesIV = void 0, this.subtle = t4, this.aesIV = e2;
          }
          return t3.prototype.decrypt = function(t4, e2) {
            return this.subtle.decrypt({ name: "AES-CBC", iv: this.aesIV }, e2, t4);
          }, t3;
        }(), vi = function() {
          function t3(t4, e2) {
            this.subtle = void 0, this.key = void 0, this.subtle = t4, this.key = e2;
          }
          return t3.prototype.expandKey = function() {
            return this.subtle.importKey("raw", this.key, { name: "AES-CBC" }, false, ["encrypt", "decrypt"]);
          }, t3;
        }(), mi = function() {
          function t3() {
            this.rcon = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], this.subMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)], this.invSubMix = [new Uint32Array(256), new Uint32Array(256), new Uint32Array(256), new Uint32Array(256)], this.sBox = new Uint32Array(256), this.invSBox = new Uint32Array(256), this.key = new Uint32Array(0), this.ksRows = 0, this.keySize = 0, this.keySchedule = void 0, this.invKeySchedule = void 0, this.initTable();
          }
          var e2 = t3.prototype;
          return e2.uint8ArrayToUint32Array_ = function(t4) {
            for (var e3 = new DataView(t4), r3 = new Uint32Array(4), i4 = 0; i4 < 4; i4++) r3[i4] = e3.getUint32(4 * i4);
            return r3;
          }, e2.initTable = function() {
            var t4 = this.sBox, e3 = this.invSBox, r3 = this.subMix, i4 = r3[0], n2 = r3[1], a2 = r3[2], s3 = r3[3], o2 = this.invSubMix, l2 = o2[0], u2 = o2[1], h2 = o2[2], d2 = o2[3], c2 = new Uint32Array(256), f3 = 0, g2 = 0, v2 = 0;
            for (v2 = 0; v2 < 256; v2++) c2[v2] = v2 < 128 ? v2 << 1 : v2 << 1 ^ 283;
            for (v2 = 0; v2 < 256; v2++) {
              var m2 = g2 ^ g2 << 1 ^ g2 << 2 ^ g2 << 3 ^ g2 << 4;
              m2 = m2 >>> 8 ^ 255 & m2 ^ 99, t4[f3] = m2, e3[m2] = f3;
              var p2 = c2[f3], y2 = c2[p2], E2 = c2[y2], T2 = 257 * c2[m2] ^ 16843008 * m2;
              i4[f3] = T2 << 24 | T2 >>> 8, n2[f3] = T2 << 16 | T2 >>> 16, a2[f3] = T2 << 8 | T2 >>> 24, s3[f3] = T2, T2 = 16843009 * E2 ^ 65537 * y2 ^ 257 * p2 ^ 16843008 * f3, l2[m2] = T2 << 24 | T2 >>> 8, u2[m2] = T2 << 16 | T2 >>> 16, h2[m2] = T2 << 8 | T2 >>> 24, d2[m2] = T2, f3 ? (f3 = p2 ^ c2[c2[c2[E2 ^ p2]]], g2 ^= c2[c2[g2]]) : f3 = g2 = 1;
            }
          }, e2.expandKey = function(t4) {
            for (var e3 = this.uint8ArrayToUint32Array_(t4), r3 = true, i4 = 0; i4 < e3.length && r3; ) r3 = e3[i4] === this.key[i4], i4++;
            if (!r3) {
              this.key = e3;
              var n2 = this.keySize = e3.length;
              if (4 !== n2 && 6 !== n2 && 8 !== n2) throw new Error("Invalid aes key size=" + n2);
              var a2, s3, o2, l2, u2 = this.ksRows = 4 * (n2 + 6 + 1), h2 = this.keySchedule = new Uint32Array(u2), d2 = this.invKeySchedule = new Uint32Array(u2), c2 = this.sBox, f3 = this.rcon, g2 = this.invSubMix, v2 = g2[0], m2 = g2[1], p2 = g2[2], y2 = g2[3];
              for (a2 = 0; a2 < u2; a2++) a2 < n2 ? o2 = h2[a2] = e3[a2] : (l2 = o2, a2 % n2 == 0 ? (l2 = c2[(l2 = l2 << 8 | l2 >>> 24) >>> 24] << 24 | c2[l2 >>> 16 & 255] << 16 | c2[l2 >>> 8 & 255] << 8 | c2[255 & l2], l2 ^= f3[a2 / n2 | 0] << 24) : n2 > 6 && a2 % n2 == 4 && (l2 = c2[l2 >>> 24] << 24 | c2[l2 >>> 16 & 255] << 16 | c2[l2 >>> 8 & 255] << 8 | c2[255 & l2]), h2[a2] = o2 = (h2[a2 - n2] ^ l2) >>> 0);
              for (s3 = 0; s3 < u2; s3++) a2 = u2 - s3, l2 = 3 & s3 ? h2[a2] : h2[a2 - 4], d2[s3] = s3 < 4 || a2 <= 4 ? l2 : v2[c2[l2 >>> 24]] ^ m2[c2[l2 >>> 16 & 255]] ^ p2[c2[l2 >>> 8 & 255]] ^ y2[c2[255 & l2]], d2[s3] = d2[s3] >>> 0;
            }
          }, e2.networkToHostOrderSwap = function(t4) {
            return t4 << 24 | (65280 & t4) << 8 | (16711680 & t4) >> 8 | t4 >>> 24;
          }, e2.decrypt = function(t4, e3, r3) {
            for (var i4, n2, a2, s3, o2, l2, u2, h2, d2, c2, f3, g2, v2, m2, p2 = this.keySize + 6, y2 = this.invKeySchedule, E2 = this.invSBox, T2 = this.invSubMix, S2 = T2[0], L2 = T2[1], A2 = T2[2], R2 = T2[3], b2 = this.uint8ArrayToUint32Array_(r3), k2 = b2[0], D2 = b2[1], I2 = b2[2], w2 = b2[3], C2 = new Int32Array(t4), _2 = new Int32Array(C2.length), x2 = this.networkToHostOrderSwap; e3 < C2.length; ) {
              for (d2 = x2(C2[e3]), c2 = x2(C2[e3 + 1]), f3 = x2(C2[e3 + 2]), g2 = x2(C2[e3 + 3]), o2 = d2 ^ y2[0], l2 = g2 ^ y2[1], u2 = f3 ^ y2[2], h2 = c2 ^ y2[3], v2 = 4, m2 = 1; m2 < p2; m2++) i4 = S2[o2 >>> 24] ^ L2[l2 >> 16 & 255] ^ A2[u2 >> 8 & 255] ^ R2[255 & h2] ^ y2[v2], n2 = S2[l2 >>> 24] ^ L2[u2 >> 16 & 255] ^ A2[h2 >> 8 & 255] ^ R2[255 & o2] ^ y2[v2 + 1], a2 = S2[u2 >>> 24] ^ L2[h2 >> 16 & 255] ^ A2[o2 >> 8 & 255] ^ R2[255 & l2] ^ y2[v2 + 2], s3 = S2[h2 >>> 24] ^ L2[o2 >> 16 & 255] ^ A2[l2 >> 8 & 255] ^ R2[255 & u2] ^ y2[v2 + 3], o2 = i4, l2 = n2, u2 = a2, h2 = s3, v2 += 4;
              i4 = E2[o2 >>> 24] << 24 ^ E2[l2 >> 16 & 255] << 16 ^ E2[u2 >> 8 & 255] << 8 ^ E2[255 & h2] ^ y2[v2], n2 = E2[l2 >>> 24] << 24 ^ E2[u2 >> 16 & 255] << 16 ^ E2[h2 >> 8 & 255] << 8 ^ E2[255 & o2] ^ y2[v2 + 1], a2 = E2[u2 >>> 24] << 24 ^ E2[h2 >> 16 & 255] << 16 ^ E2[o2 >> 8 & 255] << 8 ^ E2[255 & l2] ^ y2[v2 + 2], s3 = E2[h2 >>> 24] << 24 ^ E2[o2 >> 16 & 255] << 16 ^ E2[l2 >> 8 & 255] << 8 ^ E2[255 & u2] ^ y2[v2 + 3], _2[e3] = x2(i4 ^ k2), _2[e3 + 1] = x2(s3 ^ D2), _2[e3 + 2] = x2(a2 ^ I2), _2[e3 + 3] = x2(n2 ^ w2), k2 = d2, D2 = c2, I2 = f3, w2 = g2, e3 += 4;
            }
            return _2.buffer;
          }, t3;
        }(), pi = function() {
          function t3(t4, e3) {
            var r3 = (void 0 === e3 ? {} : e3).removePKCS7Padding, i4 = void 0 === r3 || r3;
            if (this.logEnabled = true, this.removePKCS7Padding = void 0, this.subtle = null, this.softwareDecrypter = null, this.key = null, this.fastAesKey = null, this.remainderData = null, this.currentIV = null, this.currentResult = null, this.useSoftware = void 0, this.useSoftware = t4.enableSoftwareAES, this.removePKCS7Padding = i4, i4) try {
              var n2 = self.crypto;
              n2 && (this.subtle = n2.subtle || n2.webkitSubtle);
            } catch (t5) {
            }
            this.useSoftware = !this.subtle;
          }
          var e2 = t3.prototype;
          return e2.destroy = function() {
            this.subtle = null, this.softwareDecrypter = null, this.key = null, this.fastAesKey = null, this.remainderData = null, this.currentIV = null, this.currentResult = null;
          }, e2.isSync = function() {
            return this.useSoftware;
          }, e2.flush = function() {
            var t4 = this.currentResult, e3 = this.remainderData;
            if (!t4 || e3) return this.reset(), null;
            var r3, i4, n2, a2 = new Uint8Array(t4);
            return this.reset(), this.removePKCS7Padding ? (i4 = (r3 = a2).byteLength, (n2 = i4 && new DataView(r3.buffer).getUint8(i4 - 1)) ? lt(r3, 0, i4 - n2) : r3) : a2;
          }, e2.reset = function() {
            this.currentResult = null, this.currentIV = null, this.remainderData = null, this.softwareDecrypter && (this.softwareDecrypter = null);
          }, e2.decrypt = function(t4, e3, r3) {
            var i4 = this;
            return this.useSoftware ? new Promise(function(n2, a2) {
              i4.softwareDecrypt(new Uint8Array(t4), e3, r3);
              var s3 = i4.flush();
              s3 ? n2(s3.buffer) : a2(new Error("[softwareDecrypt] Failed to decrypt data"));
            }) : this.webCryptoDecrypt(new Uint8Array(t4), e3, r3);
          }, e2.softwareDecrypt = function(t4, e3, r3) {
            var i4 = this.currentIV, n2 = this.currentResult, a2 = this.remainderData;
            this.logOnce("JS AES decrypt"), a2 && (t4 = Wt(a2, t4), this.remainderData = null);
            var s3 = this.getValidChunk(t4);
            if (!s3.length) return null;
            i4 && (r3 = i4);
            var o2 = this.softwareDecrypter;
            o2 || (o2 = this.softwareDecrypter = new mi()), o2.expandKey(e3);
            var l2 = n2;
            return this.currentResult = o2.decrypt(s3.buffer, 0, r3), this.currentIV = lt(s3, -16).buffer, l2 || null;
          }, e2.webCryptoDecrypt = function(t4, e3, r3) {
            var i4 = this;
            if (this.key !== e3 || !this.fastAesKey) {
              if (!this.subtle) return Promise.resolve(this.onWebCryptoError(t4, e3, r3));
              this.key = e3, this.fastAesKey = new vi(this.subtle, e3);
            }
            return this.fastAesKey.expandKey().then(function(e4) {
              return i4.subtle ? (i4.logOnce("WebCrypto AES decrypt"), new gi(i4.subtle, new Uint8Array(r3)).decrypt(t4.buffer, e4)) : Promise.reject(new Error("web crypto not initialized"));
            }).catch(function(n2) {
              return w.warn("[decrypter]: WebCrypto Error, disable WebCrypto API, " + n2.name + ": " + n2.message), i4.onWebCryptoError(t4, e3, r3);
            });
          }, e2.onWebCryptoError = function(t4, e3, r3) {
            this.useSoftware = true, this.logEnabled = true, this.softwareDecrypt(t4, e3, r3);
            var i4 = this.flush();
            if (i4) return i4.buffer;
            throw new Error("WebCrypto and softwareDecrypt: failed to decrypt data");
          }, e2.getValidChunk = function(t4) {
            var e3 = t4, r3 = t4.length - t4.length % 16;
            return r3 !== t4.length && (e3 = lt(t4, 0, r3), this.remainderData = lt(t4, r3)), e3;
          }, e2.logOnce = function(t4) {
            this.logEnabled && (w.log("[decrypter]: " + t4), this.logEnabled = false);
          }, t3;
        }(), yi = function(t3) {
          for (var e2 = "", r3 = t3.length, i4 = 0; i4 < r3; i4++) e2 += "[" + t3.start(i4).toFixed(3) + "-" + t3.end(i4).toFixed(3) + "]";
          return e2;
        }, Ei = "STOPPED", Ti = "IDLE", Si = "KEY_LOADING", Li = "FRAG_LOADING", Ai = "FRAG_LOADING_WAITING_RETRY", Ri = "WAITING_TRACK", bi = "PARSING", ki = "PARSED", Di = "ENDED", Ii = "ERROR", wi = "WAITING_INIT_PTS", Ci = "WAITING_LEVEL", _i = function(t3) {
          function e2(e3, r4, i4, n2, a2) {
            var s3;
            return (s3 = t3.call(this) || this).hls = void 0, s3.fragPrevious = null, s3.fragCurrent = null, s3.fragmentTracker = void 0, s3.transmuxer = null, s3._state = Ei, s3.playlistType = void 0, s3.media = null, s3.mediaBuffer = null, s3.config = void 0, s3.bitrateTest = false, s3.lastCurrentTime = 0, s3.nextLoadPosition = 0, s3.startPosition = 0, s3.startTimeOffset = null, s3.loadedmetadata = false, s3.retryDate = 0, s3.levels = null, s3.fragmentLoader = void 0, s3.keyLoader = void 0, s3.levelLastLoaded = null, s3.startFragRequested = false, s3.decrypter = void 0, s3.initPTS = [], s3.onvseeking = null, s3.onvended = null, s3.logPrefix = "", s3.log = void 0, s3.warn = void 0, s3.playlistType = a2, s3.logPrefix = n2, s3.log = w.log.bind(w, n2 + ":"), s3.warn = w.warn.bind(w, n2 + ":"), s3.hls = e3, s3.fragmentLoader = new hi(e3.config), s3.keyLoader = i4, s3.fragmentTracker = r4, s3.config = e3.config, s3.decrypter = new pi(e3.config), e3.on(S.MANIFEST_LOADED, s3.onManifestLoaded, function(t4) {
              if (void 0 === t4) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return t4;
            }(s3)), s3;
          }
          l(e2, t3);
          var r3 = e2.prototype;
          return r3.doTick = function() {
            this.onTickEnd();
          }, r3.onTickEnd = function() {
          }, r3.startLoad = function(t4) {
          }, r3.stopLoad = function() {
            this.fragmentLoader.abort(), this.keyLoader.abort(this.playlistType);
            var t4 = this.fragCurrent;
            null != t4 && t4.loader && (t4.abortRequests(), this.fragmentTracker.removeFragment(t4)), this.resetTransmuxer(), this.fragCurrent = null, this.fragPrevious = null, this.clearInterval(), this.clearNextTick(), this.state = Ei;
          }, r3._streamEnded = function(t4, e3) {
            if (e3.live || t4.nextStart || !t4.end || !this.media) return false;
            var r4 = e3.partList;
            if (null != r4 && r4.length) {
              var i4 = r4[r4.length - 1];
              return ri.isBuffered(this.media, i4.start + i4.duration / 2);
            }
            var n2 = e3.fragments[e3.fragments.length - 1].type;
            return this.fragmentTracker.isEndListAppended(n2);
          }, r3.getLevelDetails = function() {
            var t4;
            if (this.levels && null !== this.levelLastLoaded) return null == (t4 = this.levelLastLoaded) ? void 0 : t4.details;
          }, r3.onMediaAttached = function(t4, e3) {
            var r4 = this.media = this.mediaBuffer = e3.media;
            this.onvseeking = this.onMediaSeeking.bind(this), this.onvended = this.onMediaEnded.bind(this), r4.addEventListener("seeking", this.onvseeking), r4.addEventListener("ended", this.onvended);
            var i4 = this.config;
            this.levels && i4.autoStartLoad && this.state === Ei && this.startLoad(i4.startPosition);
          }, r3.onMediaDetaching = function() {
            var t4 = this.media;
            null != t4 && t4.ended && (this.log("MSE detaching and video ended, reset startPosition"), this.startPosition = this.lastCurrentTime = 0), t4 && this.onvseeking && this.onvended && (t4.removeEventListener("seeking", this.onvseeking), t4.removeEventListener("ended", this.onvended), this.onvseeking = this.onvended = null), this.keyLoader && this.keyLoader.detach(), this.media = this.mediaBuffer = null, this.loadedmetadata = false, this.fragmentTracker.removeAllFragments(), this.stopLoad();
          }, r3.onMediaSeeking = function() {
            var t4 = this.config, e3 = this.fragCurrent, r4 = this.media, i4 = this.mediaBuffer, n2 = this.state, a2 = r4 ? r4.currentTime : 0, s3 = ri.bufferInfo(i4 || r4, a2, t4.maxBufferHole);
            if (this.log("media seeking to " + (y(a2) ? a2.toFixed(3) : a2) + ", state: " + n2), this.state === Di) this.resetLoadingState();
            else if (e3) {
              var o2 = t4.maxFragLookUpTolerance, l2 = e3.start - o2, u2 = e3.start + e3.duration + o2;
              if (!s3.len || u2 < s3.start || l2 > s3.end) {
                var h2 = a2 > u2;
                (a2 < l2 || h2) && (h2 && e3.loader && (this.log("seeking outside of buffer while fragment load in progress, cancel fragment load"), e3.abortRequests(), this.resetLoadingState()), this.fragPrevious = null);
              }
            }
            r4 && (this.fragmentTracker.removeFragmentsInRange(a2, 1 / 0, this.playlistType, true), this.lastCurrentTime = a2), this.loadedmetadata || s3.len || (this.nextLoadPosition = this.startPosition = a2), this.tickImmediate();
          }, r3.onMediaEnded = function() {
            this.startPosition = this.lastCurrentTime = 0;
          }, r3.onManifestLoaded = function(t4, e3) {
            this.startTimeOffset = e3.startTimeOffset, this.initPTS = [];
          }, r3.onHandlerDestroying = function() {
            this.hls.off(S.MANIFEST_LOADED, this.onManifestLoaded, this), this.stopLoad(), t3.prototype.onHandlerDestroying.call(this), this.hls = null;
          }, r3.onHandlerDestroyed = function() {
            this.state = Ei, this.fragmentLoader && this.fragmentLoader.destroy(), this.keyLoader && this.keyLoader.destroy(), this.decrypter && this.decrypter.destroy(), this.hls = this.log = this.warn = this.decrypter = this.keyLoader = this.fragmentLoader = this.fragmentTracker = null, t3.prototype.onHandlerDestroyed.call(this);
          }, r3.loadFragment = function(t4, e3, r4) {
            this._loadFragForPlayback(t4, e3, r4);
          }, r3._loadFragForPlayback = function(t4, e3, r4) {
            var i4 = this;
            this._doFragLoad(t4, e3, r4, function(e4) {
              if (i4.fragContextChanged(t4)) return i4.warn("Fragment " + t4.sn + (e4.part ? " p: " + e4.part.index : "") + " of level " + t4.level + " was dropped during download."), void i4.fragmentTracker.removeFragment(t4);
              t4.stats.chunkCount++, i4._handleFragmentLoadProgress(e4);
            }).then(function(e4) {
              if (e4) {
                var r5 = i4.state;
                i4.fragContextChanged(t4) ? (r5 === Li || !i4.fragCurrent && r5 === bi) && (i4.fragmentTracker.removeFragment(t4), i4.state = Ti) : ("payload" in e4 && (i4.log("Loaded fragment " + t4.sn + " of level " + t4.level), i4.hls.trigger(S.FRAG_LOADED, e4)), i4._handleFragmentLoadComplete(e4));
              }
            }).catch(function(e4) {
              i4.state !== Ei && i4.state !== Ii && (i4.warn("Frag error: " + ((null == e4 ? void 0 : e4.message) || e4)), i4.resetFragmentLoading(t4));
            });
          }, r3.clearTrackerIfNeeded = function(t4) {
            var e3, r4 = this.fragmentTracker;
            if (r4.getState(t4) === zr) {
              var i4 = t4.type, n2 = this.getFwdBufferInfo(this.mediaBuffer, i4), a2 = Math.max(t4.duration, n2 ? n2.len : this.config.maxBufferLength), s3 = this.backtrackFragment;
              (1 == (s3 ? t4.sn - s3.sn : 0) || this.reduceMaxBufferLength(a2, t4.duration)) && r4.removeFragment(t4);
            } else 0 === (null == (e3 = this.mediaBuffer) ? void 0 : e3.buffered.length) ? r4.removeAllFragments() : r4.hasParts(t4.type) && (r4.detectPartialFragments({ frag: t4, part: null, stats: t4.stats, id: t4.type }), r4.getState(t4) === Qr && r4.removeFragment(t4));
          }, r3.checkLiveUpdate = function(t4) {
            if (t4.updated && !t4.live) {
              var e3 = t4.fragments[t4.fragments.length - 1];
              this.fragmentTracker.detectPartialFragments({ frag: e3, part: null, stats: e3.stats, id: e3.type });
            }
            t4.fragments[0] || (t4.deltaUpdateFailed = true);
          }, r3.flushMainBuffer = function(t4, e3, r4) {
            if (void 0 === r4 && (r4 = null), t4 - e3) {
              var i4 = { startOffset: t4, endOffset: e3, type: r4 };
              this.hls.trigger(S.BUFFER_FLUSHING, i4);
            }
          }, r3._loadInitSegment = function(t4, e3) {
            var r4 = this;
            this._doFragLoad(t4, e3).then(function(e4) {
              if (!e4 || r4.fragContextChanged(t4) || !r4.levels) throw new Error("init load aborted");
              return e4;
            }).then(function(e4) {
              var i4 = r4.hls, n2 = e4.payload, a2 = t4.decryptdata;
              if (n2 && n2.byteLength > 0 && null != a2 && a2.key && a2.iv && "AES-128" === a2.method) {
                var s3 = self.performance.now();
                return r4.decrypter.decrypt(new Uint8Array(n2), a2.key.buffer, a2.iv.buffer).catch(function(e5) {
                  throw i4.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_DECRYPT_ERROR, fatal: false, error: e5, reason: e5.message, frag: t4 }), e5;
                }).then(function(n3) {
                  var a3 = self.performance.now();
                  return i4.trigger(S.FRAG_DECRYPTED, { frag: t4, payload: n3, stats: { tstart: s3, tdecrypt: a3 } }), e4.payload = n3, r4.completeInitSegmentLoad(e4);
                });
              }
              return r4.completeInitSegmentLoad(e4);
            }).catch(function(e4) {
              r4.state !== Ei && r4.state !== Ii && (r4.warn(e4), r4.resetFragmentLoading(t4));
            });
          }, r3.completeInitSegmentLoad = function(t4) {
            if (!this.levels) throw new Error("init load aborted, missing levels");
            var e3 = t4.frag.stats;
            this.state = Ti, t4.frag.data = new Uint8Array(t4.payload), e3.parsing.start = e3.buffering.start = self.performance.now(), e3.parsing.end = e3.buffering.end = self.performance.now(), this.tick();
          }, r3.fragContextChanged = function(t4) {
            var e3 = this.fragCurrent;
            return !t4 || !e3 || t4.sn !== e3.sn || t4.level !== e3.level;
          }, r3.fragBufferedComplete = function(t4, e3) {
            var r4, i4, n2, a2, s3 = this.mediaBuffer ? this.mediaBuffer : this.media;
            if (this.log("Buffered " + t4.type + " sn: " + t4.sn + (e3 ? " part: " + e3.index : "") + " of " + (this.playlistType === Fe ? "level" : "track") + " " + t4.level + " (frag:[" + (null != (r4 = t4.startPTS) ? r4 : NaN).toFixed(3) + "-" + (null != (i4 = t4.endPTS) ? i4 : NaN).toFixed(3) + "] > buffer:" + (s3 ? yi(ri.getBuffered(s3)) : "(detached)") + ")"), "initSegment" !== t4.sn) {
              var o2;
              if (t4.type !== Oe) {
                var l2 = t4.elementaryStreams;
                if (!Object.keys(l2).some(function(t5) {
                  return !!l2[t5];
                })) return void (this.state = Ti);
              }
              var u2 = null == (o2 = this.levels) ? void 0 : o2[t4.level];
              null != u2 && u2.fragmentError && (this.log("Resetting level fragment error count of " + u2.fragmentError + " on frag buffered"), u2.fragmentError = 0);
            }
            this.state = Ti, s3 && (!this.loadedmetadata && t4.type == Fe && s3.buffered.length && (null == (n2 = this.fragCurrent) ? void 0 : n2.sn) === (null == (a2 = this.fragPrevious) ? void 0 : a2.sn) && (this.loadedmetadata = true, this.seekToStartPos()), this.tick());
          }, r3.seekToStartPos = function() {
          }, r3._handleFragmentLoadComplete = function(t4) {
            var e3 = this.transmuxer;
            if (e3) {
              var r4 = t4.frag, i4 = t4.part, n2 = t4.partsLoaded, a2 = !n2 || 0 === n2.length || n2.some(function(t5) {
                return !t5;
              }), s3 = new ii(r4.level, r4.sn, r4.stats.chunkCount + 1, 0, i4 ? i4.index : -1, !a2);
              e3.flush(s3);
            }
          }, r3._handleFragmentLoadProgress = function(t4) {
          }, r3._doFragLoad = function(t4, e3, r4, i4) {
            var n2, a2 = this;
            void 0 === r4 && (r4 = null);
            var s3 = null == e3 ? void 0 : e3.details;
            if (!this.levels || !s3) throw new Error("frag load aborted, missing level" + (s3 ? "" : " detail") + "s");
            var o2 = null;
            if (!t4.encrypted || null != (n2 = t4.decryptdata) && n2.key ? !t4.encrypted && s3.encryptedFragments.length && this.keyLoader.loadClear(t4, s3.encryptedFragments) : (this.log("Loading key for " + t4.sn + " of [" + s3.startSN + "-" + s3.endSN + "], " + ("[stream-controller]" === this.logPrefix ? "level" : "track") + " " + t4.level), this.state = Si, this.fragCurrent = t4, o2 = this.keyLoader.load(t4).then(function(t5) {
              if (!a2.fragContextChanged(t5.frag)) return a2.hls.trigger(S.KEY_LOADED, t5), a2.state === Si && (a2.state = Ti), t5;
            }), this.hls.trigger(S.KEY_LOADING, { frag: t4 }), null === this.fragCurrent && (o2 = Promise.reject(new Error("frag load aborted, context changed in KEY_LOADING")))), r4 = Math.max(t4.start, r4 || 0), this.config.lowLatencyMode && "initSegment" !== t4.sn) {
              var l2 = s3.partList;
              if (l2 && i4) {
                r4 > t4.end && s3.fragmentHint && (t4 = s3.fragmentHint);
                var u2 = this.getNextPart(l2, t4, r4);
                if (u2 > -1) {
                  var h2, d2 = l2[u2];
                  return this.log("Loading part sn: " + t4.sn + " p: " + d2.index + " cc: " + t4.cc + " of playlist [" + s3.startSN + "-" + s3.endSN + "] parts [0-" + u2 + "-" + (l2.length - 1) + "] " + ("[stream-controller]" === this.logPrefix ? "level" : "track") + ": " + t4.level + ", target: " + parseFloat(r4.toFixed(3))), this.nextLoadPosition = d2.start + d2.duration, this.state = Li, h2 = o2 ? o2.then(function(r5) {
                    return !r5 || a2.fragContextChanged(r5.frag) ? null : a2.doFragPartsLoad(t4, d2, e3, i4);
                  }).catch(function(t5) {
                    return a2.handleFragLoadError(t5);
                  }) : this.doFragPartsLoad(t4, d2, e3, i4).catch(function(t5) {
                    return a2.handleFragLoadError(t5);
                  }), this.hls.trigger(S.FRAG_LOADING, { frag: t4, part: d2, targetBufferTime: r4 }), null === this.fragCurrent ? Promise.reject(new Error("frag load aborted, context changed in FRAG_LOADING parts")) : h2;
                }
                if (!t4.url || this.loadedEndOfParts(l2, r4)) return Promise.resolve(null);
              }
            }
            this.log("Loading fragment " + t4.sn + " cc: " + t4.cc + " " + (s3 ? "of [" + s3.startSN + "-" + s3.endSN + "] " : "") + ("[stream-controller]" === this.logPrefix ? "level" : "track") + ": " + t4.level + ", target: " + parseFloat(r4.toFixed(3))), y(t4.sn) && !this.bitrateTest && (this.nextLoadPosition = t4.start + t4.duration), this.state = Li;
            var c2, f3 = this.config.progressive;
            return c2 = f3 && o2 ? o2.then(function(e4) {
              return !e4 || a2.fragContextChanged(null == e4 ? void 0 : e4.frag) ? null : a2.fragmentLoader.load(t4, i4);
            }).catch(function(t5) {
              return a2.handleFragLoadError(t5);
            }) : Promise.all([this.fragmentLoader.load(t4, f3 ? i4 : void 0), o2]).then(function(t5) {
              var e4 = t5[0];
              return !f3 && e4 && i4 && i4(e4), e4;
            }).catch(function(t5) {
              return a2.handleFragLoadError(t5);
            }), this.hls.trigger(S.FRAG_LOADING, { frag: t4, targetBufferTime: r4 }), null === this.fragCurrent ? Promise.reject(new Error("frag load aborted, context changed in FRAG_LOADING")) : c2;
          }, r3.doFragPartsLoad = function(t4, e3, r4, i4) {
            var n2 = this;
            return new Promise(function(a2, s3) {
              var o2, l2 = [], u2 = null == (o2 = r4.details) ? void 0 : o2.partList;
              !function e4(o3) {
                n2.fragmentLoader.loadPart(t4, o3, i4).then(function(i5) {
                  l2[o3.index] = i5;
                  var s4 = i5.part;
                  n2.hls.trigger(S.FRAG_LOADED, i5);
                  var h2 = gr(r4, t4.sn, o3.index + 1) || vr(u2, t4.sn, o3.index + 1);
                  if (!h2) return a2({ frag: t4, part: s4, partsLoaded: l2 });
                  e4(h2);
                }).catch(s3);
              }(e3);
            });
          }, r3.handleFragLoadError = function(t4) {
            if ("data" in t4) {
              var e3 = t4.data;
              t4.data && e3.details === A.INTERNAL_ABORTED ? this.handleFragLoadAborted(e3.frag, e3.part) : this.hls.trigger(S.ERROR, e3);
            } else this.hls.trigger(S.ERROR, { type: L.OTHER_ERROR, details: A.INTERNAL_EXCEPTION, err: t4, error: t4, fatal: true });
            return null;
          }, r3._handleTransmuxerFlush = function(t4) {
            var e3 = this.getCurrentContext(t4);
            if (e3 && this.state === bi) {
              var r4 = e3.frag, i4 = e3.part, n2 = e3.level, a2 = self.performance.now();
              r4.stats.parsing.end = a2, i4 && (i4.stats.parsing.end = a2), this.updateLevelTiming(r4, i4, n2, t4.partial);
            } else this.fragCurrent || this.state === Ei || this.state === Ii || (this.state = Ti);
          }, r3.getCurrentContext = function(t4) {
            var e3 = this.levels, r4 = this.fragCurrent, i4 = t4.level, n2 = t4.sn, a2 = t4.part;
            if (null == e3 || !e3[i4]) return this.warn("Levels object was unset while buffering fragment " + n2 + " of level " + i4 + ". The current chunk will not be buffered."), null;
            var s3 = e3[i4], o2 = a2 > -1 ? gr(s3, n2, a2) : null, l2 = o2 ? o2.fragment : function(t5, e4, r5) {
              if (null == t5 || !t5.details) return null;
              var i5 = t5.details, n3 = i5.fragments[e4 - i5.startSN];
              return n3 || ((n3 = i5.fragmentHint) && n3.sn === e4 ? n3 : e4 < i5.startSN && r5 && r5.sn === e4 ? r5 : null);
            }(s3, n2, r4);
            return l2 ? (r4 && r4 !== l2 && (l2.stats = r4.stats), { frag: l2, part: o2, level: s3 }) : null;
          }, r3.bufferFragmentData = function(t4, e3, r4, i4, n2) {
            var a2;
            if (t4 && this.state === bi) {
              var s3 = t4.data1, o2 = t4.data2, l2 = s3;
              if (s3 && o2 && (l2 = Wt(s3, o2)), null != (a2 = l2) && a2.length) {
                var u2 = { type: t4.type, frag: e3, part: r4, chunkMeta: i4, parent: e3.type, data: l2 };
                if (this.hls.trigger(S.BUFFER_APPENDING, u2), t4.dropped && t4.independent && !r4) {
                  if (n2) return;
                  this.flushBufferGap(e3);
                }
              }
            }
          }, r3.flushBufferGap = function(t4) {
            var e3 = this.media;
            if (e3) if (ri.isBuffered(e3, e3.currentTime)) {
              var r4 = e3.currentTime, i4 = ri.bufferInfo(e3, r4, 0), n2 = t4.duration, a2 = Math.min(2 * this.config.maxFragLookUpTolerance, 0.25 * n2), s3 = Math.max(Math.min(t4.start - a2, i4.end - a2), r4 + a2);
              t4.start - s3 > a2 && this.flushMainBuffer(s3, t4.start);
            } else this.flushMainBuffer(0, t4.start);
          }, r3.getFwdBufferInfo = function(t4, e3) {
            var r4 = this.getLoadPosition();
            return y(r4) ? this.getFwdBufferInfoAtPos(t4, r4, e3) : null;
          }, r3.getFwdBufferInfoAtPos = function(t4, e3, r4) {
            var i4 = this.config.maxBufferHole, n2 = ri.bufferInfo(t4, e3, i4);
            if (0 === n2.len && void 0 !== n2.nextStart) {
              var a2 = this.fragmentTracker.getBufferedFrag(e3, r4);
              if (a2 && n2.nextStart < a2.end) return ri.bufferInfo(t4, e3, Math.max(n2.nextStart, i4));
            }
            return n2;
          }, r3.getMaxBufferLength = function(t4) {
            var e3, r4 = this.config;
            return e3 = t4 ? Math.max(8 * r4.maxBufferSize / t4, r4.maxBufferLength) : r4.maxBufferLength, Math.min(e3, r4.maxMaxBufferLength);
          }, r3.reduceMaxBufferLength = function(t4, e3) {
            var r4 = this.config, i4 = Math.max(Math.min(t4 - e3, r4.maxBufferLength), e3), n2 = Math.max(t4 - 3 * e3, r4.maxMaxBufferLength / 2, i4);
            return n2 >= i4 && (r4.maxMaxBufferLength = n2, this.warn("Reduce max buffer length to " + n2 + "s"), true);
          }, r3.getAppendedFrag = function(t4, e3) {
            var r4 = this.fragmentTracker.getAppendedFrag(t4, Fe);
            return r4 && "fragment" in r4 ? r4.fragment : r4;
          }, r3.getNextFragment = function(t4, e3) {
            var r4 = e3.fragments, i4 = r4.length;
            if (!i4) return null;
            var n2, a2 = this.config, s3 = r4[0].start;
            if (e3.live) {
              var o2 = a2.initialLiveManifestSize;
              if (i4 < o2) return this.warn("Not enough fragments to start playback (have: " + i4 + ", need: " + o2 + ")"), null;
              (!e3.PTSKnown && !this.startFragRequested && -1 === this.startPosition || t4 < s3) && (n2 = this.getInitialLiveFragment(e3, r4), this.startPosition = this.nextLoadPosition = n2 ? this.hls.liveSyncPosition || n2.start : t4);
            } else t4 <= s3 && (n2 = r4[0]);
            if (!n2) {
              var l2 = a2.lowLatencyMode ? e3.partEnd : e3.fragmentEnd;
              n2 = this.getFragmentAtPosition(t4, l2, e3);
            }
            return this.mapToInitFragWhenRequired(n2);
          }, r3.isLoopLoading = function(t4, e3) {
            var r4 = this.fragmentTracker.getState(t4);
            return (r4 === Jr || r4 === Qr && !!t4.gap) && this.nextLoadPosition > e3;
          }, r3.getNextFragmentLoopLoading = function(t4, e3, r4, i4, n2) {
            var a2 = t4.gap, s3 = this.getNextFragment(this.nextLoadPosition, e3);
            if (null === s3) return s3;
            if (t4 = s3, a2 && t4 && !t4.gap && r4.nextStart) {
              var o2 = this.getFwdBufferInfoAtPos(this.mediaBuffer ? this.mediaBuffer : this.media, r4.nextStart, i4);
              if (null !== o2 && r4.len + o2.len >= n2) return this.log('buffer full after gaps in "' + i4 + '" playlist starting at sn: ' + t4.sn), null;
            }
            return t4;
          }, r3.mapToInitFragWhenRequired = function(t4) {
            return null == t4 || !t4.initSegment || null != t4 && t4.initSegment.data || this.bitrateTest ? t4 : t4.initSegment;
          }, r3.getNextPart = function(t4, e3, r4) {
            for (var i4 = -1, n2 = false, a2 = true, s3 = 0, o2 = t4.length; s3 < o2; s3++) {
              var l2 = t4[s3];
              if (a2 = a2 && !l2.independent, i4 > -1 && r4 < l2.start) break;
              var u2 = l2.loaded;
              u2 ? i4 = -1 : (n2 || l2.independent || a2) && l2.fragment === e3 && (i4 = s3), n2 = u2;
            }
            return i4;
          }, r3.loadedEndOfParts = function(t4, e3) {
            var r4 = t4[t4.length - 1];
            return r4 && e3 > r4.start && r4.loaded;
          }, r3.getInitialLiveFragment = function(t4, e3) {
            var r4 = this.fragPrevious, i4 = null;
            if (r4) {
              if (t4.hasProgramDateTime && (this.log("Live playlist, switching playlist, load frag with same PDT: " + r4.programDateTime), i4 = function(t5, e4, r5) {
                if (null === e4 || !Array.isArray(t5) || !t5.length || !y(e4)) return null;
                if (e4 < (t5[0].programDateTime || 0)) return null;
                if (e4 >= (t5[t5.length - 1].endProgramDateTime || 0)) return null;
                r5 = r5 || 0;
                for (var i5 = 0; i5 < t5.length; ++i5) {
                  var n3 = t5[i5];
                  if (br(e4, r5, n3)) return n3;
                }
                return null;
              }(e3, r4.endProgramDateTime, this.config.maxFragLookUpTolerance)), !i4) {
                var n2 = r4.sn + 1;
                if (n2 >= t4.startSN && n2 <= t4.endSN) {
                  var a2 = e3[n2 - t4.startSN];
                  r4.cc === a2.cc && (i4 = a2, this.log("Live playlist, switching playlist, load frag with next SN: " + i4.sn));
                }
                i4 || (i4 = function(t5, e4) {
                  return Lr(t5, function(t6) {
                    return t6.cc < e4 ? 1 : t6.cc > e4 ? -1 : 0;
                  });
                }(e3, r4.cc), i4 && this.log("Live playlist, switching playlist, load frag with same CC: " + i4.sn));
              }
            } else {
              var s3 = this.hls.liveSyncPosition;
              null !== s3 && (i4 = this.getFragmentAtPosition(s3, this.bitrateTest ? t4.fragmentEnd : t4.edge, t4));
            }
            return i4;
          }, r3.getFragmentAtPosition = function(t4, e3, r4) {
            var i4, n2 = this.config, a2 = this.fragPrevious, s3 = r4.fragments, o2 = r4.endSN, l2 = r4.fragmentHint, u2 = n2.maxFragLookUpTolerance, h2 = r4.partList, d2 = !!(n2.lowLatencyMode && null != h2 && h2.length && l2);
            if (d2 && l2 && !this.bitrateTest && (s3 = s3.concat(l2), o2 = l2.sn), i4 = t4 < e3 ? Ar(a2, s3, t4, t4 > e3 - u2 ? 0 : u2) : s3[s3.length - 1]) {
              var c2 = i4.sn - r4.startSN, f3 = this.fragmentTracker.getState(i4);
              if ((f3 === Jr || f3 === Qr && i4.gap) && (a2 = i4), a2 && i4.sn === a2.sn && (!d2 || h2[0].fragment.sn > i4.sn) && a2 && i4.level === a2.level) {
                var g2 = s3[c2 + 1];
                i4 = i4.sn < o2 && this.fragmentTracker.getState(g2) !== Jr ? g2 : null;
              }
            }
            return i4;
          }, r3.synchronizeToLiveEdge = function(t4) {
            var e3 = this.config, r4 = this.media;
            if (r4) {
              var i4 = this.hls.liveSyncPosition, n2 = r4.currentTime, a2 = t4.fragments[0].start, s3 = t4.edge, o2 = n2 >= a2 - e3.maxFragLookUpTolerance && n2 <= s3;
              if (null !== i4 && r4.duration > i4 && (n2 < i4 || !o2)) {
                var l2 = void 0 !== e3.liveMaxLatencyDuration ? e3.liveMaxLatencyDuration : e3.liveMaxLatencyDurationCount * t4.targetduration;
                (!o2 && r4.readyState < 4 || n2 < s3 - l2) && (this.loadedmetadata || (this.nextLoadPosition = i4), r4.readyState && (this.warn("Playback: " + n2.toFixed(3) + " is located too far from the end of live sliding playlist: " + s3 + ", reset currentTime to : " + i4.toFixed(3)), r4.currentTime = i4));
              }
            }
          }, r3.alignPlaylists = function(t4, e3, r4) {
            var i4 = t4.fragments.length;
            if (!i4) return this.warn("No fragments in live playlist"), 0;
            var n2 = t4.fragments[0].start, a2 = !e3, s3 = t4.alignedSliding && y(n2);
            if (a2 || !s3 && !n2) {
              var o2 = this.fragPrevious;
              oi(o2, r4, t4);
              var l2 = t4.fragments[0].start;
              return this.log("Live playlist sliding: " + l2.toFixed(2) + " start-sn: " + (e3 ? e3.startSN : "na") + "->" + t4.startSN + " prev-sn: " + (o2 ? o2.sn : "na") + " fragments: " + i4), l2;
            }
            return n2;
          }, r3.waitForCdnTuneIn = function(t4) {
            return t4.live && t4.canBlockReload && t4.partTarget && t4.tuneInGoal > Math.max(t4.partHoldBack, 3 * t4.partTarget);
          }, r3.setStartPosition = function(t4, e3) {
            var r4 = this.startPosition;
            if (r4 < e3 && (r4 = -1), -1 === r4 || -1 === this.lastCurrentTime) {
              var i4 = null !== this.startTimeOffset, n2 = i4 ? this.startTimeOffset : t4.startTimeOffset;
              null !== n2 && y(n2) ? (r4 = e3 + n2, n2 < 0 && (r4 += t4.totalduration), r4 = Math.min(Math.max(e3, r4), e3 + t4.totalduration), this.log("Start time offset " + n2 + " found in " + (i4 ? "multivariant" : "media") + " playlist, adjust startPosition to " + r4), this.startPosition = r4) : t4.live ? r4 = this.hls.liveSyncPosition || e3 : this.startPosition = r4 = 0, this.lastCurrentTime = r4;
            }
            this.nextLoadPosition = r4;
          }, r3.getLoadPosition = function() {
            var t4 = this.media, e3 = 0;
            return this.loadedmetadata && t4 ? e3 = t4.currentTime : this.nextLoadPosition && (e3 = this.nextLoadPosition), e3;
          }, r3.handleFragLoadAborted = function(t4, e3) {
            this.transmuxer && "initSegment" !== t4.sn && t4.stats.aborted && (this.warn("Fragment " + t4.sn + (e3 ? " part " + e3.index : "") + " of level " + t4.level + " was aborted"), this.resetFragmentLoading(t4));
          }, r3.resetFragmentLoading = function(t4) {
            this.fragCurrent && (this.fragContextChanged(t4) || this.state === Ai) || (this.state = Ti);
          }, r3.onFragmentOrKeyLoadError = function(t4, e3) {
            if (e3.chunkMeta && !e3.frag) {
              var r4 = this.getCurrentContext(e3.chunkMeta);
              r4 && (e3.frag = r4.frag);
            }
            var i4 = e3.frag;
            if (i4 && i4.type === t4 && this.levels) if (this.fragContextChanged(i4)) {
              var n2;
              this.warn("Frag load error must match current frag to retry " + i4.url + " > " + (null == (n2 = this.fragCurrent) ? void 0 : n2.url));
            } else {
              var a2 = e3.details === A.FRAG_GAP;
              a2 && this.fragmentTracker.fragBuffered(i4, true);
              var s3 = e3.errorAction, o2 = s3 || {}, l2 = o2.action, u2 = o2.retryCount, h2 = void 0 === u2 ? 0 : u2, d2 = o2.retryConfig;
              if (s3 && l2 === wr && d2) {
                this.resetStartWhenNotLoaded(this.levelLastLoaded);
                var c2 = Er(d2, h2);
                this.warn("Fragment " + i4.sn + " of " + t4 + " " + i4.level + " errored with " + e3.details + ", retrying loading " + (h2 + 1) + "/" + d2.maxNumRetry + " in " + c2 + "ms"), s3.resolved = true, this.retryDate = self.performance.now() + c2, this.state = Ai;
              } else if (d2 && s3) {
                if (this.resetFragmentErrors(t4), !(h2 < d2.maxNumRetry)) return void w.warn(e3.details + " reached or exceeded max retry (" + h2 + ")");
                a2 || l2 === Ir || (s3.resolved = true);
              } else (null == s3 ? void 0 : s3.action) === Dr ? this.state = Ci : this.state = Ii;
              this.tickImmediate();
            }
          }, r3.reduceLengthAndFlushBuffer = function(t4) {
            if (this.state === bi || this.state === ki) {
              var e3 = t4.frag, r4 = t4.parent, i4 = this.getFwdBufferInfo(this.mediaBuffer, r4), n2 = i4 && i4.len > 0.5;
              n2 && this.reduceMaxBufferLength(i4.len, (null == e3 ? void 0 : e3.duration) || 10);
              var a2 = !n2;
              return a2 && this.warn("Buffer full error while media.currentTime is not buffered, flush " + r4 + " buffer"), e3 && (this.fragmentTracker.removeFragment(e3), this.nextLoadPosition = e3.start), this.resetLoadingState(), a2;
            }
            return false;
          }, r3.resetFragmentErrors = function(t4) {
            t4 === Me && (this.fragCurrent = null), this.loadedmetadata || (this.startFragRequested = false), this.state !== Ei && (this.state = Ti);
          }, r3.afterBufferFlushed = function(t4, e3, r4) {
            if (t4) {
              var i4 = ri.getBuffered(t4);
              this.fragmentTracker.detectEvictedFragments(e3, i4, r4), this.state === Di && this.resetLoadingState();
            }
          }, r3.resetLoadingState = function() {
            this.log("Reset loading state"), this.fragCurrent = null, this.fragPrevious = null, this.state = Ti;
          }, r3.resetStartWhenNotLoaded = function(t4) {
            if (!this.loadedmetadata) {
              this.startFragRequested = false;
              var e3 = t4 ? t4.details : null;
              null != e3 && e3.live ? (this.startPosition = -1, this.setStartPosition(e3, 0), this.resetLoadingState()) : this.nextLoadPosition = this.startPosition;
            }
          }, r3.resetWhenMissingContext = function(t4) {
            this.warn("The loading context changed while buffering fragment " + t4.sn + " of level " + t4.level + ". This chunk will not be buffered."), this.removeUnbufferedFrags(), this.resetStartWhenNotLoaded(this.levelLastLoaded), this.resetLoadingState();
          }, r3.removeUnbufferedFrags = function(t4) {
            void 0 === t4 && (t4 = 0), this.fragmentTracker.removeFragmentsInRange(t4, 1 / 0, this.playlistType, false, true);
          }, r3.updateLevelTiming = function(t4, e3, r4, i4) {
            var n2, a2 = this, s3 = r4.details;
            if (s3) {
              if (!Object.keys(t4.elementaryStreams).reduce(function(e4, n3) {
                var o3 = t4.elementaryStreams[n3];
                if (o3) {
                  var l2 = o3.endPTS - o3.startPTS;
                  if (l2 <= 0) return a2.warn("Could not parse fragment " + t4.sn + " " + n3 + " duration reliably (" + l2 + ")"), e4 || false;
                  var u2 = i4 ? 0 : hr(s3, t4, o3.startPTS, o3.endPTS, o3.startDTS, o3.endDTS);
                  return a2.hls.trigger(S.LEVEL_PTS_UPDATED, { details: s3, level: r4, drift: u2, type: n3, frag: t4, start: o3.startPTS, end: o3.endPTS }), true;
                }
                return e4;
              }, false) && null === (null == (n2 = this.transmuxer) ? void 0 : n2.error)) {
                var o2 = new Error("Found no media in fragment " + t4.sn + " of level " + t4.level + " resetting transmuxer to fallback to playlist timing");
                if (0 === r4.fragmentError && (r4.fragmentError++, t4.gap = true, this.fragmentTracker.removeFragment(t4), this.fragmentTracker.fragBuffered(t4, true)), this.warn(o2.message), this.hls.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_PARSING_ERROR, fatal: false, error: o2, frag: t4, reason: "Found no media in msn " + t4.sn + ' of level "' + r4.url + '"' }), !this.hls) return;
                this.resetTransmuxer();
              }
              this.state = ki, this.hls.trigger(S.FRAG_PARSED, { frag: t4, part: e3 });
            } else this.warn("level.details undefined");
          }, r3.resetTransmuxer = function() {
            this.transmuxer && (this.transmuxer.destroy(), this.transmuxer = null);
          }, r3.recoverWorkerError = function(t4) {
            "demuxerWorker" === t4.event && (this.fragmentTracker.removeAllFragments(), this.resetTransmuxer(), this.resetStartWhenNotLoaded(this.levelLastLoaded), this.resetLoadingState());
          }, s2(e2, [{ key: "state", get: function() {
            return this._state;
          }, set: function(t4) {
            var e3 = this._state;
            e3 !== t4 && (this._state = t4, this.log(e3 + "->" + t4));
          } }]), e2;
        }(qr), xi = function() {
          function t3() {
            this.chunks = [], this.dataLength = 0;
          }
          var e2 = t3.prototype;
          return e2.push = function(t4) {
            this.chunks.push(t4), this.dataLength += t4.length;
          }, e2.flush = function() {
            var t4, e3 = this.chunks, r3 = this.dataLength;
            return e3.length ? (t4 = 1 === e3.length ? e3[0] : function(t5, e4) {
              for (var r4 = new Uint8Array(e4), i4 = 0, n2 = 0; n2 < t5.length; n2++) {
                var a2 = t5[n2];
                r4.set(a2, i4), i4 += a2.length;
              }
              return r4;
            }(e3, r3), this.reset(), t4) : new Uint8Array(0);
          }, e2.reset = function() {
            this.chunks.length = 0, this.dataLength = 0;
          }, t3;
        }();
        function Pi(t3, e2) {
          return void 0 === t3 && (t3 = ""), void 0 === e2 && (e2 = 9e4), { type: t3, id: -1, pid: -1, inputTimeScale: e2, sequenceNumber: -1, samples: [], dropped: 0 };
        }
        var Fi = function() {
          function t3() {
            this._audioTrack = void 0, this._id3Track = void 0, this.frameIndex = 0, this.cachedData = null, this.basePTS = null, this.initPTS = null, this.lastPTS = null;
          }
          var e2 = t3.prototype;
          return e2.resetInitSegment = function(t4, e3, r3, i4) {
            this._id3Track = { type: "id3", id: 3, pid: -1, inputTimeScale: 9e4, sequenceNumber: 0, samples: [], dropped: 0 };
          }, e2.resetTimeStamp = function(t4) {
            this.initPTS = t4, this.resetContiguity();
          }, e2.resetContiguity = function() {
            this.basePTS = null, this.lastPTS = null, this.frameIndex = 0;
          }, e2.canParse = function(t4, e3) {
            return false;
          }, e2.appendFrame = function(t4, e3, r3) {
          }, e2.demux = function(t4, e3) {
            this.cachedData && (t4 = Wt(this.cachedData, t4), this.cachedData = null);
            var r3, i4 = ct(t4, 0), n2 = i4 ? i4.length : 0, a2 = this._audioTrack, s3 = this._id3Track, o2 = i4 ? vt(i4) : void 0, l2 = t4.length;
            for ((null === this.basePTS || 0 === this.frameIndex && y(o2)) && (this.basePTS = Mi(o2, e3, this.initPTS), this.lastPTS = this.basePTS), null === this.lastPTS && (this.lastPTS = this.basePTS), i4 && i4.length > 0 && s3.samples.push({ pts: this.lastPTS, dts: this.lastPTS, data: i4, type: We, duration: Number.POSITIVE_INFINITY }); n2 < l2; ) {
              if (this.canParse(t4, n2)) {
                var u2 = this.appendFrame(a2, t4, n2);
                u2 ? (this.frameIndex++, this.lastPTS = u2.sample.pts, r3 = n2 += u2.length) : n2 = l2;
              } else gt(t4, n2) ? (i4 = ct(t4, n2), s3.samples.push({ pts: this.lastPTS, dts: this.lastPTS, data: i4, type: We, duration: Number.POSITIVE_INFINITY }), r3 = n2 += i4.length) : n2++;
              if (n2 === l2 && r3 !== l2) {
                var h2 = lt(t4, r3);
                this.cachedData ? this.cachedData = Wt(this.cachedData, h2) : this.cachedData = h2;
              }
            }
            return { audioTrack: a2, videoTrack: Pi(), id3Track: s3, textTrack: Pi() };
          }, e2.demuxSampleAes = function(t4, e3, r3) {
            return Promise.reject(new Error("[" + this + "] This demuxer does not support Sample-AES decryption"));
          }, e2.flush = function(t4) {
            var e3 = this.cachedData;
            return e3 && (this.cachedData = null, this.demux(e3, 0)), { audioTrack: this._audioTrack, videoTrack: Pi(), id3Track: this._id3Track, textTrack: Pi() };
          }, e2.destroy = function() {
          }, t3;
        }(), Mi = function(t3, e2, r3) {
          return y(t3) ? 90 * t3 : 9e4 * e2 + (r3 ? 9e4 * r3.baseTime / r3.timescale : 0);
        };
        function Oi(t3, e2) {
          return 255 === t3[e2] && 240 == (246 & t3[e2 + 1]);
        }
        function Ni(t3, e2) {
          return 1 & t3[e2 + 1] ? 7 : 9;
        }
        function Ui(t3, e2) {
          return (3 & t3[e2 + 3]) << 11 | t3[e2 + 4] << 3 | (224 & t3[e2 + 5]) >>> 5;
        }
        function Bi(t3, e2) {
          return e2 + 1 < t3.length && Oi(t3, e2);
        }
        function Gi(t3, e2) {
          if (Bi(t3, e2)) {
            var r3 = Ni(t3, e2);
            if (e2 + r3 >= t3.length) return false;
            var i4 = Ui(t3, e2);
            if (i4 <= r3) return false;
            var n2 = e2 + i4;
            return n2 === t3.length || Bi(t3, n2);
          }
          return false;
        }
        function Ki(t3, e2, r3, i4, n2) {
          if (!t3.samplerate) {
            var a2 = function(t4, e3, r4, i5) {
              var n3, a3, s3, o2, l2 = navigator.userAgent.toLowerCase(), u2 = i5, h2 = [96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350];
              n3 = 1 + ((192 & e3[r4 + 2]) >>> 6);
              var d2 = (60 & e3[r4 + 2]) >>> 2;
              if (!(d2 > h2.length - 1)) return s3 = (1 & e3[r4 + 2]) << 2, s3 |= (192 & e3[r4 + 3]) >>> 6, w.log("manifest codec:" + i5 + ", ADTS type:" + n3 + ", samplingIndex:" + d2), /firefox/i.test(l2) ? d2 >= 6 ? (n3 = 5, o2 = new Array(4), a3 = d2 - 3) : (n3 = 2, o2 = new Array(2), a3 = d2) : -1 !== l2.indexOf("android") ? (n3 = 2, o2 = new Array(2), a3 = d2) : (n3 = 5, o2 = new Array(4), i5 && (-1 !== i5.indexOf("mp4a.40.29") || -1 !== i5.indexOf("mp4a.40.5")) || !i5 && d2 >= 6 ? a3 = d2 - 3 : ((i5 && -1 !== i5.indexOf("mp4a.40.2") && (d2 >= 6 && 1 === s3 || /vivaldi/i.test(l2)) || !i5 && 1 === s3) && (n3 = 2, o2 = new Array(2)), a3 = d2)), o2[0] = n3 << 3, o2[0] |= (14 & d2) >> 1, o2[1] |= (1 & d2) << 7, o2[1] |= s3 << 3, 5 === n3 && (o2[1] |= (14 & a3) >> 1, o2[2] = (1 & a3) << 7, o2[2] |= 8, o2[3] = 0), { config: o2, samplerate: h2[d2], channelCount: s3, codec: "mp4a.40." + n3, manifestCodec: u2 };
              var c2 = new Error("invalid ADTS sampling index:" + d2);
              t4.emit(S.ERROR, S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_PARSING_ERROR, fatal: true, error: c2, reason: c2.message });
            }(e2, r3, i4, n2);
            if (!a2) return;
            t3.config = a2.config, t3.samplerate = a2.samplerate, t3.channelCount = a2.channelCount, t3.codec = a2.codec, t3.manifestCodec = a2.manifestCodec, w.log("parsed codec:" + t3.codec + ", rate:" + a2.samplerate + ", channels:" + a2.channelCount);
          }
        }
        function Hi(t3) {
          return 9216e4 / t3;
        }
        function Vi(t3, e2, r3, i4, n2) {
          var a2, s3 = i4 + n2 * Hi(t3.samplerate), o2 = function(t4, e3) {
            var r4 = Ni(t4, e3);
            if (e3 + r4 <= t4.length) {
              var i5 = Ui(t4, e3) - r4;
              if (i5 > 0) return { headerLength: r4, frameLength: i5 };
            }
          }(e2, r3);
          if (o2) {
            var l2 = o2.frameLength, u2 = o2.headerLength, h2 = u2 + l2, d2 = Math.max(0, r3 + h2 - e2.length);
            d2 ? (a2 = new Uint8Array(h2 - u2)).set(e2.subarray(r3 + u2, e2.length), 0) : a2 = e2.subarray(r3 + u2, r3 + h2);
            var c2 = { unit: a2, pts: s3 };
            return d2 || t3.samples.push(c2), { sample: c2, length: h2, missing: d2 };
          }
          var f3 = e2.length - r3;
          return (a2 = new Uint8Array(f3)).set(e2.subarray(r3, e2.length), 0), { sample: { unit: a2, pts: s3 }, length: f3, missing: -1 };
        }
        var Yi = null, Wi = [32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160], ji = [44100, 48e3, 32e3, 22050, 24e3, 16e3, 11025, 12e3, 8e3], qi = [[0, 72, 144, 12], [0, 0, 0, 0], [0, 72, 144, 12], [0, 144, 144, 12]], Xi = [0, 1, 1, 4];
        function zi(t3, e2, r3, i4, n2) {
          if (!(r3 + 24 > e2.length)) {
            var a2 = Qi(e2, r3);
            if (a2 && r3 + a2.frameLength <= e2.length) {
              var s3 = i4 + n2 * (9e4 * a2.samplesPerFrame / a2.sampleRate), o2 = { unit: e2.subarray(r3, r3 + a2.frameLength), pts: s3, dts: s3 };
              return t3.config = [], t3.channelCount = a2.channelCount, t3.samplerate = a2.sampleRate, t3.samples.push(o2), { sample: o2, length: a2.frameLength, missing: 0 };
            }
          }
        }
        function Qi(t3, e2) {
          var r3 = t3[e2 + 1] >> 3 & 3, i4 = t3[e2 + 1] >> 1 & 3, n2 = t3[e2 + 2] >> 4 & 15, a2 = t3[e2 + 2] >> 2 & 3;
          if (1 !== r3 && 0 !== n2 && 15 !== n2 && 3 !== a2) {
            var s3 = t3[e2 + 2] >> 1 & 1, o2 = t3[e2 + 3] >> 6, l2 = 1e3 * Wi[14 * (3 === r3 ? 3 - i4 : 3 === i4 ? 3 : 4) + n2 - 1], u2 = ji[3 * (3 === r3 ? 0 : 2 === r3 ? 1 : 2) + a2], h2 = 3 === o2 ? 1 : 2, d2 = qi[r3][i4], c2 = Xi[i4], f3 = 8 * d2 * c2, g2 = Math.floor(d2 * l2 / u2 + s3) * c2;
            if (null === Yi) {
              var v2 = (navigator.userAgent || "").match(/Chrome\/(\d+)/i);
              Yi = v2 ? parseInt(v2[1]) : 0;
            }
            return !!Yi && Yi <= 87 && 2 === i4 && l2 >= 224e3 && 0 === o2 && (t3[e2 + 3] = 128 | t3[e2 + 3]), { sampleRate: u2, channelCount: h2, frameLength: g2, samplesPerFrame: f3 };
          }
        }
        function Ji(t3, e2) {
          return 255 === t3[e2] && 224 == (224 & t3[e2 + 1]) && 0 != (6 & t3[e2 + 1]);
        }
        function $i(t3, e2) {
          return e2 + 1 < t3.length && Ji(t3, e2);
        }
        function Zi(t3, e2) {
          if (e2 + 1 < t3.length && Ji(t3, e2)) {
            var r3 = Qi(t3, e2), i4 = 4;
            null != r3 && r3.frameLength && (i4 = r3.frameLength);
            var n2 = e2 + i4;
            return n2 === t3.length || $i(t3, n2);
          }
          return false;
        }
        var tn = function(t3) {
          function e2(e3, r4) {
            var i4;
            return (i4 = t3.call(this) || this).observer = void 0, i4.config = void 0, i4.observer = e3, i4.config = r4, i4;
          }
          l(e2, t3);
          var r3 = e2.prototype;
          return r3.resetInitSegment = function(e3, r4, i4, n2) {
            t3.prototype.resetInitSegment.call(this, e3, r4, i4, n2), this._audioTrack = { container: "audio/adts", type: "audio", id: 2, pid: -1, sequenceNumber: 0, segmentCodec: "aac", samples: [], manifestCodec: r4, duration: n2, inputTimeScale: 9e4, dropped: 0 };
          }, e2.probe = function(t4) {
            if (!t4) return false;
            var e3 = ct(t4, 0), r4 = (null == e3 ? void 0 : e3.length) || 0;
            if (Zi(t4, r4)) return false;
            for (var i4 = t4.length; r4 < i4; r4++) if (Gi(t4, r4)) return w.log("ADTS sync word found !"), true;
            return false;
          }, r3.canParse = function(t4, e3) {
            return function(t5, e4) {
              return function(t6, e5) {
                return e5 + 5 < t6.length;
              }(t5, e4) && Oi(t5, e4) && Ui(t5, e4) <= t5.length - e4;
            }(t4, e3);
          }, r3.appendFrame = function(t4, e3, r4) {
            Ki(t4, this.observer, e3, r4, t4.manifestCodec);
            var i4 = Vi(t4, e3, r4, this.basePTS, this.frameIndex);
            if (i4 && 0 === i4.missing) return i4;
          }, e2;
        }(Fi), en = /\/emsg[-/]ID3/i, rn = function() {
          function t3(t4, e3) {
            this.remainderData = null, this.timeOffset = 0, this.config = void 0, this.videoTrack = void 0, this.audioTrack = void 0, this.id3Track = void 0, this.txtTrack = void 0, this.config = e3;
          }
          var e2 = t3.prototype;
          return e2.resetTimeStamp = function() {
          }, e2.resetInitSegment = function(t4, e3, r3, i4) {
            var n2 = this.videoTrack = Pi("video", 1), a2 = this.audioTrack = Pi("audio", 1), s3 = this.txtTrack = Pi("text", 1);
            if (this.id3Track = Pi("id3", 1), this.timeOffset = 0, null != t4 && t4.byteLength) {
              var o2 = Ut(t4);
              if (o2.video) {
                var l2 = o2.video, u2 = l2.id, h2 = l2.timescale, d2 = l2.codec;
                n2.id = u2, n2.timescale = s3.timescale = h2, n2.codec = d2;
              }
              if (o2.audio) {
                var c2 = o2.audio, f3 = c2.id, g2 = c2.timescale, v2 = c2.codec;
                a2.id = f3, a2.timescale = g2, a2.codec = v2;
              }
              s3.id = wt.text, n2.sampleDuration = 0, n2.duration = a2.duration = i4;
            }
          }, e2.resetContiguity = function() {
            this.remainderData = null;
          }, t3.probe = function(t4) {
            return function(t5) {
              for (var e3 = t5.byteLength, r3 = 0; r3 < e3; ) {
                var i4 = xt(t5, r3);
                if (i4 > 8 && 109 === t5[r3 + 4] && 111 === t5[r3 + 5] && 111 === t5[r3 + 6] && 102 === t5[r3 + 7]) return true;
                r3 = i4 > 1 ? r3 + i4 : e3;
              }
              return false;
            }(t4);
          }, e2.demux = function(t4, e3) {
            this.timeOffset = e3;
            var r3 = t4, i4 = this.videoTrack, n2 = this.txtTrack;
            if (this.config.progressive) {
              this.remainderData && (r3 = Wt(this.remainderData, t4));
              var a2 = function(t5) {
                var e4 = { valid: null, remainder: null }, r4 = Ot(t5, ["moof"]);
                if (r4.length < 2) return e4.remainder = t5, e4;
                var i5 = r4[r4.length - 1];
                return e4.valid = lt(t5, 0, i5.byteOffset - 8), e4.remainder = lt(t5, i5.byteOffset - 8), e4;
              }(r3);
              this.remainderData = a2.remainder, i4.samples = a2.valid || new Uint8Array();
            } else i4.samples = r3;
            var s3 = this.extractID3Track(i4, e3);
            return n2.samples = jt(e3, i4), { videoTrack: i4, audioTrack: this.audioTrack, id3Track: s3, textTrack: this.txtTrack };
          }, e2.flush = function() {
            var t4 = this.timeOffset, e3 = this.videoTrack, r3 = this.txtTrack;
            e3.samples = this.remainderData || new Uint8Array(), this.remainderData = null;
            var i4 = this.extractID3Track(e3, this.timeOffset);
            return r3.samples = jt(t4, e3), { videoTrack: e3, audioTrack: Pi(), id3Track: i4, textTrack: Pi() };
          }, e2.extractID3Track = function(t4, e3) {
            var r3 = this.id3Track;
            if (t4.samples.length) {
              var i4 = Ot(t4.samples, ["emsg"]);
              i4 && i4.forEach(function(t5) {
                var i5 = function(t6) {
                  var e4 = t6[0], r4 = "", i6 = "", n3 = 0, a3 = 0, s4 = 0, o2 = 0, l2 = 0, u2 = 0;
                  if (0 === e4) {
                    for (; "\0" !== Ct(t6.subarray(u2, u2 + 1)); ) r4 += Ct(t6.subarray(u2, u2 + 1)), u2 += 1;
                    for (r4 += Ct(t6.subarray(u2, u2 + 1)), u2 += 1; "\0" !== Ct(t6.subarray(u2, u2 + 1)); ) i6 += Ct(t6.subarray(u2, u2 + 1)), u2 += 1;
                    i6 += Ct(t6.subarray(u2, u2 + 1)), u2 += 1, n3 = xt(t6, 12), a3 = xt(t6, 16), o2 = xt(t6, 20), l2 = xt(t6, 24), u2 = 28;
                  } else if (1 === e4) {
                    n3 = xt(t6, u2 += 4);
                    var h2 = xt(t6, u2 += 4), d2 = xt(t6, u2 += 4);
                    for (u2 += 4, s4 = Math.pow(2, 32) * h2 + d2, E(s4) || (s4 = Number.MAX_SAFE_INTEGER, w.warn("Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box")), o2 = xt(t6, u2), l2 = xt(t6, u2 += 4), u2 += 4; "\0" !== Ct(t6.subarray(u2, u2 + 1)); ) r4 += Ct(t6.subarray(u2, u2 + 1)), u2 += 1;
                    for (r4 += Ct(t6.subarray(u2, u2 + 1)), u2 += 1; "\0" !== Ct(t6.subarray(u2, u2 + 1)); ) i6 += Ct(t6.subarray(u2, u2 + 1)), u2 += 1;
                    i6 += Ct(t6.subarray(u2, u2 + 1)), u2 += 1;
                  }
                  return { schemeIdUri: r4, value: i6, timeScale: n3, presentationTime: s4, presentationTimeDelta: a3, eventDuration: o2, id: l2, payload: t6.subarray(u2, t6.byteLength) };
                }(t5);
                if (en.test(i5.schemeIdUri)) {
                  var n2 = y(i5.presentationTime) ? i5.presentationTime / i5.timeScale : e3 + i5.presentationTimeDelta / i5.timeScale, a2 = 4294967295 === i5.eventDuration ? Number.POSITIVE_INFINITY : i5.eventDuration / i5.timeScale;
                  a2 <= 1e-3 && (a2 = Number.POSITIVE_INFINITY);
                  var s3 = i5.payload;
                  r3.samples.push({ data: s3, len: s3.byteLength, dts: n2, pts: n2, type: qe, duration: a2 });
                }
              });
            }
            return r3;
          }, e2.demuxSampleAes = function(t4, e3, r3) {
            return Promise.reject(new Error("The MP4 demuxer does not support SAMPLE-AES decryption"));
          }, e2.destroy = function() {
          }, t3;
        }(), nn = function(t3, e2) {
          var r3 = 0, i4 = 5;
          e2 += i4;
          for (var n2 = new Uint32Array(1), a2 = new Uint32Array(1), s3 = new Uint8Array(1); i4 > 0; ) {
            s3[0] = t3[e2];
            var o2 = Math.min(i4, 8), l2 = 8 - o2;
            a2[0] = 4278190080 >>> 24 + l2 << l2, n2[0] = (s3[0] & a2[0]) >> l2, r3 = r3 ? r3 << o2 | n2[0] : n2[0], e2 += 1, i4 -= o2;
          }
          return r3;
        }, an = function(t3) {
          function e2(e3) {
            var r4;
            return (r4 = t3.call(this) || this).observer = void 0, r4.observer = e3, r4;
          }
          l(e2, t3);
          var r3 = e2.prototype;
          return r3.resetInitSegment = function(e3, r4, i4, n2) {
            t3.prototype.resetInitSegment.call(this, e3, r4, i4, n2), this._audioTrack = { container: "audio/ac-3", type: "audio", id: 2, pid: -1, sequenceNumber: 0, segmentCodec: "ac3", samples: [], manifestCodec: r4, duration: n2, inputTimeScale: 9e4, dropped: 0 };
          }, r3.canParse = function(t4, e3) {
            return e3 + 64 < t4.length;
          }, r3.appendFrame = function(t4, e3, r4) {
            var i4 = sn(t4, e3, r4, this.basePTS, this.frameIndex);
            if (-1 !== i4) return { sample: t4.samples[t4.samples.length - 1], length: i4, missing: 0 };
          }, e2.probe = function(t4) {
            if (!t4) return false;
            var e3 = ct(t4, 0);
            if (!e3) return false;
            var r4 = e3.length;
            return 11 === t4[r4] && 119 === t4[r4 + 1] && void 0 !== vt(e3) && nn(t4, r4) < 16;
          }, e2;
        }(Fi);
        function sn(t3, e2, r3, i4, n2) {
          if (r3 + 8 > e2.length) return -1;
          if (11 !== e2[r3] || 119 !== e2[r3 + 1]) return -1;
          var a2 = e2[r3 + 4] >> 6;
          if (a2 >= 3) return -1;
          var s3 = [48e3, 44100, 32e3][a2], o2 = 63 & e2[r3 + 4], l2 = 2 * [64, 69, 96, 64, 70, 96, 80, 87, 120, 80, 88, 120, 96, 104, 144, 96, 105, 144, 112, 121, 168, 112, 122, 168, 128, 139, 192, 128, 140, 192, 160, 174, 240, 160, 175, 240, 192, 208, 288, 192, 209, 288, 224, 243, 336, 224, 244, 336, 256, 278, 384, 256, 279, 384, 320, 348, 480, 320, 349, 480, 384, 417, 576, 384, 418, 576, 448, 487, 672, 448, 488, 672, 512, 557, 768, 512, 558, 768, 640, 696, 960, 640, 697, 960, 768, 835, 1152, 768, 836, 1152, 896, 975, 1344, 896, 976, 1344, 1024, 1114, 1536, 1024, 1115, 1536, 1152, 1253, 1728, 1152, 1254, 1728, 1280, 1393, 1920, 1280, 1394, 1920][3 * o2 + a2];
          if (r3 + l2 > e2.length) return -1;
          var u2 = e2[r3 + 6] >> 5, h2 = 0;
          2 === u2 ? h2 += 2 : (1 & u2 && 1 !== u2 && (h2 += 2), 4 & u2 && (h2 += 2));
          var d2 = (e2[r3 + 6] << 8 | e2[r3 + 7]) >> 12 - h2 & 1, c2 = [2, 1, 2, 3, 3, 4, 4, 5][u2] + d2, f3 = e2[r3 + 5] >> 3, g2 = 7 & e2[r3 + 5], v2 = new Uint8Array([a2 << 6 | f3 << 1 | g2 >> 2, (3 & g2) << 6 | u2 << 3 | d2 << 2 | o2 >> 4, o2 << 4 & 224]), m2 = i4 + n2 * (1536 / s3 * 9e4), p2 = e2.subarray(r3, r3 + l2);
          return t3.config = v2, t3.channelCount = c2, t3.samplerate = s3, t3.samples.push({ unit: p2, pts: m2 }), l2;
        }
        var on = function() {
          function t3() {
            this.VideoSample = null;
          }
          var e2 = t3.prototype;
          return e2.createVideoSample = function(t4, e3, r3, i4) {
            return { key: t4, frame: false, pts: e3, dts: r3, units: [], debug: i4, length: 0 };
          }, e2.getLastNalUnit = function(t4) {
            var e3, r3, i4 = this.VideoSample;
            if (i4 && 0 !== i4.units.length || (i4 = t4[t4.length - 1]), null != (e3 = i4) && e3.units) {
              var n2 = i4.units;
              r3 = n2[n2.length - 1];
            }
            return r3;
          }, e2.pushAccessUnit = function(t4, e3) {
            if (t4.units.length && t4.frame) {
              if (void 0 === t4.pts) {
                var r3 = e3.samples, i4 = r3.length;
                if (!i4) return void e3.dropped++;
                var n2 = r3[i4 - 1];
                t4.pts = n2.pts, t4.dts = n2.dts;
              }
              e3.samples.push(t4);
            }
            t4.debug.length && w.log(t4.pts + "/" + t4.dts + ":" + t4.debug);
          }, t3;
        }(), ln = function() {
          function t3(t4) {
            this.data = void 0, this.bytesAvailable = void 0, this.word = void 0, this.bitsAvailable = void 0, this.data = t4, this.bytesAvailable = t4.byteLength, this.word = 0, this.bitsAvailable = 0;
          }
          var e2 = t3.prototype;
          return e2.loadWord = function() {
            var t4 = this.data, e3 = this.bytesAvailable, r3 = t4.byteLength - e3, i4 = new Uint8Array(4), n2 = Math.min(4, e3);
            if (0 === n2) throw new Error("no bytes available");
            i4.set(t4.subarray(r3, r3 + n2)), this.word = new DataView(i4.buffer).getUint32(0), this.bitsAvailable = 8 * n2, this.bytesAvailable -= n2;
          }, e2.skipBits = function(t4) {
            var e3;
            t4 = Math.min(t4, 8 * this.bytesAvailable + this.bitsAvailable), this.bitsAvailable > t4 ? (this.word <<= t4, this.bitsAvailable -= t4) : (t4 -= this.bitsAvailable, t4 -= (e3 = t4 >> 3) << 3, this.bytesAvailable -= e3, this.loadWord(), this.word <<= t4, this.bitsAvailable -= t4);
          }, e2.readBits = function(t4) {
            var e3 = Math.min(this.bitsAvailable, t4), r3 = this.word >>> 32 - e3;
            if (t4 > 32 && w.error("Cannot read more than 32 bits at a time"), this.bitsAvailable -= e3, this.bitsAvailable > 0) this.word <<= e3;
            else {
              if (!(this.bytesAvailable > 0)) throw new Error("no bits available");
              this.loadWord();
            }
            return (e3 = t4 - e3) > 0 && this.bitsAvailable ? r3 << e3 | this.readBits(e3) : r3;
          }, e2.skipLZ = function() {
            var t4;
            for (t4 = 0; t4 < this.bitsAvailable; ++t4) if (0 != (this.word & 2147483648 >>> t4)) return this.word <<= t4, this.bitsAvailable -= t4, t4;
            return this.loadWord(), t4 + this.skipLZ();
          }, e2.skipUEG = function() {
            this.skipBits(1 + this.skipLZ());
          }, e2.skipEG = function() {
            this.skipBits(1 + this.skipLZ());
          }, e2.readUEG = function() {
            var t4 = this.skipLZ();
            return this.readBits(t4 + 1) - 1;
          }, e2.readEG = function() {
            var t4 = this.readUEG();
            return 1 & t4 ? 1 + t4 >>> 1 : -1 * (t4 >>> 1);
          }, e2.readBoolean = function() {
            return 1 === this.readBits(1);
          }, e2.readUByte = function() {
            return this.readBits(8);
          }, e2.readUShort = function() {
            return this.readBits(16);
          }, e2.readUInt = function() {
            return this.readBits(32);
          }, e2.skipScalingList = function(t4) {
            for (var e3 = 8, r3 = 8, i4 = 0; i4 < t4; i4++) 0 !== r3 && (r3 = (e3 + this.readEG() + 256) % 256), e3 = 0 === r3 ? e3 : r3;
          }, e2.readSPS = function() {
            var t4, e3, r3, i4 = 0, n2 = 0, a2 = 0, s3 = 0, o2 = this.readUByte.bind(this), l2 = this.readBits.bind(this), u2 = this.readUEG.bind(this), h2 = this.readBoolean.bind(this), d2 = this.skipBits.bind(this), c2 = this.skipEG.bind(this), f3 = this.skipUEG.bind(this), g2 = this.skipScalingList.bind(this);
            o2();
            var v2 = o2();
            if (l2(5), d2(3), o2(), f3(), 100 === v2 || 110 === v2 || 122 === v2 || 244 === v2 || 44 === v2 || 83 === v2 || 86 === v2 || 118 === v2 || 128 === v2) {
              var m2 = u2();
              if (3 === m2 && d2(1), f3(), f3(), d2(1), h2()) for (e3 = 3 !== m2 ? 8 : 12, r3 = 0; r3 < e3; r3++) h2() && g2(r3 < 6 ? 16 : 64);
            }
            f3();
            var p2 = u2();
            if (0 === p2) u2();
            else if (1 === p2) for (d2(1), c2(), c2(), t4 = u2(), r3 = 0; r3 < t4; r3++) c2();
            f3(), d2(1);
            var y2 = u2(), E2 = u2(), T2 = l2(1);
            0 === T2 && d2(1), d2(1), h2() && (i4 = u2(), n2 = u2(), a2 = u2(), s3 = u2());
            var S2 = [1, 1];
            if (h2() && h2()) switch (o2()) {
              case 1:
                S2 = [1, 1];
                break;
              case 2:
                S2 = [12, 11];
                break;
              case 3:
                S2 = [10, 11];
                break;
              case 4:
                S2 = [16, 11];
                break;
              case 5:
                S2 = [40, 33];
                break;
              case 6:
                S2 = [24, 11];
                break;
              case 7:
                S2 = [20, 11];
                break;
              case 8:
                S2 = [32, 11];
                break;
              case 9:
                S2 = [80, 33];
                break;
              case 10:
                S2 = [18, 11];
                break;
              case 11:
                S2 = [15, 11];
                break;
              case 12:
                S2 = [64, 33];
                break;
              case 13:
                S2 = [160, 99];
                break;
              case 14:
                S2 = [4, 3];
                break;
              case 15:
                S2 = [3, 2];
                break;
              case 16:
                S2 = [2, 1];
                break;
              case 255:
                S2 = [o2() << 8 | o2(), o2() << 8 | o2()];
            }
            return { width: Math.ceil(16 * (y2 + 1) - 2 * i4 - 2 * n2), height: (2 - T2) * (E2 + 1) * 16 - (T2 ? 2 : 4) * (a2 + s3), pixelRatio: S2 };
          }, e2.readSliceType = function() {
            return this.readUByte(), this.readUEG(), this.readUEG();
          }, t3;
        }(), un = function(t3) {
          function e2() {
            return t3.apply(this, arguments) || this;
          }
          l(e2, t3);
          var r3 = e2.prototype;
          return r3.parseAVCPES = function(t4, e3, r4, i4, n2) {
            var a2, s3 = this, o2 = this.parseAVCNALu(t4, r4.data), l2 = this.VideoSample, u2 = false;
            r4.data = null, l2 && o2.length && !t4.audFound && (this.pushAccessUnit(l2, t4), l2 = this.VideoSample = this.createVideoSample(false, r4.pts, r4.dts, "")), o2.forEach(function(i5) {
              var o3;
              switch (i5.type) {
                case 1:
                  var h2 = false;
                  a2 = true;
                  var d2, c2 = i5.data;
                  if (u2 && c2.length > 4) {
                    var f3 = new ln(c2).readSliceType();
                    2 !== f3 && 4 !== f3 && 7 !== f3 && 9 !== f3 || (h2 = true);
                  }
                  h2 && null != (d2 = l2) && d2.frame && !l2.key && (s3.pushAccessUnit(l2, t4), l2 = s3.VideoSample = null), l2 || (l2 = s3.VideoSample = s3.createVideoSample(true, r4.pts, r4.dts, "")), l2.frame = true, l2.key = h2;
                  break;
                case 5:
                  a2 = true, null != (o3 = l2) && o3.frame && !l2.key && (s3.pushAccessUnit(l2, t4), l2 = s3.VideoSample = null), l2 || (l2 = s3.VideoSample = s3.createVideoSample(true, r4.pts, r4.dts, "")), l2.key = true, l2.frame = true;
                  break;
                case 6:
                  a2 = true, Xt(i5.data, 1, r4.pts, e3.samples);
                  break;
                case 7:
                  var g2, v2;
                  a2 = true, u2 = true;
                  var m2 = i5.data, p2 = new ln(m2).readSPS();
                  if (!t4.sps || t4.width !== p2.width || t4.height !== p2.height || (null == (g2 = t4.pixelRatio) ? void 0 : g2[0]) !== p2.pixelRatio[0] || (null == (v2 = t4.pixelRatio) ? void 0 : v2[1]) !== p2.pixelRatio[1]) {
                    t4.width = p2.width, t4.height = p2.height, t4.pixelRatio = p2.pixelRatio, t4.sps = [m2], t4.duration = n2;
                    for (var y2 = m2.subarray(1, 4), E2 = "avc1.", T2 = 0; T2 < 3; T2++) {
                      var S2 = y2[T2].toString(16);
                      S2.length < 2 && (S2 = "0" + S2), E2 += S2;
                    }
                    t4.codec = E2;
                  }
                  break;
                case 8:
                  a2 = true, t4.pps = [i5.data];
                  break;
                case 9:
                  a2 = true, t4.audFound = true, l2 && s3.pushAccessUnit(l2, t4), l2 = s3.VideoSample = s3.createVideoSample(false, r4.pts, r4.dts, "");
                  break;
                case 12:
                  a2 = true;
                  break;
                default:
                  a2 = false, l2 && (l2.debug += "unknown NAL " + i5.type + " ");
              }
              l2 && a2 && l2.units.push(i5);
            }), i4 && l2 && (this.pushAccessUnit(l2, t4), this.VideoSample = null);
          }, r3.parseAVCNALu = function(t4, e3) {
            var r4, i4, n2 = e3.byteLength, a2 = t4.naluState || 0, s3 = a2, o2 = [], l2 = 0, u2 = -1, h2 = 0;
            for (-1 === a2 && (u2 = 0, h2 = 31 & e3[0], a2 = 0, l2 = 1); l2 < n2; ) if (r4 = e3[l2++], a2) if (1 !== a2) if (r4) if (1 === r4) {
              if (i4 = l2 - a2 - 1, u2 >= 0) {
                var d2 = { data: e3.subarray(u2, i4), type: h2 };
                o2.push(d2);
              } else {
                var c2 = this.getLastNalUnit(t4.samples);
                c2 && (s3 && l2 <= 4 - s3 && c2.state && (c2.data = c2.data.subarray(0, c2.data.byteLength - s3)), i4 > 0 && (c2.data = Wt(c2.data, e3.subarray(0, i4)), c2.state = 0));
              }
              l2 < n2 ? (u2 = l2, h2 = 31 & e3[l2], a2 = 0) : a2 = -1;
            } else a2 = 0;
            else a2 = 3;
            else a2 = r4 ? 0 : 2;
            else a2 = r4 ? 0 : 1;
            if (u2 >= 0 && a2 >= 0) {
              var f3 = { data: e3.subarray(u2, n2), type: h2, state: a2 };
              o2.push(f3);
            }
            if (0 === o2.length) {
              var g2 = this.getLastNalUnit(t4.samples);
              g2 && (g2.data = Wt(g2.data, e3));
            }
            return t4.naluState = a2, o2;
          }, e2;
        }(on), hn = function() {
          function t3(t4, e3, r3) {
            this.keyData = void 0, this.decrypter = void 0, this.keyData = r3, this.decrypter = new pi(e3, { removePKCS7Padding: false });
          }
          var e2 = t3.prototype;
          return e2.decryptBuffer = function(t4) {
            return this.decrypter.decrypt(t4, this.keyData.key.buffer, this.keyData.iv.buffer);
          }, e2.decryptAacSample = function(t4, e3, r3) {
            var i4 = this, n2 = t4[e3].unit;
            if (!(n2.length <= 16)) {
              var a2 = n2.subarray(16, n2.length - n2.length % 16), s3 = a2.buffer.slice(a2.byteOffset, a2.byteOffset + a2.length);
              this.decryptBuffer(s3).then(function(a3) {
                var s4 = new Uint8Array(a3);
                n2.set(s4, 16), i4.decrypter.isSync() || i4.decryptAacSamples(t4, e3 + 1, r3);
              });
            }
          }, e2.decryptAacSamples = function(t4, e3, r3) {
            for (; ; e3++) {
              if (e3 >= t4.length) return void r3();
              if (!(t4[e3].unit.length < 32 || (this.decryptAacSample(t4, e3, r3), this.decrypter.isSync()))) return;
            }
          }, e2.getAvcEncryptedData = function(t4) {
            for (var e3 = 16 * Math.floor((t4.length - 48) / 160) + 16, r3 = new Int8Array(e3), i4 = 0, n2 = 32; n2 < t4.length - 16; n2 += 160, i4 += 16) r3.set(t4.subarray(n2, n2 + 16), i4);
            return r3;
          }, e2.getAvcDecryptedUnit = function(t4, e3) {
            for (var r3 = new Uint8Array(e3), i4 = 0, n2 = 32; n2 < t4.length - 16; n2 += 160, i4 += 16) t4.set(r3.subarray(i4, i4 + 16), n2);
            return t4;
          }, e2.decryptAvcSample = function(t4, e3, r3, i4, n2) {
            var a2 = this, s3 = zt(n2.data), o2 = this.getAvcEncryptedData(s3);
            this.decryptBuffer(o2.buffer).then(function(o3) {
              n2.data = a2.getAvcDecryptedUnit(s3, o3), a2.decrypter.isSync() || a2.decryptAvcSamples(t4, e3, r3 + 1, i4);
            });
          }, e2.decryptAvcSamples = function(t4, e3, r3, i4) {
            if (t4 instanceof Uint8Array) throw new Error("Cannot decrypt samples of type Uint8Array");
            for (; ; e3++, r3 = 0) {
              if (e3 >= t4.length) return void i4();
              for (var n2 = t4[e3].units; !(r3 >= n2.length); r3++) {
                var a2 = n2[r3];
                if (!(a2.data.length <= 48 || 1 !== a2.type && 5 !== a2.type || (this.decryptAvcSample(t4, e3, r3, i4, a2), this.decrypter.isSync()))) return;
              }
            }
          }, t3;
        }(), dn = 188, cn = function() {
          function t3(t4, e3, r3) {
            this.observer = void 0, this.config = void 0, this.typeSupported = void 0, this.sampleAes = null, this.pmtParsed = false, this.audioCodec = void 0, this.videoCodec = void 0, this._duration = 0, this._pmtId = -1, this._videoTrack = void 0, this._audioTrack = void 0, this._id3Track = void 0, this._txtTrack = void 0, this.aacOverFlow = null, this.remainderData = null, this.videoParser = void 0, this.observer = t4, this.config = e3, this.typeSupported = r3, this.videoParser = new un();
          }
          t3.probe = function(e3) {
            var r3 = t3.syncOffset(e3);
            return r3 > 0 && w.warn("MPEG2-TS detected but first sync word found @ offset " + r3), -1 !== r3;
          }, t3.syncOffset = function(t4) {
            for (var e3 = t4.length, r3 = Math.min(940, e3 - dn) + 1, i4 = 0; i4 < r3; ) {
              for (var n2 = false, a2 = -1, s3 = 0, o2 = i4; o2 < e3; o2 += dn) {
                if (71 !== t4[o2] || e3 - o2 !== dn && 71 !== t4[o2 + dn]) {
                  if (s3) return -1;
                  break;
                }
                if (s3++, -1 === a2 && 0 !== (a2 = o2) && (r3 = Math.min(a2 + 18612, t4.length - dn) + 1), n2 || (n2 = 0 === fn(t4, o2)), n2 && s3 > 1 && (0 === a2 && s3 > 2 || o2 + dn > r3)) return a2;
              }
              i4++;
            }
            return -1;
          }, t3.createTrack = function(t4, e3) {
            return { container: "video" === t4 || "audio" === t4 ? "video/mp2t" : void 0, type: t4, id: wt[t4], pid: -1, inputTimeScale: 9e4, sequenceNumber: 0, samples: [], dropped: 0, duration: "audio" === t4 ? e3 : void 0 };
          };
          var e2 = t3.prototype;
          return e2.resetInitSegment = function(e3, r3, i4, n2) {
            this.pmtParsed = false, this._pmtId = -1, this._videoTrack = t3.createTrack("video"), this._audioTrack = t3.createTrack("audio", n2), this._id3Track = t3.createTrack("id3"), this._txtTrack = t3.createTrack("text"), this._audioTrack.segmentCodec = "aac", this.aacOverFlow = null, this.remainderData = null, this.audioCodec = r3, this.videoCodec = i4, this._duration = n2;
          }, e2.resetTimeStamp = function() {
          }, e2.resetContiguity = function() {
            var t4 = this._audioTrack, e3 = this._videoTrack, r3 = this._id3Track;
            t4 && (t4.pesData = null), e3 && (e3.pesData = null), r3 && (r3.pesData = null), this.aacOverFlow = null, this.remainderData = null;
          }, e2.demux = function(e3, r3, i4, n2) {
            var a2;
            void 0 === i4 && (i4 = false), void 0 === n2 && (n2 = false), i4 || (this.sampleAes = null);
            var s3 = this._videoTrack, o2 = this._audioTrack, l2 = this._id3Track, u2 = this._txtTrack, h2 = s3.pid, d2 = s3.pesData, c2 = o2.pid, f3 = l2.pid, g2 = o2.pesData, v2 = l2.pesData, m2 = null, p2 = this.pmtParsed, y2 = this._pmtId, E2 = e3.length;
            if (this.remainderData && (E2 = (e3 = Wt(this.remainderData, e3)).length, this.remainderData = null), E2 < dn && !n2) return this.remainderData = e3, { audioTrack: o2, videoTrack: s3, id3Track: l2, textTrack: u2 };
            var T2 = Math.max(0, t3.syncOffset(e3));
            (E2 -= (E2 - T2) % dn) < e3.byteLength && !n2 && (this.remainderData = new Uint8Array(e3.buffer, E2, e3.buffer.byteLength - E2));
            for (var S2 = 0, L2 = T2; L2 < E2; L2 += dn) if (71 === e3[L2]) {
              var A2 = !!(64 & e3[L2 + 1]), R2 = fn(e3, L2), b2 = void 0;
              if ((48 & e3[L2 + 3]) >> 4 > 1) {
                if ((b2 = L2 + 5 + e3[L2 + 4]) === L2 + dn) continue;
              } else b2 = L2 + 4;
              switch (R2) {
                case h2:
                  A2 && (d2 && (a2 = yn(d2)) && this.videoParser.parseAVCPES(s3, u2, a2, false, this._duration), d2 = { data: [], size: 0 }), d2 && (d2.data.push(e3.subarray(b2, L2 + dn)), d2.size += L2 + dn - b2);
                  break;
                case c2:
                  if (A2) {
                    if (g2 && (a2 = yn(g2))) switch (o2.segmentCodec) {
                      case "aac":
                        this.parseAACPES(o2, a2);
                        break;
                      case "mp3":
                        this.parseMPEGPES(o2, a2);
                        break;
                      case "ac3":
                        this.parseAC3PES(o2, a2);
                    }
                    g2 = { data: [], size: 0 };
                  }
                  g2 && (g2.data.push(e3.subarray(b2, L2 + dn)), g2.size += L2 + dn - b2);
                  break;
                case f3:
                  A2 && (v2 && (a2 = yn(v2)) && this.parseID3PES(l2, a2), v2 = { data: [], size: 0 }), v2 && (v2.data.push(e3.subarray(b2, L2 + dn)), v2.size += L2 + dn - b2);
                  break;
                case 0:
                  A2 && (b2 += e3[b2] + 1), y2 = this._pmtId = gn(e3, b2);
                  break;
                case y2:
                  A2 && (b2 += e3[b2] + 1);
                  var k2 = vn(e3, b2, this.typeSupported, i4, this.observer);
                  (h2 = k2.videoPid) > 0 && (s3.pid = h2, s3.segmentCodec = k2.segmentVideoCodec), (c2 = k2.audioPid) > 0 && (o2.pid = c2, o2.segmentCodec = k2.segmentAudioCodec), (f3 = k2.id3Pid) > 0 && (l2.pid = f3), null === m2 || p2 || (w.warn("MPEG-TS PMT found at " + L2 + " after unknown PID '" + m2 + "'. Backtracking to sync byte @" + T2 + " to parse all TS packets."), m2 = null, L2 = T2 - 188), p2 = this.pmtParsed = true;
                  break;
                case 17:
                case 8191:
                  break;
                default:
                  m2 = R2;
              }
            } else S2++;
            S2 > 0 && mn(this.observer, new Error("Found " + S2 + " TS packet/s that do not start with 0x47")), s3.pesData = d2, o2.pesData = g2, l2.pesData = v2;
            var D2 = { audioTrack: o2, videoTrack: s3, id3Track: l2, textTrack: u2 };
            return n2 && this.extractRemainingSamples(D2), D2;
          }, e2.flush = function() {
            var t4, e3 = this.remainderData;
            return this.remainderData = null, t4 = e3 ? this.demux(e3, -1, false, true) : { videoTrack: this._videoTrack, audioTrack: this._audioTrack, id3Track: this._id3Track, textTrack: this._txtTrack }, this.extractRemainingSamples(t4), this.sampleAes ? this.decrypt(t4, this.sampleAes) : t4;
          }, e2.extractRemainingSamples = function(t4) {
            var e3, r3 = t4.audioTrack, i4 = t4.videoTrack, n2 = t4.id3Track, a2 = t4.textTrack, s3 = i4.pesData, o2 = r3.pesData, l2 = n2.pesData;
            if (s3 && (e3 = yn(s3)) ? (this.videoParser.parseAVCPES(i4, a2, e3, true, this._duration), i4.pesData = null) : i4.pesData = s3, o2 && (e3 = yn(o2))) {
              switch (r3.segmentCodec) {
                case "aac":
                  this.parseAACPES(r3, e3);
                  break;
                case "mp3":
                  this.parseMPEGPES(r3, e3);
                  break;
                case "ac3":
                  this.parseAC3PES(r3, e3);
              }
              r3.pesData = null;
            } else null != o2 && o2.size && w.log("last AAC PES packet truncated,might overlap between fragments"), r3.pesData = o2;
            l2 && (e3 = yn(l2)) ? (this.parseID3PES(n2, e3), n2.pesData = null) : n2.pesData = l2;
          }, e2.demuxSampleAes = function(t4, e3, r3) {
            var i4 = this.demux(t4, r3, true, !this.config.progressive), n2 = this.sampleAes = new hn(this.observer, this.config, e3);
            return this.decrypt(i4, n2);
          }, e2.decrypt = function(t4, e3) {
            return new Promise(function(r3) {
              var i4 = t4.audioTrack, n2 = t4.videoTrack;
              i4.samples && "aac" === i4.segmentCodec ? e3.decryptAacSamples(i4.samples, 0, function() {
                n2.samples ? e3.decryptAvcSamples(n2.samples, 0, 0, function() {
                  r3(t4);
                }) : r3(t4);
              }) : n2.samples && e3.decryptAvcSamples(n2.samples, 0, 0, function() {
                r3(t4);
              });
            });
          }, e2.destroy = function() {
            this._duration = 0;
          }, e2.parseAACPES = function(t4, e3) {
            var r3, i4, n2, a2 = 0, s3 = this.aacOverFlow, o2 = e3.data;
            if (s3) {
              this.aacOverFlow = null;
              var l2 = s3.missing, u2 = s3.sample.unit.byteLength;
              if (-1 === l2) o2 = Wt(s3.sample.unit, o2);
              else {
                var h2 = u2 - l2;
                s3.sample.unit.set(o2.subarray(0, l2), h2), t4.samples.push(s3.sample), a2 = s3.missing;
              }
            }
            for (r3 = a2, i4 = o2.length; r3 < i4 - 1 && !Bi(o2, r3); r3++) ;
            if (r3 !== a2) {
              var d2, c2 = r3 < i4 - 1;
              if (d2 = c2 ? "AAC PES did not start with ADTS header,offset:" + r3 : "No ADTS header found in AAC PES", mn(this.observer, new Error(d2), c2), !c2) return;
            }
            if (Ki(t4, this.observer, o2, r3, this.audioCodec), void 0 !== e3.pts) n2 = e3.pts;
            else {
              if (!s3) return void w.warn("[tsdemuxer]: AAC PES unknown PTS");
              var f3 = Hi(t4.samplerate);
              n2 = s3.sample.pts + f3;
            }
            for (var g2, v2 = 0; r3 < i4; ) {
              if (r3 += (g2 = Vi(t4, o2, r3, n2, v2)).length, g2.missing) {
                this.aacOverFlow = g2;
                break;
              }
              for (v2++; r3 < i4 - 1 && !Bi(o2, r3); r3++) ;
            }
          }, e2.parseMPEGPES = function(t4, e3) {
            var r3 = e3.data, i4 = r3.length, n2 = 0, a2 = 0, s3 = e3.pts;
            if (void 0 !== s3) for (; a2 < i4; ) if ($i(r3, a2)) {
              var o2 = zi(t4, r3, a2, s3, n2);
              if (!o2) break;
              a2 += o2.length, n2++;
            } else a2++;
            else w.warn("[tsdemuxer]: MPEG PES unknown PTS");
          }, e2.parseAC3PES = function(t4, e3) {
            var r3 = e3.data, i4 = e3.pts;
            if (void 0 !== i4) for (var n2, a2 = r3.length, s3 = 0, o2 = 0; o2 < a2 && (n2 = sn(t4, r3, o2, i4, s3++)) > 0; ) o2 += n2;
            else w.warn("[tsdemuxer]: AC3 PES unknown PTS");
          }, e2.parseID3PES = function(t4, e3) {
            if (void 0 !== e3.pts) {
              var r3 = o({}, e3, { type: this._videoTrack ? qe : We, duration: Number.POSITIVE_INFINITY });
              t4.samples.push(r3);
            } else w.warn("[tsdemuxer]: ID3 PES unknown PTS");
          }, t3;
        }();
        function fn(t3, e2) {
          return ((31 & t3[e2 + 1]) << 8) + t3[e2 + 2];
        }
        function gn(t3, e2) {
          return (31 & t3[e2 + 10]) << 8 | t3[e2 + 11];
        }
        function vn(t3, e2, r3, i4, n2) {
          var a2 = { audioPid: -1, videoPid: -1, id3Pid: -1, segmentVideoCodec: "avc", segmentAudioCodec: "aac" }, s3 = e2 + 3 + ((15 & t3[e2 + 1]) << 8 | t3[e2 + 2]) - 4;
          for (e2 += 12 + ((15 & t3[e2 + 10]) << 8 | t3[e2 + 11]); e2 < s3; ) {
            var o2 = fn(t3, e2), l2 = (15 & t3[e2 + 3]) << 8 | t3[e2 + 4];
            switch (t3[e2]) {
              case 207:
                if (!i4) {
                  pn("ADTS AAC");
                  break;
                }
              case 15:
                -1 === a2.audioPid && (a2.audioPid = o2);
                break;
              case 21:
                -1 === a2.id3Pid && (a2.id3Pid = o2);
                break;
              case 219:
                if (!i4) {
                  pn("H.264");
                  break;
                }
              case 27:
                -1 === a2.videoPid && (a2.videoPid = o2, a2.segmentVideoCodec = "avc");
                break;
              case 3:
              case 4:
                r3.mpeg || r3.mp3 ? -1 === a2.audioPid && (a2.audioPid = o2, a2.segmentAudioCodec = "mp3") : w.log("MPEG audio found, not supported in this browser");
                break;
              case 193:
                if (!i4) {
                  pn("AC-3");
                  break;
                }
              case 129:
                r3.ac3 ? -1 === a2.audioPid && (a2.audioPid = o2, a2.segmentAudioCodec = "ac3") : w.log("AC-3 audio found, not supported in this browser");
                break;
              case 6:
                if (-1 === a2.audioPid && l2 > 0) for (var u2 = e2 + 5, h2 = l2; h2 > 2; ) {
                  106 === t3[u2] && (true !== r3.ac3 ? w.log("AC-3 audio found, not supported in this browser for now") : (a2.audioPid = o2, a2.segmentAudioCodec = "ac3"));
                  var d2 = t3[u2 + 1] + 2;
                  u2 += d2, h2 -= d2;
                }
                break;
              case 194:
              case 135:
                return mn(n2, new Error("Unsupported EC-3 in M2TS found")), a2;
              case 36:
                return mn(n2, new Error("Unsupported HEVC in M2TS found")), a2;
            }
            e2 += l2 + 5;
          }
          return a2;
        }
        function mn(t3, e2, r3) {
          w.warn("parsing error: " + e2.message), t3.emit(S.ERROR, S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_PARSING_ERROR, fatal: false, levelRetry: r3, error: e2, reason: e2.message });
        }
        function pn(t3) {
          w.log(t3 + " with AES-128-CBC encryption found in unencrypted stream");
        }
        function yn(t3) {
          var e2, r3, i4, n2, a2, s3 = 0, o2 = t3.data;
          if (!t3 || 0 === t3.size) return null;
          for (; o2[0].length < 19 && o2.length > 1; ) o2[0] = Wt(o2[0], o2[1]), o2.splice(1, 1);
          if (1 === ((e2 = o2[0])[0] << 16) + (e2[1] << 8) + e2[2]) {
            if ((r3 = (e2[4] << 8) + e2[5]) && r3 > t3.size - 6) return null;
            var l2 = e2[7];
            192 & l2 && (n2 = 536870912 * (14 & e2[9]) + 4194304 * (255 & e2[10]) + 16384 * (254 & e2[11]) + 128 * (255 & e2[12]) + (254 & e2[13]) / 2, 64 & l2 ? n2 - (a2 = 536870912 * (14 & e2[14]) + 4194304 * (255 & e2[15]) + 16384 * (254 & e2[16]) + 128 * (255 & e2[17]) + (254 & e2[18]) / 2) > 54e5 && (w.warn(Math.round((n2 - a2) / 9e4) + "s delta between PTS and DTS, align them"), n2 = a2) : a2 = n2);
            var u2 = (i4 = e2[8]) + 9;
            if (t3.size <= u2) return null;
            t3.size -= u2;
            for (var h2 = new Uint8Array(t3.size), d2 = 0, c2 = o2.length; d2 < c2; d2++) {
              var f3 = (e2 = o2[d2]).byteLength;
              if (u2) {
                if (u2 > f3) {
                  u2 -= f3;
                  continue;
                }
                e2 = e2.subarray(u2), f3 -= u2, u2 = 0;
              }
              h2.set(e2, s3), s3 += f3;
            }
            return r3 && (r3 -= i4 + 3), { data: h2, pts: n2, dts: a2, len: r3 };
          }
          return null;
        }
        var En = function(t3) {
          function e2() {
            return t3.apply(this, arguments) || this;
          }
          l(e2, t3);
          var r3 = e2.prototype;
          return r3.resetInitSegment = function(e3, r4, i4, n2) {
            t3.prototype.resetInitSegment.call(this, e3, r4, i4, n2), this._audioTrack = { container: "audio/mpeg", type: "audio", id: 2, pid: -1, sequenceNumber: 0, segmentCodec: "mp3", samples: [], manifestCodec: r4, duration: n2, inputTimeScale: 9e4, dropped: 0 };
          }, e2.probe = function(t4) {
            if (!t4) return false;
            var e3 = ct(t4, 0), r4 = (null == e3 ? void 0 : e3.length) || 0;
            if (e3 && 11 === t4[r4] && 119 === t4[r4 + 1] && void 0 !== vt(e3) && nn(t4, r4) <= 16) return false;
            for (var i4 = t4.length; r4 < i4; r4++) if (Zi(t4, r4)) return w.log("MPEG Audio sync word found !"), true;
            return false;
          }, r3.canParse = function(t4, e3) {
            return function(t5, e4) {
              return Ji(t5, e4) && 4 <= t5.length - e4;
            }(t4, e3);
          }, r3.appendFrame = function(t4, e3, r4) {
            if (null !== this.basePTS) return zi(t4, e3, r4, this.basePTS, this.frameIndex);
          }, e2;
        }(Fi), Tn = function() {
          function t3() {
          }
          return t3.getSilentFrame = function(t4, e2) {
            if ("mp4a.40.2" === t4) {
              if (1 === e2) return new Uint8Array([0, 200, 0, 128, 35, 128]);
              if (2 === e2) return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
              if (3 === e2) return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]);
              if (4 === e2) return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]);
              if (5 === e2) return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]);
              if (6 === e2) return new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224]);
            } else {
              if (1 === e2) return new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
              if (2 === e2) return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
              if (3 === e2) return new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]);
            }
          }, t3;
        }(), Sn = Math.pow(2, 32) - 1, Ln = function() {
          function t3() {
          }
          return t3.init = function() {
            var e2;
            for (e2 in t3.types = { avc1: [], avcC: [], btrt: [], dinf: [], dref: [], esds: [], ftyp: [], hdlr: [], mdat: [], mdhd: [], mdia: [], mfhd: [], minf: [], moof: [], moov: [], mp4a: [], ".mp3": [], dac3: [], "ac-3": [], mvex: [], mvhd: [], pasp: [], sdtp: [], stbl: [], stco: [], stsc: [], stsd: [], stsz: [], stts: [], tfdt: [], tfhd: [], traf: [], trak: [], trun: [], trex: [], tkhd: [], vmhd: [], smhd: [] }, t3.types) t3.types.hasOwnProperty(e2) && (t3.types[e2] = [e2.charCodeAt(0), e2.charCodeAt(1), e2.charCodeAt(2), e2.charCodeAt(3)]);
            var r3 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0]), i4 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0]);
            t3.HDLR_TYPES = { video: r3, audio: i4 };
            var n2 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1]), a2 = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
            t3.STTS = t3.STSC = t3.STCO = a2, t3.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), t3.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]), t3.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]), t3.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]);
            var s3 = new Uint8Array([105, 115, 111, 109]), o2 = new Uint8Array([97, 118, 99, 49]), l2 = new Uint8Array([0, 0, 0, 1]);
            t3.FTYP = t3.box(t3.types.ftyp, s3, l2, s3, o2), t3.DINF = t3.box(t3.types.dinf, t3.box(t3.types.dref, n2));
          }, t3.box = function(t4) {
            for (var e2 = 8, r3 = arguments.length, i4 = new Array(r3 > 1 ? r3 - 1 : 0), n2 = 1; n2 < r3; n2++) i4[n2 - 1] = arguments[n2];
            for (var a2 = i4.length, s3 = a2; a2--; ) e2 += i4[a2].byteLength;
            var o2 = new Uint8Array(e2);
            for (o2[0] = e2 >> 24 & 255, o2[1] = e2 >> 16 & 255, o2[2] = e2 >> 8 & 255, o2[3] = 255 & e2, o2.set(t4, 4), a2 = 0, e2 = 8; a2 < s3; a2++) o2.set(i4[a2], e2), e2 += i4[a2].byteLength;
            return o2;
          }, t3.hdlr = function(e2) {
            return t3.box(t3.types.hdlr, t3.HDLR_TYPES[e2]);
          }, t3.mdat = function(e2) {
            return t3.box(t3.types.mdat, e2);
          }, t3.mdhd = function(e2, r3) {
            r3 *= e2;
            var i4 = Math.floor(r3 / (Sn + 1)), n2 = Math.floor(r3 % (Sn + 1));
            return t3.box(t3.types.mdhd, new Uint8Array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, e2 >> 24 & 255, e2 >> 16 & 255, e2 >> 8 & 255, 255 & e2, i4 >> 24, i4 >> 16 & 255, i4 >> 8 & 255, 255 & i4, n2 >> 24, n2 >> 16 & 255, n2 >> 8 & 255, 255 & n2, 85, 196, 0, 0]));
          }, t3.mdia = function(e2) {
            return t3.box(t3.types.mdia, t3.mdhd(e2.timescale, e2.duration), t3.hdlr(e2.type), t3.minf(e2));
          }, t3.mfhd = function(e2) {
            return t3.box(t3.types.mfhd, new Uint8Array([0, 0, 0, 0, e2 >> 24, e2 >> 16 & 255, e2 >> 8 & 255, 255 & e2]));
          }, t3.minf = function(e2) {
            return "audio" === e2.type ? t3.box(t3.types.minf, t3.box(t3.types.smhd, t3.SMHD), t3.DINF, t3.stbl(e2)) : t3.box(t3.types.minf, t3.box(t3.types.vmhd, t3.VMHD), t3.DINF, t3.stbl(e2));
          }, t3.moof = function(e2, r3, i4) {
            return t3.box(t3.types.moof, t3.mfhd(e2), t3.traf(i4, r3));
          }, t3.moov = function(e2) {
            for (var r3 = e2.length, i4 = []; r3--; ) i4[r3] = t3.trak(e2[r3]);
            return t3.box.apply(null, [t3.types.moov, t3.mvhd(e2[0].timescale, e2[0].duration)].concat(i4).concat(t3.mvex(e2)));
          }, t3.mvex = function(e2) {
            for (var r3 = e2.length, i4 = []; r3--; ) i4[r3] = t3.trex(e2[r3]);
            return t3.box.apply(null, [t3.types.mvex].concat(i4));
          }, t3.mvhd = function(e2, r3) {
            r3 *= e2;
            var i4 = Math.floor(r3 / (Sn + 1)), n2 = Math.floor(r3 % (Sn + 1)), a2 = new Uint8Array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, e2 >> 24 & 255, e2 >> 16 & 255, e2 >> 8 & 255, 255 & e2, i4 >> 24, i4 >> 16 & 255, i4 >> 8 & 255, 255 & i4, n2 >> 24, n2 >> 16 & 255, n2 >> 8 & 255, 255 & n2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255]);
            return t3.box(t3.types.mvhd, a2);
          }, t3.sdtp = function(e2) {
            var r3, i4, n2 = e2.samples || [], a2 = new Uint8Array(4 + n2.length);
            for (r3 = 0; r3 < n2.length; r3++) i4 = n2[r3].flags, a2[r3 + 4] = i4.dependsOn << 4 | i4.isDependedOn << 2 | i4.hasRedundancy;
            return t3.box(t3.types.sdtp, a2);
          }, t3.stbl = function(e2) {
            return t3.box(t3.types.stbl, t3.stsd(e2), t3.box(t3.types.stts, t3.STTS), t3.box(t3.types.stsc, t3.STSC), t3.box(t3.types.stsz, t3.STSZ), t3.box(t3.types.stco, t3.STCO));
          }, t3.avc1 = function(e2) {
            var r3, i4, n2, a2 = [], s3 = [];
            for (r3 = 0; r3 < e2.sps.length; r3++) n2 = (i4 = e2.sps[r3]).byteLength, a2.push(n2 >>> 8 & 255), a2.push(255 & n2), a2 = a2.concat(Array.prototype.slice.call(i4));
            for (r3 = 0; r3 < e2.pps.length; r3++) n2 = (i4 = e2.pps[r3]).byteLength, s3.push(n2 >>> 8 & 255), s3.push(255 & n2), s3 = s3.concat(Array.prototype.slice.call(i4));
            var o2 = t3.box(t3.types.avcC, new Uint8Array([1, a2[3], a2[4], a2[5], 255, 224 | e2.sps.length].concat(a2).concat([e2.pps.length]).concat(s3))), l2 = e2.width, u2 = e2.height, h2 = e2.pixelRatio[0], d2 = e2.pixelRatio[1];
            return t3.box(t3.types.avc1, new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, l2 >> 8 & 255, 255 & l2, u2 >> 8 & 255, 255 & u2, 0, 72, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 1, 18, 100, 97, 105, 108, 121, 109, 111, 116, 105, 111, 110, 47, 104, 108, 115, 46, 106, 115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 17, 17]), o2, t3.box(t3.types.btrt, new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192])), t3.box(t3.types.pasp, new Uint8Array([h2 >> 24, h2 >> 16 & 255, h2 >> 8 & 255, 255 & h2, d2 >> 24, d2 >> 16 & 255, d2 >> 8 & 255, 255 & d2])));
          }, t3.esds = function(t4) {
            var e2 = t4.config.length;
            return new Uint8Array([0, 0, 0, 0, 3, 23 + e2, 0, 1, 0, 4, 15 + e2, 64, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5].concat([e2]).concat(t4.config).concat([6, 1, 2]));
          }, t3.audioStsd = function(t4) {
            var e2 = t4.samplerate;
            return new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4.channelCount, 0, 16, 0, 0, 0, 0, e2 >> 8 & 255, 255 & e2, 0, 0]);
          }, t3.mp4a = function(e2) {
            return t3.box(t3.types.mp4a, t3.audioStsd(e2), t3.box(t3.types.esds, t3.esds(e2)));
          }, t3.mp3 = function(e2) {
            return t3.box(t3.types[".mp3"], t3.audioStsd(e2));
          }, t3.ac3 = function(e2) {
            return t3.box(t3.types["ac-3"], t3.audioStsd(e2), t3.box(t3.types.dac3, e2.config));
          }, t3.stsd = function(e2) {
            return "audio" === e2.type ? "mp3" === e2.segmentCodec && "mp3" === e2.codec ? t3.box(t3.types.stsd, t3.STSD, t3.mp3(e2)) : "ac3" === e2.segmentCodec ? t3.box(t3.types.stsd, t3.STSD, t3.ac3(e2)) : t3.box(t3.types.stsd, t3.STSD, t3.mp4a(e2)) : t3.box(t3.types.stsd, t3.STSD, t3.avc1(e2));
          }, t3.tkhd = function(e2) {
            var r3 = e2.id, i4 = e2.duration * e2.timescale, n2 = e2.width, a2 = e2.height, s3 = Math.floor(i4 / (Sn + 1)), o2 = Math.floor(i4 % (Sn + 1));
            return t3.box(t3.types.tkhd, new Uint8Array([1, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, r3 >> 24 & 255, r3 >> 16 & 255, r3 >> 8 & 255, 255 & r3, 0, 0, 0, 0, s3 >> 24, s3 >> 16 & 255, s3 >> 8 & 255, 255 & s3, o2 >> 24, o2 >> 16 & 255, o2 >> 8 & 255, 255 & o2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, n2 >> 8 & 255, 255 & n2, 0, 0, a2 >> 8 & 255, 255 & a2, 0, 0]));
          }, t3.traf = function(e2, r3) {
            var i4 = t3.sdtp(e2), n2 = e2.id, a2 = Math.floor(r3 / (Sn + 1)), s3 = Math.floor(r3 % (Sn + 1));
            return t3.box(t3.types.traf, t3.box(t3.types.tfhd, new Uint8Array([0, 0, 0, 0, n2 >> 24, n2 >> 16 & 255, n2 >> 8 & 255, 255 & n2])), t3.box(t3.types.tfdt, new Uint8Array([1, 0, 0, 0, a2 >> 24, a2 >> 16 & 255, a2 >> 8 & 255, 255 & a2, s3 >> 24, s3 >> 16 & 255, s3 >> 8 & 255, 255 & s3])), t3.trun(e2, i4.length + 16 + 20 + 8 + 16 + 8 + 8), i4);
          }, t3.trak = function(e2) {
            return e2.duration = e2.duration || 4294967295, t3.box(t3.types.trak, t3.tkhd(e2), t3.mdia(e2));
          }, t3.trex = function(e2) {
            var r3 = e2.id;
            return t3.box(t3.types.trex, new Uint8Array([0, 0, 0, 0, r3 >> 24, r3 >> 16 & 255, r3 >> 8 & 255, 255 & r3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1]));
          }, t3.trun = function(e2, r3) {
            var i4, n2, a2, s3, o2, l2, u2 = e2.samples || [], h2 = u2.length, d2 = 12 + 16 * h2, c2 = new Uint8Array(d2);
            for (r3 += 8 + d2, c2.set(["video" === e2.type ? 1 : 0, 0, 15, 1, h2 >>> 24 & 255, h2 >>> 16 & 255, h2 >>> 8 & 255, 255 & h2, r3 >>> 24 & 255, r3 >>> 16 & 255, r3 >>> 8 & 255, 255 & r3], 0), i4 = 0; i4 < h2; i4++) a2 = (n2 = u2[i4]).duration, s3 = n2.size, o2 = n2.flags, l2 = n2.cts, c2.set([a2 >>> 24 & 255, a2 >>> 16 & 255, a2 >>> 8 & 255, 255 & a2, s3 >>> 24 & 255, s3 >>> 16 & 255, s3 >>> 8 & 255, 255 & s3, o2.isLeading << 2 | o2.dependsOn, o2.isDependedOn << 6 | o2.hasRedundancy << 4 | o2.paddingValue << 1 | o2.isNonSync, 61440 & o2.degradPrio, 15 & o2.degradPrio, l2 >>> 24 & 255, l2 >>> 16 & 255, l2 >>> 8 & 255, 255 & l2], 12 + 16 * i4);
            return t3.box(t3.types.trun, c2);
          }, t3.initSegment = function(e2) {
            t3.types || t3.init();
            var r3 = t3.moov(e2);
            return Wt(t3.FTYP, r3);
          }, t3;
        }();
        Ln.types = void 0, Ln.HDLR_TYPES = void 0, Ln.STTS = void 0, Ln.STSC = void 0, Ln.STCO = void 0, Ln.STSZ = void 0, Ln.VMHD = void 0, Ln.SMHD = void 0, Ln.STSD = void 0, Ln.FTYP = void 0, Ln.DINF = void 0;
        var An = 9e4;
        function Rn(t3, e2, r3, i4) {
          void 0 === r3 && (r3 = 1), void 0 === i4 && (i4 = false);
          var n2 = t3 * e2 * r3;
          return i4 ? Math.round(n2) : n2;
        }
        function bn2(t3, e2) {
          return Rn(t3, 1e3, 1 / An, e2);
        }
        var kn = null, Dn = null, In = function() {
          function t3(t4, e3, r3, i4) {
            if (this.observer = void 0, this.config = void 0, this.typeSupported = void 0, this.ISGenerated = false, this._initPTS = null, this._initDTS = null, this.nextAvcDts = null, this.nextAudioPts = null, this.videoSampleDuration = null, this.isAudioContiguous = false, this.isVideoContiguous = false, this.videoTrackConfig = void 0, this.observer = t4, this.config = e3, this.typeSupported = r3, this.ISGenerated = false, null === kn) {
              var n2 = (navigator.userAgent || "").match(/Chrome\/(\d+)/i);
              kn = n2 ? parseInt(n2[1]) : 0;
            }
            if (null === Dn) {
              var a2 = navigator.userAgent.match(/Safari\/(\d+)/i);
              Dn = a2 ? parseInt(a2[1]) : 0;
            }
          }
          var e2 = t3.prototype;
          return e2.destroy = function() {
            this.config = this.videoTrackConfig = this._initPTS = this._initDTS = null;
          }, e2.resetTimeStamp = function(t4) {
            w.log("[mp4-remuxer]: initPTS & initDTS reset"), this._initPTS = this._initDTS = t4;
          }, e2.resetNextTimestamp = function() {
            w.log("[mp4-remuxer]: reset next timestamp"), this.isVideoContiguous = false, this.isAudioContiguous = false;
          }, e2.resetInitSegment = function() {
            w.log("[mp4-remuxer]: ISGenerated flag reset"), this.ISGenerated = false, this.videoTrackConfig = void 0;
          }, e2.getVideoStartPts = function(t4) {
            var e3 = false, r3 = t4.reduce(function(t5, r4) {
              var i4 = r4.pts - t5;
              return i4 < -4294967296 ? (e3 = true, wn(t5, r4.pts)) : i4 > 0 ? t5 : r4.pts;
            }, t4[0].pts);
            return e3 && w.debug("PTS rollover detected"), r3;
          }, e2.remux = function(t4, e3, r3, i4, n2, a2, s3, o2) {
            var l2, u2, h2, d2, c2, f3, g2 = n2, v2 = n2, m2 = t4.pid > -1, p2 = e3.pid > -1, y2 = e3.samples.length, E2 = t4.samples.length > 0, T2 = s3 && y2 > 0 || y2 > 1;
            if ((!m2 || E2) && (!p2 || T2) || this.ISGenerated || s3) {
              if (this.ISGenerated) {
                var S2, L2, A2, R2, b2 = this.videoTrackConfig;
                !b2 || e3.width === b2.width && e3.height === b2.height && (null == (S2 = e3.pixelRatio) ? void 0 : S2[0]) === (null == (L2 = b2.pixelRatio) ? void 0 : L2[0]) && (null == (A2 = e3.pixelRatio) ? void 0 : A2[1]) === (null == (R2 = b2.pixelRatio) ? void 0 : R2[1]) || this.resetInitSegment();
              } else h2 = this.generateIS(t4, e3, n2, a2);
              var k2, D2 = this.isVideoContiguous, I2 = -1;
              if (T2 && (I2 = function(t5) {
                for (var e4 = 0; e4 < t5.length; e4++) if (t5[e4].key) return e4;
                return -1;
              }(e3.samples), !D2 && this.config.forceKeyFrameOnDiscontinuity)) if (f3 = true, I2 > 0) {
                w.warn("[mp4-remuxer]: Dropped " + I2 + " out of " + y2 + " video samples due to a missing keyframe");
                var C2 = this.getVideoStartPts(e3.samples);
                e3.samples = e3.samples.slice(I2), e3.dropped += I2, k2 = v2 += (e3.samples[0].pts - C2) / e3.inputTimeScale;
              } else -1 === I2 && (w.warn("[mp4-remuxer]: No keyframe found out of " + y2 + " video samples"), f3 = false);
              if (this.ISGenerated) {
                if (E2 && T2) {
                  var _2 = this.getVideoStartPts(e3.samples), x2 = (wn(t4.samples[0].pts, _2) - _2) / e3.inputTimeScale;
                  g2 += Math.max(0, x2), v2 += Math.max(0, -x2);
                }
                if (E2) {
                  if (t4.samplerate || (w.warn("[mp4-remuxer]: regenerate InitSegment as audio detected"), h2 = this.generateIS(t4, e3, n2, a2)), u2 = this.remuxAudio(t4, g2, this.isAudioContiguous, a2, p2 || T2 || o2 === Me ? v2 : void 0), T2) {
                    var P2 = u2 ? u2.endPTS - u2.startPTS : 0;
                    e3.inputTimeScale || (w.warn("[mp4-remuxer]: regenerate InitSegment as video detected"), h2 = this.generateIS(t4, e3, n2, a2)), l2 = this.remuxVideo(e3, v2, D2, P2);
                  }
                } else T2 && (l2 = this.remuxVideo(e3, v2, D2, 0));
                l2 && (l2.firstKeyFrame = I2, l2.independent = -1 !== I2, l2.firstKeyFramePTS = k2);
              }
            }
            return this.ISGenerated && this._initPTS && this._initDTS && (r3.samples.length && (c2 = Cn(r3, n2, this._initPTS, this._initDTS)), i4.samples.length && (d2 = _n(i4, n2, this._initPTS))), { audio: u2, video: l2, initSegment: h2, independent: f3, text: d2, id3: c2 };
          }, e2.generateIS = function(t4, e3, r3, i4) {
            var n2, a2, s3, o2 = t4.samples, l2 = e3.samples, u2 = this.typeSupported, h2 = {}, d2 = this._initPTS, c2 = !d2 || i4, f3 = "audio/mp4";
            if (c2 && (n2 = a2 = 1 / 0), t4.config && o2.length) {
              switch (t4.timescale = t4.samplerate, t4.segmentCodec) {
                case "mp3":
                  u2.mpeg ? (f3 = "audio/mpeg", t4.codec = "") : u2.mp3 && (t4.codec = "mp3");
                  break;
                case "ac3":
                  t4.codec = "ac-3";
              }
              h2.audio = { id: "audio", container: f3, codec: t4.codec, initSegment: "mp3" === t4.segmentCodec && u2.mpeg ? new Uint8Array(0) : Ln.initSegment([t4]), metadata: { channelCount: t4.channelCount } }, c2 && (s3 = t4.inputTimeScale, d2 && s3 === d2.timescale ? c2 = false : n2 = a2 = o2[0].pts - Math.round(s3 * r3));
            }
            if (e3.sps && e3.pps && l2.length) {
              if (e3.timescale = e3.inputTimeScale, h2.video = { id: "main", container: "video/mp4", codec: e3.codec, initSegment: Ln.initSegment([e3]), metadata: { width: e3.width, height: e3.height } }, c2) if (s3 = e3.inputTimeScale, d2 && s3 === d2.timescale) c2 = false;
              else {
                var g2 = this.getVideoStartPts(l2), v2 = Math.round(s3 * r3);
                a2 = Math.min(a2, wn(l2[0].dts, g2) - v2), n2 = Math.min(n2, g2 - v2);
              }
              this.videoTrackConfig = { width: e3.width, height: e3.height, pixelRatio: e3.pixelRatio };
            }
            if (Object.keys(h2).length) return this.ISGenerated = true, c2 ? (this._initPTS = { baseTime: n2, timescale: s3 }, this._initDTS = { baseTime: a2, timescale: s3 }) : n2 = s3 = void 0, { tracks: h2, initPTS: n2, timescale: s3 };
          }, e2.remuxVideo = function(t4, e3, r3, i4) {
            var n2, a2, s3 = t4.inputTimeScale, l2 = t4.samples, u2 = [], h2 = l2.length, d2 = this._initPTS, c2 = this.nextAvcDts, f3 = 8, g2 = this.videoSampleDuration, v2 = Number.POSITIVE_INFINITY, m2 = Number.NEGATIVE_INFINITY, p2 = false;
            if (!r3 || null === c2) {
              var y2 = e3 * s3, E2 = l2[0].pts - wn(l2[0].dts, l2[0].pts);
              kn && null !== c2 && Math.abs(y2 - E2 - c2) < 15e3 ? r3 = true : c2 = y2 - E2;
            }
            for (var T2 = d2.baseTime * s3 / d2.timescale, R2 = 0; R2 < h2; R2++) {
              var b2 = l2[R2];
              b2.pts = wn(b2.pts - T2, c2), b2.dts = wn(b2.dts - T2, c2), b2.dts < l2[R2 > 0 ? R2 - 1 : R2].dts && (p2 = true);
            }
            p2 && l2.sort(function(t5, e4) {
              var r4 = t5.dts - e4.dts, i5 = t5.pts - e4.pts;
              return r4 || i5;
            }), n2 = l2[0].dts;
            var k2 = (a2 = l2[l2.length - 1].dts) - n2, D2 = k2 ? Math.round(k2 / (h2 - 1)) : g2 || t4.inputTimeScale / 30;
            if (r3) {
              var I2 = n2 - c2, C2 = I2 > D2, _2 = I2 < -1;
              if ((C2 || _2) && (C2 ? w.warn("AVC: " + bn2(I2, true) + " ms (" + I2 + "dts) hole between fragments detected at " + e3.toFixed(3)) : w.warn("AVC: " + bn2(-I2, true) + " ms (" + I2 + "dts) overlapping between fragments detected at " + e3.toFixed(3)), !_2 || c2 >= l2[0].pts || kn)) {
                n2 = c2;
                var x2 = l2[0].pts - I2;
                if (C2) l2[0].dts = n2, l2[0].pts = x2;
                else for (var P2 = 0; P2 < l2.length && !(l2[P2].dts > x2); P2++) l2[P2].dts -= I2, l2[P2].pts -= I2;
                w.log("Video: Initial PTS/DTS adjusted: " + bn2(x2, true) + "/" + bn2(n2, true) + ", delta: " + bn2(I2, true) + " ms");
              }
            }
            for (var F2 = 0, M2 = 0, O2 = n2 = Math.max(0, n2), N2 = 0; N2 < h2; N2++) {
              for (var U2 = l2[N2], B2 = U2.units, G2 = B2.length, K3 = 0, H2 = 0; H2 < G2; H2++) K3 += B2[H2].data.length;
              M2 += K3, F2 += G2, U2.length = K3, U2.dts < O2 ? (U2.dts = O2, O2 += D2 / 4 | 0 || 1) : O2 = U2.dts, v2 = Math.min(U2.pts, v2), m2 = Math.max(U2.pts, m2);
            }
            a2 = l2[h2 - 1].dts;
            var V2, Y2 = M2 + 4 * F2 + 8;
            try {
              V2 = new Uint8Array(Y2);
            } catch (t5) {
              return void this.observer.emit(S.ERROR, S.ERROR, { type: L.MUX_ERROR, details: A.REMUX_ALLOC_ERROR, fatal: false, error: t5, bytes: Y2, reason: "fail allocating video mdat " + Y2 });
            }
            var W2 = new DataView(V2.buffer);
            W2.setUint32(0, Y2), V2.set(Ln.types.mdat, 4);
            for (var j2 = false, q2 = Number.POSITIVE_INFINITY, X2 = Number.POSITIVE_INFINITY, z2 = Number.NEGATIVE_INFINITY, Q2 = Number.NEGATIVE_INFINITY, J2 = 0; J2 < h2; J2++) {
              for (var $4 = l2[J2], Z2 = $4.units, tt2 = 0, et2 = 0, rt2 = Z2.length; et2 < rt2; et2++) {
                var it2 = Z2[et2], nt2 = it2.data, at2 = it2.data.byteLength;
                W2.setUint32(f3, at2), f3 += 4, V2.set(nt2, f3), f3 += at2, tt2 += 4 + at2;
              }
              var st2 = void 0;
              if (J2 < h2 - 1) g2 = l2[J2 + 1].dts - $4.dts, st2 = l2[J2 + 1].pts - $4.pts;
              else {
                var ot2 = this.config, lt2 = J2 > 0 ? $4.dts - l2[J2 - 1].dts : D2;
                if (st2 = J2 > 0 ? $4.pts - l2[J2 - 1].pts : D2, ot2.stretchShortVideoTrack && null !== this.nextAudioPts) {
                  var ut2 = Math.floor(ot2.maxBufferHole * s3), ht2 = (i4 ? v2 + i4 * s3 : this.nextAudioPts) - $4.pts;
                  ht2 > ut2 ? ((g2 = ht2 - lt2) < 0 ? g2 = lt2 : j2 = true, w.log("[mp4-remuxer]: It is approximately " + ht2 / 90 + " ms to the next segment; using duration " + g2 / 90 + " ms for the last video frame.")) : g2 = lt2;
                } else g2 = lt2;
              }
              var dt2 = Math.round($4.pts - $4.dts);
              q2 = Math.min(q2, g2), z2 = Math.max(z2, g2), X2 = Math.min(X2, st2), Q2 = Math.max(Q2, st2), u2.push(new Pn($4.key, g2, tt2, dt2));
            }
            if (u2.length) {
              if (kn) {
                if (kn < 70) {
                  var ct2 = u2[0].flags;
                  ct2.dependsOn = 2, ct2.isNonSync = 0;
                }
              } else if (Dn && Q2 - X2 < z2 - q2 && D2 / z2 < 0.025 && 0 === u2[0].cts) {
                w.warn("Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration.");
                for (var ft2 = n2, gt2 = 0, vt2 = u2.length; gt2 < vt2; gt2++) {
                  var mt2 = ft2 + u2[gt2].duration, pt2 = ft2 + u2[gt2].cts;
                  if (gt2 < vt2 - 1) {
                    var yt2 = mt2 + u2[gt2 + 1].cts;
                    u2[gt2].duration = yt2 - pt2;
                  } else u2[gt2].duration = gt2 ? u2[gt2 - 1].duration : D2;
                  u2[gt2].cts = 0, ft2 = mt2;
                }
              }
            }
            g2 = j2 || !g2 ? D2 : g2, this.nextAvcDts = c2 = a2 + g2, this.videoSampleDuration = g2, this.isVideoContiguous = true;
            var Et2 = { data1: Ln.moof(t4.sequenceNumber++, n2, o({}, t4, { samples: u2 })), data2: V2, startPTS: v2 / s3, endPTS: (m2 + g2) / s3, startDTS: n2 / s3, endDTS: c2 / s3, type: "video", hasAudio: false, hasVideo: true, nb: u2.length, dropped: t4.dropped };
            return t4.samples = [], t4.dropped = 0, Et2;
          }, e2.getSamplesPerFrame = function(t4) {
            switch (t4.segmentCodec) {
              case "mp3":
                return 1152;
              case "ac3":
                return 1536;
              default:
                return 1024;
            }
          }, e2.remuxAudio = function(t4, e3, r3, i4, n2) {
            var a2 = t4.inputTimeScale, s3 = a2 / (t4.samplerate ? t4.samplerate : a2), l2 = this.getSamplesPerFrame(t4), u2 = l2 * s3, h2 = this._initPTS, d2 = "mp3" === t4.segmentCodec && this.typeSupported.mpeg, c2 = [], f3 = void 0 !== n2, g2 = t4.samples, v2 = d2 ? 0 : 8, m2 = this.nextAudioPts || -1, p2 = e3 * a2, y2 = h2.baseTime * a2 / h2.timescale;
            if (this.isAudioContiguous = r3 = r3 || g2.length && m2 > 0 && (i4 && Math.abs(p2 - m2) < 9e3 || Math.abs(wn(g2[0].pts - y2, p2) - m2) < 20 * u2), g2.forEach(function(t5) {
              t5.pts = wn(t5.pts - y2, p2);
            }), !r3 || m2 < 0) {
              if (g2 = g2.filter(function(t5) {
                return t5.pts >= 0;
              }), !g2.length) return;
              m2 = 0 === n2 ? 0 : i4 && !f3 ? Math.max(0, p2) : g2[0].pts;
            }
            if ("aac" === t4.segmentCodec) for (var E2 = this.config.maxAudioFramesDrift, T2 = 0, R2 = m2; T2 < g2.length; T2++) {
              var b2 = g2[T2], k2 = b2.pts, D2 = k2 - R2, I2 = Math.abs(1e3 * D2 / a2);
              if (D2 <= -E2 * u2 && f3) 0 === T2 && (w.warn("Audio frame @ " + (k2 / a2).toFixed(3) + "s overlaps nextAudioPts by " + Math.round(1e3 * D2 / a2) + " ms."), this.nextAudioPts = m2 = R2 = k2);
              else if (D2 >= E2 * u2 && I2 < 1e4 && f3) {
                var C2 = Math.round(D2 / u2);
                (R2 = k2 - C2 * u2) < 0 && (C2--, R2 += u2), 0 === T2 && (this.nextAudioPts = m2 = R2), w.warn("[mp4-remuxer]: Injecting " + C2 + " audio frame @ " + (R2 / a2).toFixed(3) + "s due to " + Math.round(1e3 * D2 / a2) + " ms gap.");
                for (var _2 = 0; _2 < C2; _2++) {
                  var x2 = Math.max(R2, 0), P2 = Tn.getSilentFrame(t4.manifestCodec || t4.codec, t4.channelCount);
                  P2 || (w.log("[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead."), P2 = b2.unit.subarray()), g2.splice(T2, 0, { unit: P2, pts: x2 }), R2 += u2, T2++;
                }
              }
              b2.pts = R2, R2 += u2;
            }
            for (var F2, M2 = null, O2 = null, N2 = 0, U2 = g2.length; U2--; ) N2 += g2[U2].unit.byteLength;
            for (var B2 = 0, G2 = g2.length; B2 < G2; B2++) {
              var K3 = g2[B2], H2 = K3.unit, V2 = K3.pts;
              if (null !== O2) c2[B2 - 1].duration = Math.round((V2 - O2) / s3);
              else {
                if (r3 && "aac" === t4.segmentCodec && (V2 = m2), M2 = V2, !(N2 > 0)) return;
                N2 += v2;
                try {
                  F2 = new Uint8Array(N2);
                } catch (t5) {
                  return void this.observer.emit(S.ERROR, S.ERROR, { type: L.MUX_ERROR, details: A.REMUX_ALLOC_ERROR, fatal: false, error: t5, bytes: N2, reason: "fail allocating audio mdat " + N2 });
                }
                d2 || (new DataView(F2.buffer).setUint32(0, N2), F2.set(Ln.types.mdat, 4));
              }
              F2.set(H2, v2);
              var Y2 = H2.byteLength;
              v2 += Y2, c2.push(new Pn(true, l2, Y2, 0)), O2 = V2;
            }
            var W2 = c2.length;
            if (W2) {
              var j2 = c2[c2.length - 1];
              this.nextAudioPts = m2 = O2 + s3 * j2.duration;
              var q2 = d2 ? new Uint8Array(0) : Ln.moof(t4.sequenceNumber++, M2 / s3, o({}, t4, { samples: c2 }));
              t4.samples = [];
              var X2 = M2 / a2, z2 = m2 / a2, Q2 = { data1: q2, data2: F2, startPTS: X2, endPTS: z2, startDTS: X2, endDTS: z2, type: "audio", hasAudio: true, hasVideo: false, nb: W2 };
              return this.isAudioContiguous = true, Q2;
            }
          }, e2.remuxEmptyAudio = function(t4, e3, r3, i4) {
            var n2 = t4.inputTimeScale, a2 = n2 / (t4.samplerate ? t4.samplerate : n2), s3 = this.nextAudioPts, o2 = this._initDTS, l2 = 9e4 * o2.baseTime / o2.timescale, u2 = (null !== s3 ? s3 : i4.startDTS * n2) + l2, h2 = i4.endDTS * n2 + l2, d2 = 1024 * a2, c2 = Math.ceil((h2 - u2) / d2), f3 = Tn.getSilentFrame(t4.manifestCodec || t4.codec, t4.channelCount);
            if (w.warn("[mp4-remuxer]: remux empty Audio"), f3) {
              for (var g2 = [], v2 = 0; v2 < c2; v2++) {
                var m2 = u2 + v2 * d2;
                g2.push({ unit: f3, pts: m2, dts: m2 });
              }
              return t4.samples = g2, this.remuxAudio(t4, e3, r3, false);
            }
            w.trace("[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec");
          }, t3;
        }();
        function wn(t3, e2) {
          var r3;
          if (null === e2) return t3;
          for (r3 = e2 < t3 ? -8589934592 : 8589934592; Math.abs(t3 - e2) > 4294967296; ) t3 += r3;
          return t3;
        }
        function Cn(t3, e2, r3, i4) {
          var n2 = t3.samples.length;
          if (n2) {
            for (var a2 = t3.inputTimeScale, s3 = 0; s3 < n2; s3++) {
              var o2 = t3.samples[s3];
              o2.pts = wn(o2.pts - r3.baseTime * a2 / r3.timescale, e2 * a2) / a2, o2.dts = wn(o2.dts - i4.baseTime * a2 / i4.timescale, e2 * a2) / a2;
            }
            var l2 = t3.samples;
            return t3.samples = [], { samples: l2 };
          }
        }
        function _n(t3, e2, r3) {
          var i4 = t3.samples.length;
          if (i4) {
            for (var n2 = t3.inputTimeScale, a2 = 0; a2 < i4; a2++) {
              var s3 = t3.samples[a2];
              s3.pts = wn(s3.pts - r3.baseTime * n2 / r3.timescale, e2 * n2) / n2;
            }
            t3.samples.sort(function(t4, e3) {
              return t4.pts - e3.pts;
            });
            var o2 = t3.samples;
            return t3.samples = [], { samples: o2 };
          }
        }
        var xn, Pn = function(t3, e2, r3, i4) {
          this.size = void 0, this.duration = void 0, this.cts = void 0, this.flags = void 0, this.duration = e2, this.size = r3, this.cts = i4, this.flags = { isLeading: 0, isDependedOn: 0, hasRedundancy: 0, degradPrio: 0, dependsOn: t3 ? 2 : 1, isNonSync: t3 ? 0 : 1 };
        }, Fn = function() {
          function t3() {
            this.emitInitSegment = false, this.audioCodec = void 0, this.videoCodec = void 0, this.initData = void 0, this.initPTS = null, this.initTracks = void 0, this.lastEndTime = null;
          }
          var e2 = t3.prototype;
          return e2.destroy = function() {
          }, e2.resetTimeStamp = function(t4) {
            this.initPTS = t4, this.lastEndTime = null;
          }, e2.resetNextTimestamp = function() {
            this.lastEndTime = null;
          }, e2.resetInitSegment = function(t4, e3, r3, i4) {
            this.audioCodec = e3, this.videoCodec = r3, this.generateInitSegment(function(t5, e4) {
              if (!t5 || !e4) return t5;
              var r4 = e4.keyId;
              return r4 && e4.isCommonEncryption && Ot(t5, ["moov", "trak"]).forEach(function(t6) {
                var e5 = Ot(t6, ["mdia", "minf", "stbl", "stsd"])[0].subarray(8), i5 = Ot(e5, ["enca"]), n2 = i5.length > 0;
                n2 || (i5 = Ot(e5, ["encv"])), i5.forEach(function(t7) {
                  Ot(n2 ? t7.subarray(28) : t7.subarray(78), ["sinf"]).forEach(function(t8) {
                    var e6 = Vt(t8);
                    if (e6) {
                      var i6 = e6.subarray(8, 24);
                      i6.some(function(t9) {
                        return 0 !== t9;
                      }) || (w.log("[eme] Patching keyId in 'enc" + (n2 ? "a" : "v") + ">sinf>>tenc' box: " + kt.hexDump(i6) + " -> " + kt.hexDump(r4)), e6.set(r4, 8));
                    }
                  });
                });
              }), t5;
            }(t4, i4)), this.emitInitSegment = true;
          }, e2.generateInitSegment = function(t4) {
            var e3 = this.audioCodec, r3 = this.videoCodec;
            if (null == t4 || !t4.byteLength) return this.initTracks = void 0, void (this.initData = void 0);
            var i4 = this.initData = Ut(t4);
            i4.audio && (e3 = Mn(i4.audio, O)), i4.video && (r3 = Mn(i4.video, N));
            var n2 = {};
            i4.audio && i4.video ? n2.audiovideo = { container: "video/mp4", codec: e3 + "," + r3, initSegment: t4, id: "main" } : i4.audio ? n2.audio = { container: "audio/mp4", codec: e3, initSegment: t4, id: "audio" } : i4.video ? n2.video = { container: "video/mp4", codec: r3, initSegment: t4, id: "main" } : w.warn("[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes."), this.initTracks = n2;
          }, e2.remux = function(t4, e3, r3, i4, n2, a2) {
            var s3, o2, l2 = this.initPTS, u2 = this.lastEndTime, h2 = { audio: void 0, video: void 0, text: i4, id3: r3, initSegment: void 0 };
            y(u2) || (u2 = this.lastEndTime = n2 || 0);
            var d2 = e3.samples;
            if (null == d2 || !d2.length) return h2;
            var c2 = { initPTS: void 0, timescale: 1 }, f3 = this.initData;
            if (null != (s3 = f3) && s3.length || (this.generateInitSegment(d2), f3 = this.initData), null == (o2 = f3) || !o2.length) return w.warn("[passthrough-remuxer.ts]: Failed to generate initSegment."), h2;
            this.emitInitSegment && (c2.tracks = this.initTracks, this.emitInitSegment = false);
            var g2 = function(t5, e4) {
              for (var r4 = 0, i5 = 0, n3 = 0, a3 = Ot(t5, ["moof", "traf"]), s4 = 0; s4 < a3.length; s4++) {
                var o3 = a3[s4], l3 = Ot(o3, ["tfhd"])[0], u3 = e4[xt(l3, 4)];
                if (u3) {
                  var h3 = u3.default, d3 = xt(l3, 0) | (null == h3 ? void 0 : h3.flags), c3 = null == h3 ? void 0 : h3.duration;
                  8 & d3 && (c3 = xt(l3, 2 & d3 ? 12 : 8));
                  for (var f4 = u3.timescale || 9e4, g3 = Ot(o3, ["trun"]), v3 = 0; v3 < g3.length; v3++) !(r4 = Yt(g3[v3])) && c3 && (r4 = c3 * xt(g3[v3], 4)), u3.type === N ? i5 += r4 / f4 : u3.type === O && (n3 += r4 / f4);
                }
              }
              if (0 === i5 && 0 === n3) {
                for (var m3 = 1 / 0, p3 = 0, E3 = 0, T3 = Ot(t5, ["sidx"]), S3 = 0; S3 < T3.length; S3++) {
                  var L3 = Nt(T3[S3]);
                  if (null != L3 && L3.references) {
                    m3 = Math.min(m3, L3.earliestPresentationTime / L3.timescale);
                    var A3 = L3.references.reduce(function(t6, e5) {
                      return t6 + e5.info.duration || 0;
                    }, 0);
                    E3 = (p3 = Math.max(p3, A3 + L3.earliestPresentationTime / L3.timescale)) - m3;
                  }
                }
                if (E3 && y(E3)) return E3;
              }
              return i5 || n3;
            }(d2, f3), v2 = function(t5, e4) {
              return Ot(e4, ["moof", "traf"]).reduce(function(e5, r4) {
                var i5 = Ot(r4, ["tfdt"])[0], n3 = i5[0], a3 = Ot(r4, ["tfhd"]).reduce(function(e6, r5) {
                  var a4 = xt(r5, 4), s4 = t5[a4];
                  if (s4) {
                    var o3 = xt(i5, 4);
                    if (1 === n3) {
                      if (o3 === Dt) return w.warn("[mp4-demuxer]: Ignoring assumed invalid signed 64-bit track fragment decode time"), e6;
                      o3 *= Dt + 1, o3 += xt(i5, 8);
                    }
                    var l3 = o3 / (s4.timescale || 9e4);
                    if (y(l3) && (null === e6 || l3 < e6)) return l3;
                  }
                  return e6;
                }, null);
                return null !== a3 && y(a3) && (null === e5 || a3 < e5) ? a3 : e5;
              }, null);
            }(f3, d2), m2 = null === v2 ? n2 : v2;
            (function(t5, e4, r4, i5) {
              if (null === t5) return true;
              var n3 = Math.max(i5, 1), a3 = e4 - t5.baseTime / t5.timescale;
              return Math.abs(a3 - r4) > n3;
            }(l2, m2, n2, g2) || c2.timescale !== l2.timescale && a2) && (c2.initPTS = m2 - n2, l2 && 1 === l2.timescale && w.warn("Adjusting initPTS by " + (c2.initPTS - l2.baseTime)), this.initPTS = l2 = { baseTime: c2.initPTS, timescale: 1 });
            var p2 = t4 ? m2 - l2.baseTime / l2.timescale : u2, E2 = p2 + g2;
            !function(t5, e4, r4) {
              Ot(e4, ["moof", "traf"]).forEach(function(e5) {
                Ot(e5, ["tfhd"]).forEach(function(i5) {
                  var n3 = xt(i5, 4), a3 = t5[n3];
                  if (a3) {
                    var s4 = a3.timescale || 9e4;
                    Ot(e5, ["tfdt"]).forEach(function(t6) {
                      var e6 = t6[0], i6 = r4 * s4;
                      if (i6) {
                        var n4 = xt(t6, 4);
                        if (0 === e6) n4 -= i6, Mt(t6, 4, n4 = Math.max(n4, 0));
                        else {
                          n4 *= Math.pow(2, 32), n4 += xt(t6, 8), n4 -= i6, n4 = Math.max(n4, 0);
                          var a4 = Math.floor(n4 / (Dt + 1)), o3 = Math.floor(n4 % (Dt + 1));
                          Mt(t6, 4, a4), Mt(t6, 8, o3);
                        }
                      }
                    });
                  }
                });
              });
            }(f3, d2, l2.baseTime / l2.timescale), g2 > 0 ? this.lastEndTime = E2 : (w.warn("Duration parsed from mp4 should be greater than zero"), this.resetNextTimestamp());
            var T2 = !!f3.audio, S2 = !!f3.video, L2 = "";
            T2 && (L2 += "audio"), S2 && (L2 += "video");
            var A2 = { data1: d2, startPTS: p2, startDTS: p2, endPTS: E2, endDTS: E2, type: L2, hasAudio: T2, hasVideo: S2, nb: 1, dropped: 0 };
            return h2.audio = "audio" === A2.type ? A2 : void 0, h2.video = "audio" !== A2.type ? A2 : void 0, h2.initSegment = c2, h2.id3 = Cn(r3, n2, l2, l2), i4.samples.length && (h2.text = _n(i4, n2, l2)), h2;
          }, t3;
        }();
        function Mn(t3, e2) {
          var r3 = null == t3 ? void 0 : t3.codec;
          if (r3 && r3.length > 4) return r3;
          if (e2 === O) {
            if ("ec-3" === r3 || "ac-3" === r3 || "alac" === r3) return r3;
            if ("fLaC" === r3 || "Opus" === r3) return ve(r3, false);
            var i4 = "mp4a.40.5";
            return w.info('Parsed audio codec "' + r3 + '" or audio object type not handled. Using "' + i4 + '"'), i4;
          }
          return w.warn('Unhandled video codec "' + r3 + '"'), "hvc1" === r3 || "hev1" === r3 ? "hvc1.1.6.L120.90" : "av01" === r3 ? "av01.0.04M.08" : "avc1.42e01e";
        }
        try {
          xn = self.performance.now.bind(self.performance);
        } catch (t3) {
          w.debug("Unable to use Performance API on this environment"), xn = null == j ? void 0 : j.Date.now;
        }
        var On = [{ demux: rn, remux: Fn }, { demux: cn, remux: In }, { demux: tn, remux: In }, { demux: En, remux: In }];
        On.splice(2, 0, { demux: an, remux: In });
        var Nn = function() {
          function t3(t4, e3, r3, i4, n2) {
            this.async = false, this.observer = void 0, this.typeSupported = void 0, this.config = void 0, this.vendor = void 0, this.id = void 0, this.demuxer = void 0, this.remuxer = void 0, this.decrypter = void 0, this.probe = void 0, this.decryptionPromise = null, this.transmuxConfig = void 0, this.currentTransmuxState = void 0, this.observer = t4, this.typeSupported = e3, this.config = r3, this.vendor = i4, this.id = n2;
          }
          var e2 = t3.prototype;
          return e2.configure = function(t4) {
            this.transmuxConfig = t4, this.decrypter && this.decrypter.reset();
          }, e2.push = function(t4, e3, r3, i4) {
            var n2 = this, a2 = r3.transmuxing;
            a2.executeStart = xn();
            var s3 = new Uint8Array(t4), o2 = this.currentTransmuxState, l2 = this.transmuxConfig;
            i4 && (this.currentTransmuxState = i4);
            var u2 = i4 || o2, h2 = u2.contiguous, d2 = u2.discontinuity, c2 = u2.trackSwitch, f3 = u2.accurateTimeOffset, g2 = u2.timeOffset, v2 = u2.initSegmentChange, m2 = l2.audioCodec, p2 = l2.videoCodec, y2 = l2.defaultInitPts, E2 = l2.duration, T2 = l2.initSegmentData, R2 = function(t5, e4) {
              var r4 = null;
              return t5.byteLength > 0 && null != (null == e4 ? void 0 : e4.key) && null !== e4.iv && null != e4.method && (r4 = e4), r4;
            }(s3, e3);
            if (R2 && "AES-128" === R2.method) {
              var b2 = this.getDecrypter();
              if (!b2.isSync()) return this.decryptionPromise = b2.webCryptoDecrypt(s3, R2.key.buffer, R2.iv.buffer).then(function(t5) {
                var e4 = n2.push(t5, null, r3);
                return n2.decryptionPromise = null, e4;
              }), this.decryptionPromise;
              var k2 = b2.softwareDecrypt(s3, R2.key.buffer, R2.iv.buffer);
              if (r3.part > -1 && (k2 = b2.flush()), !k2) return a2.executeEnd = xn(), Un(r3);
              s3 = new Uint8Array(k2);
            }
            var D2 = this.needsProbing(d2, c2);
            if (D2) {
              var I2 = this.configureTransmuxer(s3);
              if (I2) return w.warn("[transmuxer] " + I2.message), this.observer.emit(S.ERROR, S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_PARSING_ERROR, fatal: false, error: I2, reason: I2.message }), a2.executeEnd = xn(), Un(r3);
            }
            (d2 || c2 || v2 || D2) && this.resetInitSegment(T2, m2, p2, E2, e3), (d2 || v2 || D2) && this.resetInitialTimestamp(y2), h2 || this.resetContiguity();
            var C2 = this.transmux(s3, R2, g2, f3, r3), _2 = this.currentTransmuxState;
            return _2.contiguous = true, _2.discontinuity = false, _2.trackSwitch = false, a2.executeEnd = xn(), C2;
          }, e2.flush = function(t4) {
            var e3 = this, r3 = t4.transmuxing;
            r3.executeStart = xn();
            var i4 = this.decrypter, n2 = this.currentTransmuxState, a2 = this.decryptionPromise;
            if (a2) return a2.then(function() {
              return e3.flush(t4);
            });
            var s3 = [], o2 = n2.timeOffset;
            if (i4) {
              var l2 = i4.flush();
              l2 && s3.push(this.push(l2, null, t4));
            }
            var u2 = this.demuxer, h2 = this.remuxer;
            if (!u2 || !h2) return r3.executeEnd = xn(), [Un(t4)];
            var d2 = u2.flush(o2);
            return Bn(d2) ? d2.then(function(r4) {
              return e3.flushRemux(s3, r4, t4), s3;
            }) : (this.flushRemux(s3, d2, t4), s3);
          }, e2.flushRemux = function(t4, e3, r3) {
            var i4 = e3.audioTrack, n2 = e3.videoTrack, a2 = e3.id3Track, s3 = e3.textTrack, o2 = this.currentTransmuxState, l2 = o2.accurateTimeOffset, u2 = o2.timeOffset;
            w.log("[transmuxer.ts]: Flushed fragment " + r3.sn + (r3.part > -1 ? " p: " + r3.part : "") + " of level " + r3.level);
            var h2 = this.remuxer.remux(i4, n2, a2, s3, u2, l2, true, this.id);
            t4.push({ remuxResult: h2, chunkMeta: r3 }), r3.transmuxing.executeEnd = xn();
          }, e2.resetInitialTimestamp = function(t4) {
            var e3 = this.demuxer, r3 = this.remuxer;
            e3 && r3 && (e3.resetTimeStamp(t4), r3.resetTimeStamp(t4));
          }, e2.resetContiguity = function() {
            var t4 = this.demuxer, e3 = this.remuxer;
            t4 && e3 && (t4.resetContiguity(), e3.resetNextTimestamp());
          }, e2.resetInitSegment = function(t4, e3, r3, i4, n2) {
            var a2 = this.demuxer, s3 = this.remuxer;
            a2 && s3 && (a2.resetInitSegment(t4, e3, r3, i4), s3.resetInitSegment(t4, e3, r3, n2));
          }, e2.destroy = function() {
            this.demuxer && (this.demuxer.destroy(), this.demuxer = void 0), this.remuxer && (this.remuxer.destroy(), this.remuxer = void 0);
          }, e2.transmux = function(t4, e3, r3, i4, n2) {
            return e3 && "SAMPLE-AES" === e3.method ? this.transmuxSampleAes(t4, e3, r3, i4, n2) : this.transmuxUnencrypted(t4, r3, i4, n2);
          }, e2.transmuxUnencrypted = function(t4, e3, r3, i4) {
            var n2 = this.demuxer.demux(t4, e3, false, !this.config.progressive), a2 = n2.audioTrack, s3 = n2.videoTrack, o2 = n2.id3Track, l2 = n2.textTrack;
            return { remuxResult: this.remuxer.remux(a2, s3, o2, l2, e3, r3, false, this.id), chunkMeta: i4 };
          }, e2.transmuxSampleAes = function(t4, e3, r3, i4, n2) {
            var a2 = this;
            return this.demuxer.demuxSampleAes(t4, e3, r3).then(function(t5) {
              return { remuxResult: a2.remuxer.remux(t5.audioTrack, t5.videoTrack, t5.id3Track, t5.textTrack, r3, i4, false, a2.id), chunkMeta: n2 };
            });
          }, e2.configureTransmuxer = function(t4) {
            for (var e3, r3 = this.config, i4 = this.observer, n2 = this.typeSupported, a2 = this.vendor, s3 = 0, o2 = On.length; s3 < o2; s3++) {
              var l2;
              if (null != (l2 = On[s3].demux) && l2.probe(t4)) {
                e3 = On[s3];
                break;
              }
            }
            if (!e3) return new Error("Failed to find demuxer by probing fragment data");
            var u2 = this.demuxer, h2 = this.remuxer, d2 = e3.remux, c2 = e3.demux;
            h2 && h2 instanceof d2 || (this.remuxer = new d2(i4, r3, n2, a2)), u2 && u2 instanceof c2 || (this.demuxer = new c2(i4, r3, n2), this.probe = c2.probe);
          }, e2.needsProbing = function(t4, e3) {
            return !this.demuxer || !this.remuxer || t4 || e3;
          }, e2.getDecrypter = function() {
            var t4 = this.decrypter;
            return t4 || (t4 = this.decrypter = new pi(this.config)), t4;
          }, t3;
        }(), Un = function(t3) {
          return { remuxResult: {}, chunkMeta: t3 };
        };
        function Bn(t3) {
          return "then" in t3 && t3.then instanceof Function;
        }
        var Gn = function(t3, e2, r3, i4, n2) {
          this.audioCodec = void 0, this.videoCodec = void 0, this.initSegmentData = void 0, this.duration = void 0, this.defaultInitPts = void 0, this.audioCodec = t3, this.videoCodec = e2, this.initSegmentData = r3, this.duration = i4, this.defaultInitPts = n2 || null;
        }, Kn = function(t3, e2, r3, i4, n2, a2) {
          this.discontinuity = void 0, this.contiguous = void 0, this.accurateTimeOffset = void 0, this.trackSwitch = void 0, this.timeOffset = void 0, this.initSegmentChange = void 0, this.discontinuity = t3, this.contiguous = e2, this.accurateTimeOffset = r3, this.trackSwitch = i4, this.timeOffset = n2, this.initSegmentChange = a2;
        }, Hn = { exports: {} };
        !function(t3) {
          var e2 = Object.prototype.hasOwnProperty, r3 = "~";
          function i4() {
          }
          function n2(t4, e3, r4) {
            this.fn = t4, this.context = e3, this.once = r4 || false;
          }
          function a2(t4, e3, i5, a3, s4) {
            if ("function" != typeof i5) throw new TypeError("The listener must be a function");
            var o3 = new n2(i5, a3 || t4, s4), l2 = r3 ? r3 + e3 : e3;
            return t4._events[l2] ? t4._events[l2].fn ? t4._events[l2] = [t4._events[l2], o3] : t4._events[l2].push(o3) : (t4._events[l2] = o3, t4._eventsCount++), t4;
          }
          function s3(t4, e3) {
            0 == --t4._eventsCount ? t4._events = new i4() : delete t4._events[e3];
          }
          function o2() {
            this._events = new i4(), this._eventsCount = 0;
          }
          Object.create && (i4.prototype = /* @__PURE__ */ Object.create(null), new i4().__proto__ || (r3 = false)), o2.prototype.eventNames = function() {
            var t4, i5, n3 = [];
            if (0 === this._eventsCount) return n3;
            for (i5 in t4 = this._events) e2.call(t4, i5) && n3.push(r3 ? i5.slice(1) : i5);
            return Object.getOwnPropertySymbols ? n3.concat(Object.getOwnPropertySymbols(t4)) : n3;
          }, o2.prototype.listeners = function(t4) {
            var e3 = r3 ? r3 + t4 : t4, i5 = this._events[e3];
            if (!i5) return [];
            if (i5.fn) return [i5.fn];
            for (var n3 = 0, a3 = i5.length, s4 = new Array(a3); n3 < a3; n3++) s4[n3] = i5[n3].fn;
            return s4;
          }, o2.prototype.listenerCount = function(t4) {
            var e3 = r3 ? r3 + t4 : t4, i5 = this._events[e3];
            return i5 ? i5.fn ? 1 : i5.length : 0;
          }, o2.prototype.emit = function(t4, e3, i5, n3, a3, s4) {
            var o3 = r3 ? r3 + t4 : t4;
            if (!this._events[o3]) return false;
            var l2, u2, h2 = this._events[o3], d2 = arguments.length;
            if (h2.fn) {
              switch (h2.once && this.removeListener(t4, h2.fn, void 0, true), d2) {
                case 1:
                  return h2.fn.call(h2.context), true;
                case 2:
                  return h2.fn.call(h2.context, e3), true;
                case 3:
                  return h2.fn.call(h2.context, e3, i5), true;
                case 4:
                  return h2.fn.call(h2.context, e3, i5, n3), true;
                case 5:
                  return h2.fn.call(h2.context, e3, i5, n3, a3), true;
                case 6:
                  return h2.fn.call(h2.context, e3, i5, n3, a3, s4), true;
              }
              for (u2 = 1, l2 = new Array(d2 - 1); u2 < d2; u2++) l2[u2 - 1] = arguments[u2];
              h2.fn.apply(h2.context, l2);
            } else {
              var c2, f3 = h2.length;
              for (u2 = 0; u2 < f3; u2++) switch (h2[u2].once && this.removeListener(t4, h2[u2].fn, void 0, true), d2) {
                case 1:
                  h2[u2].fn.call(h2[u2].context);
                  break;
                case 2:
                  h2[u2].fn.call(h2[u2].context, e3);
                  break;
                case 3:
                  h2[u2].fn.call(h2[u2].context, e3, i5);
                  break;
                case 4:
                  h2[u2].fn.call(h2[u2].context, e3, i5, n3);
                  break;
                default:
                  if (!l2) for (c2 = 1, l2 = new Array(d2 - 1); c2 < d2; c2++) l2[c2 - 1] = arguments[c2];
                  h2[u2].fn.apply(h2[u2].context, l2);
              }
            }
            return true;
          }, o2.prototype.on = function(t4, e3, r4) {
            return a2(this, t4, e3, r4, false);
          }, o2.prototype.once = function(t4, e3, r4) {
            return a2(this, t4, e3, r4, true);
          }, o2.prototype.removeListener = function(t4, e3, i5, n3) {
            var a3 = r3 ? r3 + t4 : t4;
            if (!this._events[a3]) return this;
            if (!e3) return s3(this, a3), this;
            var o3 = this._events[a3];
            if (o3.fn) o3.fn !== e3 || n3 && !o3.once || i5 && o3.context !== i5 || s3(this, a3);
            else {
              for (var l2 = 0, u2 = [], h2 = o3.length; l2 < h2; l2++) (o3[l2].fn !== e3 || n3 && !o3[l2].once || i5 && o3[l2].context !== i5) && u2.push(o3[l2]);
              u2.length ? this._events[a3] = 1 === u2.length ? u2[0] : u2 : s3(this, a3);
            }
            return this;
          }, o2.prototype.removeAllListeners = function(t4) {
            var e3;
            return t4 ? (e3 = r3 ? r3 + t4 : t4, this._events[e3] && s3(this, e3)) : (this._events = new i4(), this._eventsCount = 0), this;
          }, o2.prototype.off = o2.prototype.removeListener, o2.prototype.addListener = o2.prototype.on, o2.prefixed = r3, o2.EventEmitter = o2, t3.exports = o2;
        }(Hn);
        var Vn = v(Hn.exports);
        function Yn(t3, e2) {
          if (!((r3 = e2.remuxResult).audio || r3.video || r3.text || r3.id3 || r3.initSegment)) return false;
          var r3, i4 = [], n2 = e2.remuxResult, a2 = n2.audio, s3 = n2.video;
          return a2 && Wn(i4, a2), s3 && Wn(i4, s3), t3.postMessage({ event: "transmuxComplete", data: e2 }, i4), true;
        }
        function Wn(t3, e2) {
          e2.data1 && t3.push(e2.data1.buffer), e2.data2 && t3.push(e2.data2.buffer);
        }
        function jn(t3, e2, r3) {
          e2.reduce(function(e3, r4) {
            return Yn(t3, r4) || e3;
          }, false) || t3.postMessage({ event: "transmuxComplete", data: e2[0] }), t3.postMessage({ event: "flush", data: r3 });
        }
        void 0 !== e && e && function(t3) {
          var e2 = new Vn(), r3 = function(e3, r4) {
            t3.postMessage({ event: e3, data: r4 });
          };
          e2.on(S.FRAG_DECRYPTED, r3), e2.on(S.ERROR, r3);
          var i4 = function() {
            var t4 = function(t5) {
              var e4 = function(e5) {
                r3("workerLog", { logType: t5, message: e5 });
              };
              w[t5] = e4;
            };
            for (var e3 in w) t4(e3);
          };
          t3.addEventListener("message", function(n2) {
            var a2 = n2.data;
            switch (a2.cmd) {
              case "init":
                var s3 = JSON.parse(a2.config);
                t3.transmuxer = new Nn(e2, a2.typeSupported, s3, "", a2.id), I(s3.debug, a2.id), i4(), r3("init", null);
                break;
              case "configure":
                t3.transmuxer.configure(a2.config);
                break;
              case "demux":
                var o2 = t3.transmuxer.push(a2.data, a2.decryptdata, a2.chunkMeta, a2.state);
                Bn(o2) ? (t3.transmuxer.async = true, o2.then(function(e3) {
                  Yn(t3, e3);
                }).catch(function(t4) {
                  r3(S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_PARSING_ERROR, chunkMeta: a2.chunkMeta, fatal: false, error: t4, err: t4, reason: "transmuxer-worker push error" });
                })) : (t3.transmuxer.async = false, Yn(t3, o2));
                break;
              case "flush":
                var l2 = a2.chunkMeta, u2 = t3.transmuxer.flush(l2);
                Bn(u2) || t3.transmuxer.async ? (Bn(u2) || (u2 = Promise.resolve(u2)), u2.then(function(e3) {
                  jn(t3, e3, l2);
                }).catch(function(t4) {
                  r3(S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_PARSING_ERROR, chunkMeta: a2.chunkMeta, fatal: false, error: t4, err: t4, reason: "transmuxer-worker flush error" });
                })) : jn(t3, u2, l2);
            }
          });
        }(self);
        var qn = function() {
          function e2(e3, r4, i4, n2) {
            var a2 = this;
            this.error = null, this.hls = void 0, this.id = void 0, this.observer = void 0, this.frag = null, this.part = null, this.useWorker = void 0, this.workerContext = null, this.onwmsg = void 0, this.transmuxer = null, this.onTransmuxComplete = void 0, this.onFlush = void 0;
            var s3 = e3.config;
            this.hls = e3, this.id = r4, this.useWorker = !!s3.enableWorker, this.onTransmuxComplete = i4, this.onFlush = n2;
            var o2 = function(t3, e4) {
              (e4 = e4 || {}).frag = a2.frag, e4.id = a2.id, t3 === S.ERROR && (a2.error = e4.error), a2.hls.trigger(t3, e4);
            };
            this.observer = new Vn(), this.observer.on(S.FRAG_DECRYPTED, o2), this.observer.on(S.ERROR, o2);
            var l2, u2, h2, d2, c2 = se(s3.preferManagedMediaSource) || { isTypeSupported: function() {
              return false;
            } }, f3 = { mpeg: c2.isTypeSupported("audio/mpeg"), mp3: c2.isTypeSupported('audio/mp4; codecs="mp3"'), ac3: c2.isTypeSupported('audio/mp4; codecs="ac-3"') };
            if (!this.useWorker || "undefined" == typeof Worker || (s3.workerPath, 0)) this.transmuxer = new Nn(this.observer, f3, s3, "", r4);
            else try {
              s3.workerPath ? (w.log("loading Web Worker " + s3.workerPath + ' for "' + r4 + '"'), this.workerContext = (h2 = s3.workerPath, d2 = new self.URL(h2, self.location.href).href, { worker: new self.Worker(d2), scriptURL: d2 })) : (w.log('injecting Web Worker for "' + r4 + '"'), this.workerContext = (l2 = new self.Blob(["var exports={};var module={exports:exports};function define(f){f()};define.amd=true;(" + t2.toString() + ")(true);"], { type: "text/javascript" }), u2 = self.URL.createObjectURL(l2), { worker: new self.Worker(u2), objectURL: u2 })), this.onwmsg = function(t3) {
                return a2.onWorkerMessage(t3);
              };
              var g2 = this.workerContext.worker;
              g2.addEventListener("message", this.onwmsg), g2.onerror = function(t3) {
                var e4 = new Error(t3.message + "  (" + t3.filename + ":" + t3.lineno + ")");
                s3.enableWorker = false, w.warn('Error in "' + r4 + '" Web Worker, fallback to inline'), a2.hls.trigger(S.ERROR, { type: L.OTHER_ERROR, details: A.INTERNAL_EXCEPTION, fatal: false, event: "demuxerWorker", error: e4 });
              }, g2.postMessage({ cmd: "init", typeSupported: f3, vendor: "", id: r4, config: JSON.stringify(s3) });
            } catch (t3) {
              w.warn('Error setting up "' + r4 + '" Web Worker, fallback to inline', t3), this.resetWorker(), this.error = null, this.transmuxer = new Nn(this.observer, f3, s3, "", r4);
            }
          }
          var r3 = e2.prototype;
          return r3.resetWorker = function() {
            if (this.workerContext) {
              var t3 = this.workerContext, e3 = t3.worker, r4 = t3.objectURL;
              r4 && self.URL.revokeObjectURL(r4), e3.removeEventListener("message", this.onwmsg), e3.onerror = null, e3.terminate(), this.workerContext = null;
            }
          }, r3.destroy = function() {
            if (this.workerContext) this.resetWorker(), this.onwmsg = void 0;
            else {
              var t3 = this.transmuxer;
              t3 && (t3.destroy(), this.transmuxer = null);
            }
            var e3 = this.observer;
            e3 && e3.removeAllListeners(), this.frag = null, this.observer = null, this.hls = null;
          }, r3.push = function(t3, e3, r4, i4, n2, a2, s3, o2, l2, u2) {
            var h2, d2, c2 = this;
            l2.transmuxing.start = self.performance.now();
            var f3 = this.transmuxer, g2 = a2 ? a2.start : n2.start, v2 = n2.decryptdata, m2 = this.frag, p2 = !(m2 && n2.cc === m2.cc), y2 = !(m2 && l2.level === m2.level), E2 = m2 ? l2.sn - m2.sn : -1, T2 = this.part ? l2.part - this.part.index : -1, S2 = 0 === E2 && l2.id > 1 && l2.id === (null == m2 ? void 0 : m2.stats.chunkCount), L2 = !y2 && (1 === E2 || 0 === E2 && (1 === T2 || S2 && T2 <= 0)), A2 = self.performance.now();
            (y2 || E2 || 0 === n2.stats.parsing.start) && (n2.stats.parsing.start = A2), !a2 || !T2 && L2 || (a2.stats.parsing.start = A2);
            var R2 = !(m2 && (null == (h2 = n2.initSegment) ? void 0 : h2.url) === (null == (d2 = m2.initSegment) ? void 0 : d2.url)), b2 = new Kn(p2, L2, o2, y2, g2, R2);
            if (!L2 || p2 || R2) {
              w.log("[transmuxer-interface, " + n2.type + "]: Starting new transmux session for sn: " + l2.sn + " p: " + l2.part + " level: " + l2.level + " id: " + l2.id + "\n        discontinuity: " + p2 + "\n        trackSwitch: " + y2 + "\n        contiguous: " + L2 + "\n        accurateTimeOffset: " + o2 + "\n        timeOffset: " + g2 + "\n        initSegmentChange: " + R2);
              var k2 = new Gn(r4, i4, e3, s3, u2);
              this.configureTransmuxer(k2);
            }
            if (this.frag = n2, this.part = a2, this.workerContext) this.workerContext.worker.postMessage({ cmd: "demux", data: t3, decryptdata: v2, chunkMeta: l2, state: b2 }, t3 instanceof ArrayBuffer ? [t3] : []);
            else if (f3) {
              var D2 = f3.push(t3, v2, l2, b2);
              Bn(D2) ? (f3.async = true, D2.then(function(t4) {
                c2.handleTransmuxComplete(t4);
              }).catch(function(t4) {
                c2.transmuxerError(t4, l2, "transmuxer-interface push error");
              })) : (f3.async = false, this.handleTransmuxComplete(D2));
            }
          }, r3.flush = function(t3) {
            var e3 = this;
            t3.transmuxing.start = self.performance.now();
            var r4 = this.transmuxer;
            if (this.workerContext) this.workerContext.worker.postMessage({ cmd: "flush", chunkMeta: t3 });
            else if (r4) {
              var i4 = r4.flush(t3);
              Bn(i4) || r4.async ? (Bn(i4) || (i4 = Promise.resolve(i4)), i4.then(function(r5) {
                e3.handleFlushResult(r5, t3);
              }).catch(function(r5) {
                e3.transmuxerError(r5, t3, "transmuxer-interface flush error");
              })) : this.handleFlushResult(i4, t3);
            }
          }, r3.transmuxerError = function(t3, e3, r4) {
            this.hls && (this.error = t3, this.hls.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_PARSING_ERROR, chunkMeta: e3, frag: this.frag || void 0, fatal: false, error: t3, err: t3, reason: r4 }));
          }, r3.handleFlushResult = function(t3, e3) {
            var r4 = this;
            t3.forEach(function(t4) {
              r4.handleTransmuxComplete(t4);
            }), this.onFlush(e3);
          }, r3.onWorkerMessage = function(t3) {
            var e3 = t3.data;
            if (null != e3 && e3.event) {
              var r4 = this.hls;
              if (this.hls) switch (e3.event) {
                case "init":
                  var i4, n2 = null == (i4 = this.workerContext) ? void 0 : i4.objectURL;
                  n2 && self.URL.revokeObjectURL(n2);
                  break;
                case "transmuxComplete":
                  this.handleTransmuxComplete(e3.data);
                  break;
                case "flush":
                  this.onFlush(e3.data);
                  break;
                case "workerLog":
                  w[e3.data.logType] && w[e3.data.logType](e3.data.message);
                  break;
                default:
                  e3.data = e3.data || {}, e3.data.frag = this.frag, e3.data.id = this.id, r4.trigger(e3.event, e3.data);
              }
            } else w.warn("worker message received with no " + (e3 ? "event name" : "data"));
          }, r3.configureTransmuxer = function(t3) {
            var e3 = this.transmuxer;
            this.workerContext ? this.workerContext.worker.postMessage({ cmd: "configure", config: t3 }) : e3 && e3.configure(t3);
          }, r3.handleTransmuxComplete = function(t3) {
            t3.chunkMeta.transmuxing.end = self.performance.now(), this.onTransmuxComplete(t3);
          }, e2;
        }();
        function Xn(t3, e2) {
          if (t3.length !== e2.length) return false;
          for (var r3 = 0; r3 < t3.length; r3++) if (!zn(t3[r3].attrs, e2[r3].attrs)) return false;
          return true;
        }
        function zn(t3, e2, r3) {
          var i4 = t3["STABLE-RENDITION-ID"];
          return i4 && !r3 ? i4 === e2["STABLE-RENDITION-ID"] : !(r3 || ["LANGUAGE", "NAME", "CHARACTERISTICS", "AUTOSELECT", "DEFAULT", "FORCED", "ASSOC-LANGUAGE"]).some(function(r4) {
            return t3[r4] !== e2[r4];
          });
        }
        function Qn(t3, e2) {
          return e2.label.toLowerCase() === t3.name.toLowerCase() && (!e2.language || e2.language.toLowerCase() === (t3.lang || "").toLowerCase());
        }
        var Jn = function(t3) {
          function e2(e3, r4, i4) {
            var n2;
            return (n2 = t3.call(this, e3, r4, i4, "[audio-stream-controller]", Me) || this).videoBuffer = null, n2.videoTrackCC = -1, n2.waitingVideoCC = -1, n2.bufferedTrack = null, n2.switchingTrack = null, n2.trackId = -1, n2.waitingData = null, n2.mainDetails = null, n2.flushing = false, n2.bufferFlushed = false, n2.cachedTrackLoadedData = null, n2._registerListeners(), n2;
          }
          l(e2, t3);
          var r3 = e2.prototype;
          return r3.onHandlerDestroying = function() {
            this._unregisterListeners(), t3.prototype.onHandlerDestroying.call(this), this.mainDetails = null, this.bufferedTrack = null, this.switchingTrack = null;
          }, r3._registerListeners = function() {
            var t4 = this.hls;
            t4.on(S.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(S.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(S.LEVEL_LOADED, this.onLevelLoaded, this), t4.on(S.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this), t4.on(S.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t4.on(S.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t4.on(S.ERROR, this.onError, this), t4.on(S.BUFFER_RESET, this.onBufferReset, this), t4.on(S.BUFFER_CREATED, this.onBufferCreated, this), t4.on(S.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.on(S.BUFFER_FLUSHED, this.onBufferFlushed, this), t4.on(S.INIT_PTS_FOUND, this.onInitPtsFound, this), t4.on(S.FRAG_BUFFERED, this.onFragBuffered, this);
          }, r3._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(S.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(S.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(S.LEVEL_LOADED, this.onLevelLoaded, this), t4.off(S.AUDIO_TRACKS_UPDATED, this.onAudioTracksUpdated, this), t4.off(S.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t4.off(S.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t4.off(S.ERROR, this.onError, this), t4.off(S.BUFFER_RESET, this.onBufferReset, this), t4.off(S.BUFFER_CREATED, this.onBufferCreated, this), t4.off(S.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.off(S.BUFFER_FLUSHED, this.onBufferFlushed, this), t4.off(S.INIT_PTS_FOUND, this.onInitPtsFound, this), t4.off(S.FRAG_BUFFERED, this.onFragBuffered, this);
          }, r3.onInitPtsFound = function(t4, e3) {
            var r4 = e3.frag, i4 = e3.id, n2 = e3.initPTS, a2 = e3.timescale;
            if ("main" === i4) {
              var s3 = r4.cc;
              this.initPTS[r4.cc] = { baseTime: n2, timescale: a2 }, this.log("InitPTS for cc: " + s3 + " found from main: " + n2), this.videoTrackCC = s3, this.state === wi && this.tick();
            }
          }, r3.startLoad = function(t4) {
            if (!this.levels) return this.startPosition = t4, void (this.state = Ei);
            var e3 = this.lastCurrentTime;
            this.stopLoad(), this.setInterval(100), e3 > 0 && -1 === t4 ? (this.log("Override startPosition with lastCurrentTime @" + e3.toFixed(3)), t4 = e3, this.state = Ti) : (this.loadedmetadata = false, this.state = Ri), this.nextLoadPosition = this.startPosition = this.lastCurrentTime = t4, this.tick();
          }, r3.doTick = function() {
            switch (this.state) {
              case Ti:
                this.doTickIdle();
                break;
              case Ri:
                var e3, r4 = this.levels, i4 = this.trackId, n2 = null == r4 || null == (e3 = r4[i4]) ? void 0 : e3.details;
                if (n2) {
                  if (this.waitForCdnTuneIn(n2)) break;
                  this.state = wi;
                }
                break;
              case Ai:
                var a2, s3 = performance.now(), o2 = this.retryDate;
                if (!o2 || s3 >= o2 || null != (a2 = this.media) && a2.seeking) {
                  var l2 = this.levels, u2 = this.trackId;
                  this.log("RetryDate reached, switch back to IDLE state"), this.resetStartWhenNotLoaded((null == l2 ? void 0 : l2[u2]) || null), this.state = Ti;
                }
                break;
              case wi:
                var h2 = this.waitingData;
                if (h2) {
                  var d2 = h2.frag, c2 = h2.part, f3 = h2.cache, g2 = h2.complete;
                  if (void 0 !== this.initPTS[d2.cc]) {
                    this.waitingData = null, this.waitingVideoCC = -1, this.state = Li;
                    var v2 = { frag: d2, part: c2, payload: f3.flush(), networkDetails: null };
                    this._handleFragmentLoadProgress(v2), g2 && t3.prototype._handleFragmentLoadComplete.call(this, v2);
                  } else if (this.videoTrackCC !== this.waitingVideoCC) this.log("Waiting fragment cc (" + d2.cc + ") cancelled because video is at cc " + this.videoTrackCC), this.clearWaitingFragment();
                  else {
                    var m2 = this.getLoadPosition(), p2 = ri.bufferInfo(this.mediaBuffer, m2, this.config.maxBufferHole);
                    Rr(p2.end, this.config.maxFragLookUpTolerance, d2) < 0 && (this.log("Waiting fragment cc (" + d2.cc + ") @ " + d2.start + " cancelled because another fragment at " + p2.end + " is needed"), this.clearWaitingFragment());
                  }
                } else this.state = Ti;
            }
            this.onTickEnd();
          }, r3.clearWaitingFragment = function() {
            var t4 = this.waitingData;
            t4 && (this.fragmentTracker.removeFragment(t4.frag), this.waitingData = null, this.waitingVideoCC = -1, this.state = Ti);
          }, r3.resetLoadingState = function() {
            this.clearWaitingFragment(), t3.prototype.resetLoadingState.call(this);
          }, r3.onTickEnd = function() {
            var t4 = this.media;
            null != t4 && t4.readyState && (this.lastCurrentTime = t4.currentTime);
          }, r3.doTickIdle = function() {
            var t4 = this.hls, e3 = this.levels, r4 = this.media, i4 = this.trackId, n2 = t4.config;
            if ((r4 || !this.startFragRequested && n2.startFragPrefetch) && null != e3 && e3[i4]) {
              var a2 = e3[i4], s3 = a2.details;
              if (!s3 || s3.live && this.levelLastLoaded !== a2 || this.waitForCdnTuneIn(s3)) this.state = Ri;
              else {
                var o2 = this.mediaBuffer ? this.mediaBuffer : this.media;
                this.bufferFlushed && o2 && (this.bufferFlushed = false, this.afterBufferFlushed(o2, O, Me));
                var l2 = this.getFwdBufferInfo(o2, Me);
                if (null !== l2) {
                  var u2 = this.bufferedTrack, h2 = this.switchingTrack;
                  if (!h2 && this._streamEnded(l2, s3)) return t4.trigger(S.BUFFER_EOS, { type: "audio" }), void (this.state = Di);
                  var d2 = this.getFwdBufferInfo(this.videoBuffer ? this.videoBuffer : this.media, Fe), c2 = l2.len, f3 = this.getMaxBufferLength(null == d2 ? void 0 : d2.len), g2 = s3.fragments, v2 = g2[0].start, m2 = this.flushing ? this.getLoadPosition() : l2.end;
                  if (h2 && r4) {
                    var p2 = this.getLoadPosition();
                    u2 && !zn(h2.attrs, u2.attrs) && (m2 = p2), s3.PTSKnown && p2 < v2 && (l2.end > v2 || l2.nextStart) && (this.log("Alt audio track ahead of main track, seek to start of alt audio track"), r4.currentTime = v2 + 0.05);
                  }
                  if (!(c2 >= f3 && !h2 && m2 < g2[g2.length - 1].start)) {
                    var y2 = this.getNextFragment(m2, s3), E2 = false;
                    if (y2 && this.isLoopLoading(y2, m2) && (E2 = !!y2.gap, y2 = this.getNextFragmentLoopLoading(y2, s3, l2, Fe, f3)), y2) {
                      var T2 = d2 && y2.start > d2.end + s3.targetduration;
                      if (T2 || (null == d2 || !d2.len) && l2.len) {
                        var L2 = this.getAppendedFrag(y2.start, Fe);
                        if (null === L2) return;
                        if (E2 || (E2 = !!L2.gap || !!T2 && 0 === d2.len), T2 && !E2 || E2 && l2.nextStart && l2.nextStart < L2.end) return;
                      }
                      this.loadFragment(y2, a2, m2);
                    } else this.bufferFlushed = true;
                  }
                }
              }
            }
          }, r3.getMaxBufferLength = function(e3) {
            var r4 = t3.prototype.getMaxBufferLength.call(this);
            return e3 ? Math.min(Math.max(r4, e3), this.config.maxMaxBufferLength) : r4;
          }, r3.onMediaDetaching = function() {
            this.videoBuffer = null, this.bufferFlushed = this.flushing = false, t3.prototype.onMediaDetaching.call(this);
          }, r3.onAudioTracksUpdated = function(t4, e3) {
            var r4 = e3.audioTracks;
            this.resetTransmuxer(), this.levels = r4.map(function(t5) {
              return new or(t5);
            });
          }, r3.onAudioTrackSwitching = function(t4, e3) {
            var r4 = !!e3.url;
            this.trackId = e3.id;
            var i4 = this.fragCurrent;
            i4 && (i4.abortRequests(), this.removeUnbufferedFrags(i4.start)), this.resetLoadingState(), r4 ? this.setInterval(100) : this.resetTransmuxer(), r4 ? (this.switchingTrack = e3, this.state = Ti, this.flushAudioIfNeeded(e3)) : (this.switchingTrack = null, this.bufferedTrack = e3, this.state = Ei), this.tick();
          }, r3.onManifestLoading = function() {
            this.fragmentTracker.removeAllFragments(), this.startPosition = this.lastCurrentTime = 0, this.bufferFlushed = this.flushing = false, this.levels = this.mainDetails = this.waitingData = this.bufferedTrack = this.cachedTrackLoadedData = this.switchingTrack = null, this.startFragRequested = false, this.trackId = this.videoTrackCC = this.waitingVideoCC = -1;
          }, r3.onLevelLoaded = function(t4, e3) {
            this.mainDetails = e3.details, null !== this.cachedTrackLoadedData && (this.hls.trigger(S.AUDIO_TRACK_LOADED, this.cachedTrackLoadedData), this.cachedTrackLoadedData = null);
          }, r3.onAudioTrackLoaded = function(t4, e3) {
            var r4;
            if (null != this.mainDetails) {
              var i4 = this.levels, n2 = e3.details, a2 = e3.id;
              if (i4) {
                this.log("Audio track " + a2 + " loaded [" + n2.startSN + "," + n2.endSN + "]" + (n2.lastPartSn ? "[part-" + n2.lastPartSn + "-" + n2.lastPartIndex + "]" : "") + ",duration:" + n2.totalduration);
                var s3 = i4[a2], o2 = 0;
                if (n2.live || null != (r4 = s3.details) && r4.live) {
                  this.checkLiveUpdate(n2);
                  var l2, u2 = this.mainDetails;
                  if (n2.deltaUpdateFailed || !u2) return;
                  !s3.details && n2.hasProgramDateTime && u2.hasProgramDateTime ? (li(n2, u2), o2 = n2.fragments[0].start) : o2 = this.alignPlaylists(n2, s3.details, null == (l2 = this.levelLastLoaded) ? void 0 : l2.details);
                }
                s3.details = n2, this.levelLastLoaded = s3, this.startFragRequested || !this.mainDetails && n2.live || this.setStartPosition(this.mainDetails || n2, o2), this.state !== Ri || this.waitForCdnTuneIn(n2) || (this.state = Ti), this.tick();
              } else this.warn("Audio tracks were reset while loading level " + a2);
            } else this.cachedTrackLoadedData = e3;
          }, r3._handleFragmentLoadProgress = function(t4) {
            var e3, r4 = t4.frag, i4 = t4.part, n2 = t4.payload, a2 = this.config, s3 = this.trackId, o2 = this.levels;
            if (o2) {
              var l2 = o2[s3];
              if (l2) {
                var u2 = l2.details;
                if (!u2) return this.warn("Audio track details undefined on fragment load progress"), void this.removeUnbufferedFrags(r4.start);
                var h2 = a2.defaultAudioCodec || l2.audioCodec || "mp4a.40.2", d2 = this.transmuxer;
                d2 || (d2 = this.transmuxer = new qn(this.hls, Me, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this)));
                var c2 = this.initPTS[r4.cc], f3 = null == (e3 = r4.initSegment) ? void 0 : e3.data;
                if (void 0 !== c2) {
                  var g2 = i4 ? i4.index : -1, v2 = -1 !== g2, m2 = new ii(r4.level, r4.sn, r4.stats.chunkCount, n2.byteLength, g2, v2);
                  d2.push(n2, f3, h2, "", r4, i4, u2.totalduration, false, m2, c2);
                } else this.log("Unknown video PTS for cc " + r4.cc + ", waiting for video PTS before demuxing audio frag " + r4.sn + " of [" + u2.startSN + " ," + u2.endSN + "],track " + s3), (this.waitingData = this.waitingData || { frag: r4, part: i4, cache: new xi(), complete: false }).cache.push(new Uint8Array(n2)), this.waitingVideoCC = this.videoTrackCC, this.state = wi;
              } else this.warn("Audio track is undefined on fragment load progress");
            } else this.warn("Audio tracks were reset while fragment load was in progress. Fragment " + r4.sn + " of level " + r4.level + " will not be buffered");
          }, r3._handleFragmentLoadComplete = function(e3) {
            this.waitingData ? this.waitingData.complete = true : t3.prototype._handleFragmentLoadComplete.call(this, e3);
          }, r3.onBufferReset = function() {
            this.mediaBuffer = this.videoBuffer = null, this.loadedmetadata = false;
          }, r3.onBufferCreated = function(t4, e3) {
            var r4 = e3.tracks.audio;
            r4 && (this.mediaBuffer = r4.buffer || null), e3.tracks.video && (this.videoBuffer = e3.tracks.video.buffer || null);
          }, r3.onFragBuffered = function(t4, e3) {
            var r4 = e3.frag, n2 = e3.part;
            if (r4.type === Me) if (this.fragContextChanged(r4)) this.warn("Fragment " + r4.sn + (n2 ? " p: " + n2.index : "") + " of level " + r4.level + " finished buffering, but was aborted. state: " + this.state + ", audioSwitch: " + (this.switchingTrack ? this.switchingTrack.name : "false"));
            else {
              if ("initSegment" !== r4.sn) {
                this.fragPrevious = r4;
                var a2 = this.switchingTrack;
                a2 && (this.bufferedTrack = a2, this.switchingTrack = null, this.hls.trigger(S.AUDIO_TRACK_SWITCHED, i3({}, a2)));
              }
              this.fragBufferedComplete(r4, n2);
            }
            else if (!this.loadedmetadata && r4.type === Fe) {
              var s3 = this.videoBuffer || this.media;
              s3 && ri.getBuffered(s3).length && (this.loadedmetadata = true);
            }
          }, r3.onError = function(e3, r4) {
            var i4;
            if (r4.fatal) this.state = Ii;
            else switch (r4.details) {
              case A.FRAG_GAP:
              case A.FRAG_PARSING_ERROR:
              case A.FRAG_DECRYPT_ERROR:
              case A.FRAG_LOAD_ERROR:
              case A.FRAG_LOAD_TIMEOUT:
              case A.KEY_LOAD_ERROR:
              case A.KEY_LOAD_TIMEOUT:
                this.onFragmentOrKeyLoadError(Me, r4);
                break;
              case A.AUDIO_TRACK_LOAD_ERROR:
              case A.AUDIO_TRACK_LOAD_TIMEOUT:
              case A.LEVEL_PARSING_ERROR:
                r4.levelRetry || this.state !== Ri || (null == (i4 = r4.context) ? void 0 : i4.type) !== xe || (this.state = Ti);
                break;
              case A.BUFFER_APPEND_ERROR:
              case A.BUFFER_FULL_ERROR:
                if (!r4.parent || "audio" !== r4.parent) return;
                if (r4.details === A.BUFFER_APPEND_ERROR) return void this.resetLoadingState();
                this.reduceLengthAndFlushBuffer(r4) && (this.bufferedTrack = null, t3.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, "audio"));
                break;
              case A.INTERNAL_EXCEPTION:
                this.recoverWorkerError(r4);
            }
          }, r3.onBufferFlushing = function(t4, e3) {
            e3.type !== N && (this.flushing = true);
          }, r3.onBufferFlushed = function(t4, e3) {
            var r4 = e3.type;
            if (r4 !== N) {
              this.flushing = false, this.bufferFlushed = true, this.state === Di && (this.state = Ti);
              var i4 = this.mediaBuffer || this.media;
              i4 && (this.afterBufferFlushed(i4, r4, Me), this.tick());
            }
          }, r3._handleTransmuxComplete = function(t4) {
            var e3, r4 = "audio", i4 = this.hls, n2 = t4.remuxResult, a2 = t4.chunkMeta, s3 = this.getCurrentContext(a2);
            if (s3) {
              var l2 = s3.frag, u2 = s3.part, h2 = s3.level, d2 = h2.details, c2 = n2.audio, f3 = n2.text, g2 = n2.id3, v2 = n2.initSegment;
              if (!this.fragContextChanged(l2) && d2) {
                if (this.state = bi, this.switchingTrack && c2 && this.completeAudioSwitch(this.switchingTrack), null != v2 && v2.tracks) {
                  var m2 = l2.initSegment || l2;
                  this._bufferInitSegment(h2, v2.tracks, m2, a2), i4.trigger(S.FRAG_PARSING_INIT_SEGMENT, { frag: m2, id: r4, tracks: v2.tracks });
                }
                if (c2) {
                  var p2 = c2.startPTS, y2 = c2.endPTS, E2 = c2.startDTS, T2 = c2.endDTS;
                  u2 && (u2.elementaryStreams[O] = { startPTS: p2, endPTS: y2, startDTS: E2, endDTS: T2 }), l2.setElementaryStreamInfo(O, p2, y2, E2, T2), this.bufferFragmentData(c2, l2, u2, a2);
                }
                if (null != g2 && null != (e3 = g2.samples) && e3.length) {
                  var L2 = o({ id: r4, frag: l2, details: d2 }, g2);
                  i4.trigger(S.FRAG_PARSING_METADATA, L2);
                }
                if (f3) {
                  var A2 = o({ id: r4, frag: l2, details: d2 }, f3);
                  i4.trigger(S.FRAG_PARSING_USERDATA, A2);
                }
              } else this.fragmentTracker.removeFragment(l2);
            } else this.resetWhenMissingContext(a2);
          }, r3._bufferInitSegment = function(t4, e3, r4, i4) {
            if (this.state === bi) {
              e3.video && delete e3.video;
              var n2 = e3.audio;
              if (n2) {
                n2.id = "audio";
                var a2 = t4.audioCodec;
                this.log("Init audio buffer, container:" + n2.container + ", codecs[level/parsed]=[" + a2 + "/" + n2.codec + "]"), a2 && 1 === a2.split(",").length && (n2.levelCodec = a2), this.hls.trigger(S.BUFFER_CODECS, e3);
                var s3 = n2.initSegment;
                if (null != s3 && s3.byteLength) {
                  var o2 = { type: "audio", frag: r4, part: null, chunkMeta: i4, parent: r4.type, data: s3 };
                  this.hls.trigger(S.BUFFER_APPENDING, o2);
                }
                this.tickImmediate();
              }
            }
          }, r3.loadFragment = function(e3, r4, i4) {
            var n2, a2 = this.fragmentTracker.getState(e3);
            if (this.fragCurrent = e3, this.switchingTrack || a2 === Xr || a2 === Qr) if ("initSegment" === e3.sn) this._loadInitSegment(e3, r4);
            else if (null != (n2 = r4.details) && n2.live && !this.initPTS[e3.cc]) {
              this.log("Waiting for video PTS in continuity counter " + e3.cc + " of live stream before loading audio fragment " + e3.sn + " of level " + this.trackId), this.state = wi;
              var s3 = this.mainDetails;
              s3 && s3.fragments[0].start !== r4.details.fragments[0].start && li(r4.details, s3);
            } else this.startFragRequested = true, t3.prototype.loadFragment.call(this, e3, r4, i4);
            else this.clearTrackerIfNeeded(e3);
          }, r3.flushAudioIfNeeded = function(e3) {
            var r4 = this.media, i4 = this.bufferedTrack, n2 = null == i4 ? void 0 : i4.attrs, a2 = e3.attrs;
            r4 && n2 && (n2.CHANNELS !== a2.CHANNELS || i4.name !== e3.name || i4.lang !== e3.lang) && (this.log("Switching audio track : flushing all audio"), t3.prototype.flushMainBuffer.call(this, 0, Number.POSITIVE_INFINITY, "audio"), this.bufferedTrack = null);
          }, r3.completeAudioSwitch = function(t4) {
            var e3 = this.hls;
            this.flushAudioIfNeeded(t4), this.bufferedTrack = t4, this.switchingTrack = null, e3.trigger(S.AUDIO_TRACK_SWITCHED, i3({}, t4));
          }, e2;
        }(_i), $n = function(t3) {
          function e2(e3) {
            var r4;
            return (r4 = t3.call(this, e3, "[audio-track-controller]") || this).tracks = [], r4.groupIds = null, r4.tracksInGroup = [], r4.trackId = -1, r4.currentTrack = null, r4.selectDefaultTrack = true, r4.registerListeners(), r4;
          }
          l(e2, t3);
          var r3 = e2.prototype;
          return r3.registerListeners = function() {
            var t4 = this.hls;
            t4.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(S.MANIFEST_PARSED, this.onManifestParsed, this), t4.on(S.LEVEL_LOADING, this.onLevelLoading, this), t4.on(S.LEVEL_SWITCHING, this.onLevelSwitching, this), t4.on(S.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t4.on(S.ERROR, this.onError, this);
          }, r3.unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(S.MANIFEST_PARSED, this.onManifestParsed, this), t4.off(S.LEVEL_LOADING, this.onLevelLoading, this), t4.off(S.LEVEL_SWITCHING, this.onLevelSwitching, this), t4.off(S.AUDIO_TRACK_LOADED, this.onAudioTrackLoaded, this), t4.off(S.ERROR, this.onError, this);
          }, r3.destroy = function() {
            this.unregisterListeners(), this.tracks.length = 0, this.tracksInGroup.length = 0, this.currentTrack = null, t3.prototype.destroy.call(this);
          }, r3.onManifestLoading = function() {
            this.tracks = [], this.tracksInGroup = [], this.groupIds = null, this.currentTrack = null, this.trackId = -1, this.selectDefaultTrack = true;
          }, r3.onManifestParsed = function(t4, e3) {
            this.tracks = e3.audioTracks || [];
          }, r3.onAudioTrackLoaded = function(t4, e3) {
            var r4 = e3.id, i4 = e3.groupId, n2 = e3.details, a2 = this.tracksInGroup[r4];
            if (a2 && a2.groupId === i4) {
              var s3 = a2.details;
              a2.details = e3.details, this.log("Audio track " + r4 + ' "' + a2.name + '" lang:' + a2.lang + " group:" + i4 + " loaded [" + n2.startSN + "-" + n2.endSN + "]"), r4 === this.trackId && this.playlistLoaded(r4, e3, s3);
            } else this.warn("Audio track with id:" + r4 + " and group:" + i4 + " not found in active group " + (null == a2 ? void 0 : a2.groupId));
          }, r3.onLevelLoading = function(t4, e3) {
            this.switchLevel(e3.level);
          }, r3.onLevelSwitching = function(t4, e3) {
            this.switchLevel(e3.level);
          }, r3.switchLevel = function(t4) {
            var e3 = this.hls.levels[t4];
            if (e3) {
              var r4 = e3.audioGroups || null, i4 = this.groupIds, n2 = this.currentTrack;
              if (!r4 || (null == i4 ? void 0 : i4.length) !== (null == r4 ? void 0 : r4.length) || null != r4 && r4.some(function(t5) {
                return -1 === (null == i4 ? void 0 : i4.indexOf(t5));
              })) {
                this.groupIds = r4, this.trackId = -1, this.currentTrack = null;
                var a2 = this.tracks.filter(function(t5) {
                  return !r4 || -1 !== r4.indexOf(t5.groupId);
                });
                if (a2.length) this.selectDefaultTrack && !a2.some(function(t5) {
                  return t5.default;
                }) && (this.selectDefaultTrack = false), a2.forEach(function(t5, e4) {
                  t5.id = e4;
                });
                else if (!n2 && !this.tracksInGroup.length) return;
                this.tracksInGroup = a2;
                var s3 = this.hls.config.audioPreference;
                if (!n2 && s3) {
                  var o2 = Hr(s3, a2, Yr);
                  if (o2 > -1) n2 = a2[o2];
                  else {
                    var l2 = Hr(s3, this.tracks);
                    n2 = this.tracks[l2];
                  }
                }
                var u2 = this.findTrackId(n2);
                -1 === u2 && n2 && (u2 = this.findTrackId(null));
                var h2 = { audioTracks: a2 };
                this.log("Updating audio tracks, " + a2.length + " track(s) found in group(s): " + (null == r4 ? void 0 : r4.join(","))), this.hls.trigger(S.AUDIO_TRACKS_UPDATED, h2);
                var d2 = this.trackId;
                if (-1 !== u2 && -1 === d2) this.setAudioTrack(u2);
                else if (a2.length && -1 === d2) {
                  var c2, f3 = new Error("No audio track selected for current audio group-ID(s): " + (null == (c2 = this.groupIds) ? void 0 : c2.join(",")) + " track count: " + a2.length);
                  this.warn(f3.message), this.hls.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.AUDIO_TRACK_LOAD_ERROR, fatal: true, error: f3 });
                }
              } else this.shouldReloadPlaylist(n2) && this.setAudioTrack(this.trackId);
            }
          }, r3.onError = function(t4, e3) {
            !e3.fatal && e3.context && (e3.context.type !== xe || e3.context.id !== this.trackId || this.groupIds && -1 === this.groupIds.indexOf(e3.context.groupId) || (this.requestScheduled = -1, this.checkRetry(e3)));
          }, r3.setAudioOption = function(t4) {
            var e3 = this.hls;
            if (e3.config.audioPreference = t4, t4) {
              var r4 = this.allAudioTracks;
              if (this.selectDefaultTrack = false, r4.length) {
                var i4 = this.currentTrack;
                if (i4 && Vr(t4, i4, Yr)) return i4;
                var n2 = Hr(t4, this.tracksInGroup, Yr);
                if (n2 > -1) {
                  var a2 = this.tracksInGroup[n2];
                  return this.setAudioTrack(n2), a2;
                }
                if (i4) {
                  var s3 = e3.loadLevel;
                  -1 === s3 && (s3 = e3.firstAutoLevel);
                  var o2 = function(t5, e4, r5, i5, n3) {
                    var a3 = e4[i5], s4 = e4.reduce(function(t6, e5, r6) {
                      var i6 = e5.uri;
                      return (t6[i6] || (t6[i6] = [])).push(r6), t6;
                    }, {})[a3.uri];
                    s4.length > 1 && (i5 = Math.max.apply(Math, s4));
                    var o3 = a3.videoRange, l3 = a3.frameRate, u2 = a3.codecSet.substring(0, 4), h2 = Wr(e4, i5, function(e5) {
                      if (e5.videoRange !== o3 || e5.frameRate !== l3 || e5.codecSet.substring(0, 4) !== u2) return false;
                      var i6 = e5.audioGroups, a4 = r5.filter(function(t6) {
                        return !i6 || -1 !== i6.indexOf(t6.groupId);
                      });
                      return Hr(t5, a4, n3) > -1;
                    });
                    return h2 > -1 ? h2 : Wr(e4, i5, function(e5) {
                      var i6 = e5.audioGroups, a4 = r5.filter(function(t6) {
                        return !i6 || -1 !== i6.indexOf(t6.groupId);
                      });
                      return Hr(t5, a4, n3) > -1;
                    });
                  }(t4, e3.levels, r4, s3, Yr);
                  if (-1 === o2) return null;
                  e3.nextLoadLevel = o2;
                }
                if (t4.channels || t4.audioCodec) {
                  var l2 = Hr(t4, r4);
                  if (l2 > -1) return r4[l2];
                }
              }
            }
            return null;
          }, r3.setAudioTrack = function(t4) {
            var e3 = this.tracksInGroup;
            if (t4 < 0 || t4 >= e3.length) this.warn("Invalid audio track id: " + t4);
            else {
              this.clearTimer(), this.selectDefaultTrack = false;
              var r4 = this.currentTrack, n2 = e3[t4], a2 = n2.details && !n2.details.live;
              if (!(t4 === this.trackId && n2 === r4 && a2 || (this.log("Switching to audio-track " + t4 + ' "' + n2.name + '" lang:' + n2.lang + " group:" + n2.groupId + " channels:" + n2.channels), this.trackId = t4, this.currentTrack = n2, this.hls.trigger(S.AUDIO_TRACK_SWITCHING, i3({}, n2)), a2))) {
                var s3 = this.switchParams(n2.url, null == r4 ? void 0 : r4.details, n2.details);
                this.loadPlaylist(s3);
              }
            }
          }, r3.findTrackId = function(t4) {
            for (var e3 = this.tracksInGroup, r4 = 0; r4 < e3.length; r4++) {
              var i4 = e3[r4];
              if ((!this.selectDefaultTrack || i4.default) && (!t4 || Vr(t4, i4, Yr))) return r4;
            }
            if (t4) {
              for (var n2 = t4.name, a2 = t4.lang, s3 = t4.assocLang, o2 = t4.characteristics, l2 = t4.audioCodec, u2 = t4.channels, h2 = 0; h2 < e3.length; h2++) if (Vr({ name: n2, lang: a2, assocLang: s3, characteristics: o2, audioCodec: l2, channels: u2 }, e3[h2], Yr)) return h2;
              for (var d2 = 0; d2 < e3.length; d2++) {
                var c2 = e3[d2];
                if (zn(t4.attrs, c2.attrs, ["LANGUAGE", "ASSOC-LANGUAGE", "CHARACTERISTICS"])) return d2;
              }
              for (var f3 = 0; f3 < e3.length; f3++) {
                var g2 = e3[f3];
                if (zn(t4.attrs, g2.attrs, ["LANGUAGE"])) return f3;
              }
            }
            return -1;
          }, r3.loadPlaylist = function(e3) {
            var r4 = this.currentTrack;
            if (this.shouldLoadPlaylist(r4) && r4) {
              t3.prototype.loadPlaylist.call(this);
              var i4 = r4.id, n2 = r4.groupId, a2 = r4.url;
              if (e3) try {
                a2 = e3.addDirectives(a2);
              } catch (t4) {
                this.warn("Could not construct new URL with HLS Delivery Directives: " + t4);
              }
              this.log("loading audio-track playlist " + i4 + ' "' + r4.name + '" lang:' + r4.lang + " group:" + n2), this.clearTimer(), this.hls.trigger(S.AUDIO_TRACK_LOADING, { url: a2, id: i4, groupId: n2, deliveryDirectives: e3 || null });
            }
          }, s2(e2, [{ key: "allAudioTracks", get: function() {
            return this.tracks;
          } }, { key: "audioTracks", get: function() {
            return this.tracksInGroup;
          } }, { key: "audioTrack", get: function() {
            return this.trackId;
          }, set: function(t4) {
            this.selectDefaultTrack = false, this.setAudioTrack(t4);
          } }]), e2;
        }(Fr), Zn = function(t3) {
          function e2(e3, r4, i4) {
            var n2;
            return (n2 = t3.call(this, e3, r4, i4, "[subtitle-stream-controller]", Oe) || this).currentTrackId = -1, n2.tracksBuffered = [], n2.mainDetails = null, n2._registerListeners(), n2;
          }
          l(e2, t3);
          var r3 = e2.prototype;
          return r3.onHandlerDestroying = function() {
            this._unregisterListeners(), t3.prototype.onHandlerDestroying.call(this), this.mainDetails = null;
          }, r3._registerListeners = function() {
            var t4 = this.hls;
            t4.on(S.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(S.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(S.LEVEL_LOADED, this.onLevelLoaded, this), t4.on(S.ERROR, this.onError, this), t4.on(S.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t4.on(S.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this), t4.on(S.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t4.on(S.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this), t4.on(S.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.on(S.FRAG_BUFFERED, this.onFragBuffered, this);
          }, r3._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(S.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(S.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(S.LEVEL_LOADED, this.onLevelLoaded, this), t4.off(S.ERROR, this.onError, this), t4.off(S.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t4.off(S.SUBTITLE_TRACK_SWITCH, this.onSubtitleTrackSwitch, this), t4.off(S.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t4.off(S.SUBTITLE_FRAG_PROCESSED, this.onSubtitleFragProcessed, this), t4.off(S.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.off(S.FRAG_BUFFERED, this.onFragBuffered, this);
          }, r3.startLoad = function(t4) {
            this.stopLoad(), this.state = Ti, this.setInterval(500), this.nextLoadPosition = this.startPosition = this.lastCurrentTime = t4, this.tick();
          }, r3.onManifestLoading = function() {
            this.mainDetails = null, this.fragmentTracker.removeAllFragments();
          }, r3.onMediaDetaching = function() {
            this.tracksBuffered = [], t3.prototype.onMediaDetaching.call(this);
          }, r3.onLevelLoaded = function(t4, e3) {
            this.mainDetails = e3.details;
          }, r3.onSubtitleFragProcessed = function(t4, e3) {
            var r4 = e3.frag, i4 = e3.success;
            if (this.fragPrevious = r4, this.state = Ti, i4) {
              var n2 = this.tracksBuffered[this.currentTrackId];
              if (n2) {
                for (var a2, s3 = r4.start, o2 = 0; o2 < n2.length; o2++) if (s3 >= n2[o2].start && s3 <= n2[o2].end) {
                  a2 = n2[o2];
                  break;
                }
                var l2 = r4.start + r4.duration;
                a2 ? a2.end = l2 : (a2 = { start: s3, end: l2 }, n2.push(a2)), this.fragmentTracker.fragBuffered(r4), this.fragBufferedComplete(r4, null);
              }
            }
          }, r3.onBufferFlushing = function(t4, e3) {
            var r4 = e3.startOffset, i4 = e3.endOffset;
            if (0 === r4 && i4 !== Number.POSITIVE_INFINITY) {
              var n2 = i4 - 1;
              if (n2 <= 0) return;
              e3.endOffsetSubtitles = Math.max(0, n2), this.tracksBuffered.forEach(function(t5) {
                for (var e4 = 0; e4 < t5.length; ) if (t5[e4].end <= n2) t5.shift();
                else {
                  if (!(t5[e4].start < n2)) break;
                  t5[e4].start = n2, e4++;
                }
              }), this.fragmentTracker.removeFragmentsInRange(r4, n2, Oe);
            }
          }, r3.onFragBuffered = function(t4, e3) {
            var r4;
            this.loadedmetadata || e3.frag.type !== Fe || null != (r4 = this.media) && r4.buffered.length && (this.loadedmetadata = true);
          }, r3.onError = function(t4, e3) {
            var r4 = e3.frag;
            (null == r4 ? void 0 : r4.type) === Oe && (e3.details === A.FRAG_GAP && this.fragmentTracker.fragBuffered(r4, true), this.fragCurrent && this.fragCurrent.abortRequests(), this.state !== Ei && (this.state = Ti));
          }, r3.onSubtitleTracksUpdated = function(t4, e3) {
            var r4 = this, i4 = e3.subtitleTracks;
            this.levels && Xn(this.levels, i4) ? this.levels = i4.map(function(t5) {
              return new or(t5);
            }) : (this.tracksBuffered = [], this.levels = i4.map(function(t5) {
              var e4 = new or(t5);
              return r4.tracksBuffered[e4.id] = [], e4;
            }), this.fragmentTracker.removeFragmentsInRange(0, Number.POSITIVE_INFINITY, Oe), this.fragPrevious = null, this.mediaBuffer = null);
          }, r3.onSubtitleTrackSwitch = function(t4, e3) {
            var r4;
            if (this.currentTrackId = e3.id, null != (r4 = this.levels) && r4.length && -1 !== this.currentTrackId) {
              var i4 = this.levels[this.currentTrackId];
              null != i4 && i4.details ? this.mediaBuffer = this.mediaBufferTimeRanges : this.mediaBuffer = null, i4 && this.setInterval(500);
            } else this.clearInterval();
          }, r3.onSubtitleTrackLoaded = function(t4, e3) {
            var r4, i4 = this.currentTrackId, n2 = this.levels, a2 = e3.details, s3 = e3.id;
            if (n2) {
              var o2 = n2[s3];
              if (!(s3 >= n2.length) && o2) {
                this.log("Subtitle track " + s3 + " loaded [" + a2.startSN + "," + a2.endSN + "]" + (a2.lastPartSn ? "[part-" + a2.lastPartSn + "-" + a2.lastPartIndex + "]" : "") + ",duration:" + a2.totalduration), this.mediaBuffer = this.mediaBufferTimeRanges;
                var l2 = 0;
                if (a2.live || null != (r4 = o2.details) && r4.live) {
                  var u2 = this.mainDetails;
                  if (a2.deltaUpdateFailed || !u2) return;
                  var h2, d2 = u2.fragments[0];
                  o2.details ? 0 === (l2 = this.alignPlaylists(a2, o2.details, null == (h2 = this.levelLastLoaded) ? void 0 : h2.details)) && d2 && fr(a2, l2 = d2.start) : a2.hasProgramDateTime && u2.hasProgramDateTime ? (li(a2, u2), l2 = a2.fragments[0].start) : d2 && fr(a2, l2 = d2.start);
                }
                o2.details = a2, this.levelLastLoaded = o2, s3 === i4 && (this.startFragRequested || !this.mainDetails && a2.live || this.setStartPosition(this.mainDetails || a2, l2), this.tick(), a2.live && !this.fragCurrent && this.media && this.state === Ti && (Ar(null, a2.fragments, this.media.currentTime, 0) || (this.warn("Subtitle playlist not aligned with playback"), o2.details = void 0)));
              }
            } else this.warn("Subtitle tracks were reset while loading level " + s3);
          }, r3._handleFragmentLoadComplete = function(t4) {
            var e3 = this, r4 = t4.frag, i4 = t4.payload, n2 = r4.decryptdata, a2 = this.hls;
            if (!this.fragContextChanged(r4) && i4 && i4.byteLength > 0 && null != n2 && n2.key && n2.iv && "AES-128" === n2.method) {
              var s3 = performance.now();
              this.decrypter.decrypt(new Uint8Array(i4), n2.key.buffer, n2.iv.buffer).catch(function(t5) {
                throw a2.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.FRAG_DECRYPT_ERROR, fatal: false, error: t5, reason: t5.message, frag: r4 }), t5;
              }).then(function(t5) {
                var e4 = performance.now();
                a2.trigger(S.FRAG_DECRYPTED, { frag: r4, payload: t5, stats: { tstart: s3, tdecrypt: e4 } });
              }).catch(function(t5) {
                e3.warn(t5.name + ": " + t5.message), e3.state = Ti;
              });
            }
          }, r3.doTick = function() {
            if (this.media) {
              if (this.state === Ti) {
                var t4 = this.currentTrackId, e3 = this.levels, r4 = null == e3 ? void 0 : e3[t4];
                if (!r4 || !e3.length || !r4.details) return;
                var i4 = this.config, n2 = this.getLoadPosition(), a2 = ri.bufferedInfo(this.tracksBuffered[this.currentTrackId] || [], n2, i4.maxBufferHole), s3 = a2.end, o2 = a2.len, l2 = this.getFwdBufferInfo(this.media, Fe), u2 = r4.details;
                if (o2 > this.getMaxBufferLength(null == l2 ? void 0 : l2.len) + u2.levelTargetDuration) return;
                var h2 = u2.fragments, d2 = h2.length, c2 = u2.edge, f3 = null, g2 = this.fragPrevious;
                if (s3 < c2) {
                  var v2 = i4.maxFragLookUpTolerance, m2 = s3 > c2 - v2 ? 0 : v2;
                  !(f3 = Ar(g2, h2, Math.max(h2[0].start, s3), m2)) && g2 && g2.start < h2[0].start && (f3 = h2[0]);
                } else f3 = h2[d2 - 1];
                if (!f3) return;
                if ("initSegment" !== (f3 = this.mapToInitFragWhenRequired(f3)).sn) {
                  var p2 = h2[f3.sn - u2.startSN - 1];
                  p2 && p2.cc === f3.cc && this.fragmentTracker.getState(p2) === Xr && (f3 = p2);
                }
                this.fragmentTracker.getState(f3) === Xr && this.loadFragment(f3, r4, s3);
              }
            } else this.state = Ti;
          }, r3.getMaxBufferLength = function(e3) {
            var r4 = t3.prototype.getMaxBufferLength.call(this);
            return e3 ? Math.max(r4, e3) : r4;
          }, r3.loadFragment = function(e3, r4, i4) {
            this.fragCurrent = e3, "initSegment" === e3.sn ? this._loadInitSegment(e3, r4) : (this.startFragRequested = true, t3.prototype.loadFragment.call(this, e3, r4, i4));
          }, s2(e2, [{ key: "mediaBufferTimeRanges", get: function() {
            return new ta(this.tracksBuffered[this.currentTrackId] || []);
          } }]), e2;
        }(_i), ta = function(t3) {
          this.buffered = void 0;
          var e2 = function(e3, r3, i4) {
            if ((r3 >>>= 0) > i4 - 1) throw new DOMException("Failed to execute '" + e3 + "' on 'TimeRanges': The index provided (" + r3 + ") is greater than the maximum bound (" + i4 + ")");
            return t3[r3][e3];
          };
          this.buffered = { get length() {
            return t3.length;
          }, end: function(r3) {
            return e2("end", r3, t3.length);
          }, start: function(r3) {
            return e2("start", r3, t3.length);
          } };
        }, ea = function(t3) {
          function e2(e3) {
            var r4;
            return (r4 = t3.call(this, e3, "[subtitle-track-controller]") || this).media = null, r4.tracks = [], r4.groupIds = null, r4.tracksInGroup = [], r4.trackId = -1, r4.currentTrack = null, r4.selectDefaultTrack = true, r4.queuedDefaultTrack = -1, r4.asyncPollTrackChange = function() {
              return r4.pollTrackChange(0);
            }, r4.useTextTrackPolling = false, r4.subtitlePollingInterval = -1, r4._subtitleDisplay = true, r4.onTextTracksChanged = function() {
              if (r4.useTextTrackPolling || self.clearInterval(r4.subtitlePollingInterval), r4.media && r4.hls.config.renderTextTracksNatively) {
                for (var t4 = null, e4 = Ye(r4.media.textTracks), i4 = 0; i4 < e4.length; i4++) if ("hidden" === e4[i4].mode) t4 = e4[i4];
                else if ("showing" === e4[i4].mode) {
                  t4 = e4[i4];
                  break;
                }
                var n2 = r4.findTrackForTextTrack(t4);
                r4.subtitleTrack !== n2 && r4.setSubtitleTrack(n2);
              }
            }, r4.registerListeners(), r4;
          }
          l(e2, t3);
          var r3 = e2.prototype;
          return r3.destroy = function() {
            this.unregisterListeners(), this.tracks.length = 0, this.tracksInGroup.length = 0, this.currentTrack = null, this.onTextTracksChanged = this.asyncPollTrackChange = null, t3.prototype.destroy.call(this);
          }, r3.registerListeners = function() {
            var t4 = this.hls;
            t4.on(S.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(S.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(S.MANIFEST_PARSED, this.onManifestParsed, this), t4.on(S.LEVEL_LOADING, this.onLevelLoading, this), t4.on(S.LEVEL_SWITCHING, this.onLevelSwitching, this), t4.on(S.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t4.on(S.ERROR, this.onError, this);
          }, r3.unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(S.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(S.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(S.MANIFEST_PARSED, this.onManifestParsed, this), t4.off(S.LEVEL_LOADING, this.onLevelLoading, this), t4.off(S.LEVEL_SWITCHING, this.onLevelSwitching, this), t4.off(S.SUBTITLE_TRACK_LOADED, this.onSubtitleTrackLoaded, this), t4.off(S.ERROR, this.onError, this);
          }, r3.onMediaAttached = function(t4, e3) {
            this.media = e3.media, this.media && (this.queuedDefaultTrack > -1 && (this.subtitleTrack = this.queuedDefaultTrack, this.queuedDefaultTrack = -1), this.useTextTrackPolling = !(this.media.textTracks && "onchange" in this.media.textTracks), this.useTextTrackPolling ? this.pollTrackChange(500) : this.media.textTracks.addEventListener("change", this.asyncPollTrackChange));
          }, r3.pollTrackChange = function(t4) {
            self.clearInterval(this.subtitlePollingInterval), this.subtitlePollingInterval = self.setInterval(this.onTextTracksChanged, t4);
          }, r3.onMediaDetaching = function() {
            this.media && (self.clearInterval(this.subtitlePollingInterval), this.useTextTrackPolling || this.media.textTracks.removeEventListener("change", this.asyncPollTrackChange), this.trackId > -1 && (this.queuedDefaultTrack = this.trackId), Ye(this.media.textTracks).forEach(function(t4) {
              He(t4);
            }), this.subtitleTrack = -1, this.media = null);
          }, r3.onManifestLoading = function() {
            this.tracks = [], this.groupIds = null, this.tracksInGroup = [], this.trackId = -1, this.currentTrack = null, this.selectDefaultTrack = true;
          }, r3.onManifestParsed = function(t4, e3) {
            this.tracks = e3.subtitleTracks;
          }, r3.onSubtitleTrackLoaded = function(t4, e3) {
            var r4 = e3.id, i4 = e3.groupId, n2 = e3.details, a2 = this.tracksInGroup[r4];
            if (a2 && a2.groupId === i4) {
              var s3 = a2.details;
              a2.details = e3.details, this.log("Subtitle track " + r4 + ' "' + a2.name + '" lang:' + a2.lang + " group:" + i4 + " loaded [" + n2.startSN + "-" + n2.endSN + "]"), r4 === this.trackId && this.playlistLoaded(r4, e3, s3);
            } else this.warn("Subtitle track with id:" + r4 + " and group:" + i4 + " not found in active group " + (null == a2 ? void 0 : a2.groupId));
          }, r3.onLevelLoading = function(t4, e3) {
            this.switchLevel(e3.level);
          }, r3.onLevelSwitching = function(t4, e3) {
            this.switchLevel(e3.level);
          }, r3.switchLevel = function(t4) {
            var e3 = this.hls.levels[t4];
            if (e3) {
              var r4 = e3.subtitleGroups || null, i4 = this.groupIds, n2 = this.currentTrack;
              if (!r4 || (null == i4 ? void 0 : i4.length) !== (null == r4 ? void 0 : r4.length) || null != r4 && r4.some(function(t5) {
                return -1 === (null == i4 ? void 0 : i4.indexOf(t5));
              })) {
                this.groupIds = r4, this.trackId = -1, this.currentTrack = null;
                var a2 = this.tracks.filter(function(t5) {
                  return !r4 || -1 !== r4.indexOf(t5.groupId);
                });
                if (a2.length) this.selectDefaultTrack && !a2.some(function(t5) {
                  return t5.default;
                }) && (this.selectDefaultTrack = false), a2.forEach(function(t5, e4) {
                  t5.id = e4;
                });
                else if (!n2 && !this.tracksInGroup.length) return;
                this.tracksInGroup = a2;
                var s3 = this.hls.config.subtitlePreference;
                if (!n2 && s3) {
                  this.selectDefaultTrack = false;
                  var o2 = Hr(s3, a2);
                  if (o2 > -1) n2 = a2[o2];
                  else {
                    var l2 = Hr(s3, this.tracks);
                    n2 = this.tracks[l2];
                  }
                }
                var u2 = this.findTrackId(n2);
                -1 === u2 && n2 && (u2 = this.findTrackId(null));
                var h2 = { subtitleTracks: a2 };
                this.log("Updating subtitle tracks, " + a2.length + ' track(s) found in "' + (null == r4 ? void 0 : r4.join(",")) + '" group-id'), this.hls.trigger(S.SUBTITLE_TRACKS_UPDATED, h2), -1 !== u2 && -1 === this.trackId && this.setSubtitleTrack(u2);
              } else this.shouldReloadPlaylist(n2) && this.setSubtitleTrack(this.trackId);
            }
          }, r3.findTrackId = function(t4) {
            for (var e3 = this.tracksInGroup, r4 = this.selectDefaultTrack, i4 = 0; i4 < e3.length; i4++) {
              var n2 = e3[i4];
              if ((!r4 || n2.default) && (r4 || t4) && (!t4 || Vr(n2, t4))) return i4;
            }
            if (t4) {
              for (var a2 = 0; a2 < e3.length; a2++) {
                var s3 = e3[a2];
                if (zn(t4.attrs, s3.attrs, ["LANGUAGE", "ASSOC-LANGUAGE", "CHARACTERISTICS"])) return a2;
              }
              for (var o2 = 0; o2 < e3.length; o2++) {
                var l2 = e3[o2];
                if (zn(t4.attrs, l2.attrs, ["LANGUAGE"])) return o2;
              }
            }
            return -1;
          }, r3.findTrackForTextTrack = function(t4) {
            if (t4) {
              for (var e3 = this.tracksInGroup, r4 = 0; r4 < e3.length; r4++) if (Qn(e3[r4], t4)) return r4;
            }
            return -1;
          }, r3.onError = function(t4, e3) {
            !e3.fatal && e3.context && (e3.context.type !== Pe || e3.context.id !== this.trackId || this.groupIds && -1 === this.groupIds.indexOf(e3.context.groupId) || this.checkRetry(e3));
          }, r3.setSubtitleOption = function(t4) {
            if (this.hls.config.subtitlePreference = t4, t4) {
              var e3 = this.allSubtitleTracks;
              if (this.selectDefaultTrack = false, e3.length) {
                var r4 = this.currentTrack;
                if (r4 && Vr(t4, r4)) return r4;
                var i4 = Hr(t4, this.tracksInGroup);
                if (i4 > -1) {
                  var n2 = this.tracksInGroup[i4];
                  return this.setSubtitleTrack(i4), n2;
                }
                if (r4) return null;
                var a2 = Hr(t4, e3);
                if (a2 > -1) return e3[a2];
              }
            }
            return null;
          }, r3.loadPlaylist = function(e3) {
            t3.prototype.loadPlaylist.call(this);
            var r4 = this.currentTrack;
            if (this.shouldLoadPlaylist(r4) && r4) {
              var i4 = r4.id, n2 = r4.groupId, a2 = r4.url;
              if (e3) try {
                a2 = e3.addDirectives(a2);
              } catch (t4) {
                this.warn("Could not construct new URL with HLS Delivery Directives: " + t4);
              }
              this.log("Loading subtitle playlist for id " + i4), this.hls.trigger(S.SUBTITLE_TRACK_LOADING, { url: a2, id: i4, groupId: n2, deliveryDirectives: e3 || null });
            }
          }, r3.toggleTrackModes = function() {
            var t4 = this.media;
            if (t4) {
              var e3, r4 = Ye(t4.textTracks), i4 = this.currentTrack;
              if (i4 && ((e3 = r4.filter(function(t5) {
                return Qn(i4, t5);
              })[0]) || this.warn('Unable to find subtitle TextTrack with name "' + i4.name + '" and language "' + i4.lang + '"')), [].slice.call(r4).forEach(function(t5) {
                "disabled" !== t5.mode && t5 !== e3 && (t5.mode = "disabled");
              }), e3) {
                var n2 = this.subtitleDisplay ? "showing" : "hidden";
                e3.mode !== n2 && (e3.mode = n2);
              }
            }
          }, r3.setSubtitleTrack = function(t4) {
            var e3 = this.tracksInGroup;
            if (this.media) if (t4 < -1 || t4 >= e3.length || !y(t4)) this.warn("Invalid subtitle track id: " + t4);
            else {
              this.clearTimer(), this.selectDefaultTrack = false;
              var r4 = this.currentTrack, i4 = e3[t4] || null;
              if (this.trackId = t4, this.currentTrack = i4, this.toggleTrackModes(), i4) {
                var n2 = !!i4.details && !i4.details.live;
                if (t4 !== this.trackId || i4 !== r4 || !n2) {
                  this.log("Switching to subtitle-track " + t4 + (i4 ? ' "' + i4.name + '" lang:' + i4.lang + " group:" + i4.groupId : ""));
                  var a2 = i4.id, s3 = i4.groupId, o2 = void 0 === s3 ? "" : s3, l2 = i4.name, u2 = i4.type, h2 = i4.url;
                  this.hls.trigger(S.SUBTITLE_TRACK_SWITCH, { id: a2, groupId: o2, name: l2, type: u2, url: h2 });
                  var d2 = this.switchParams(i4.url, null == r4 ? void 0 : r4.details, i4.details);
                  this.loadPlaylist(d2);
                }
              } else this.hls.trigger(S.SUBTITLE_TRACK_SWITCH, { id: t4 });
            }
            else this.queuedDefaultTrack = t4;
          }, s2(e2, [{ key: "subtitleDisplay", get: function() {
            return this._subtitleDisplay;
          }, set: function(t4) {
            this._subtitleDisplay = t4, this.trackId > -1 && this.toggleTrackModes();
          } }, { key: "allSubtitleTracks", get: function() {
            return this.tracks;
          } }, { key: "subtitleTracks", get: function() {
            return this.tracksInGroup;
          } }, { key: "subtitleTrack", get: function() {
            return this.trackId;
          }, set: function(t4) {
            this.selectDefaultTrack = false, this.setSubtitleTrack(t4);
          } }]), e2;
        }(Fr), ra = function() {
          function t3(t4) {
            this.buffers = void 0, this.queues = { video: [], audio: [], audiovideo: [] }, this.buffers = t4;
          }
          var e2 = t3.prototype;
          return e2.append = function(t4, e3, r3) {
            var i4 = this.queues[e3];
            i4.push(t4), 1 !== i4.length || r3 || this.executeNext(e3);
          }, e2.insertAbort = function(t4, e3) {
            this.queues[e3].unshift(t4), this.executeNext(e3);
          }, e2.appendBlocker = function(t4) {
            var e3, r3 = new Promise(function(t5) {
              e3 = t5;
            }), i4 = { execute: e3, onStart: function() {
            }, onComplete: function() {
            }, onError: function() {
            } };
            return this.append(i4, t4), r3;
          }, e2.executeNext = function(t4) {
            var e3 = this.queues[t4];
            if (e3.length) {
              var r3 = e3[0];
              try {
                r3.execute();
              } catch (e4) {
                w.warn('[buffer-operation-queue]: Exception executing "' + t4 + '" SourceBuffer operation: ' + e4), r3.onError(e4);
                var i4 = this.buffers[t4];
                null != i4 && i4.updating || this.shiftAndExecuteNext(t4);
              }
            }
          }, e2.shiftAndExecuteNext = function(t4) {
            this.queues[t4].shift(), this.executeNext(t4);
          }, e2.current = function(t4) {
            return this.queues[t4][0];
          }, t3;
        }(), ia = /(avc[1234]|hvc1|hev1|dvh[1e]|vp09|av01)(?:\.[^.,]+)+/, na = function() {
          function t3(t4) {
            var e3 = this;
            this.details = null, this._objectUrl = null, this.operationQueue = void 0, this.listeners = void 0, this.hls = void 0, this.bufferCodecEventsExpected = 0, this._bufferCodecEventsTotal = 0, this.media = null, this.mediaSource = null, this.lastMpegAudioChunk = null, this.appendSource = void 0, this.appendErrors = { audio: 0, video: 0, audiovideo: 0 }, this.tracks = {}, this.pendingTracks = {}, this.sourceBuffer = void 0, this.log = void 0, this.warn = void 0, this.error = void 0, this._onEndStreaming = function(t5) {
              e3.hls && e3.hls.pauseBuffering();
            }, this._onStartStreaming = function(t5) {
              e3.hls && e3.hls.resumeBuffering();
            }, this._onMediaSourceOpen = function() {
              var t5 = e3.media, r4 = e3.mediaSource;
              e3.log("Media source opened"), t5 && (t5.removeEventListener("emptied", e3._onMediaEmptied), e3.updateMediaElementDuration(), e3.hls.trigger(S.MEDIA_ATTACHED, { media: t5, mediaSource: r4 })), r4 && r4.removeEventListener("sourceopen", e3._onMediaSourceOpen), e3.checkPendingTracks();
            }, this._onMediaSourceClose = function() {
              e3.log("Media source closed");
            }, this._onMediaSourceEnded = function() {
              e3.log("Media source ended");
            }, this._onMediaEmptied = function() {
              var t5 = e3.mediaSrc, r4 = e3._objectUrl;
              t5 !== r4 && w.error("Media element src was set while attaching MediaSource (" + r4 + " > " + t5 + ")");
            }, this.hls = t4;
            var r3, i4 = "[buffer-controller]";
            this.appendSource = (r3 = se(t4.config.preferManagedMediaSource), "undefined" != typeof self && r3 === self.ManagedMediaSource), this.log = w.log.bind(w, i4), this.warn = w.warn.bind(w, i4), this.error = w.error.bind(w, i4), this._initSourceBuffer(), this.registerListeners();
          }
          var e2 = t3.prototype;
          return e2.hasSourceTypes = function() {
            return this.getSourceBufferTypes().length > 0 || Object.keys(this.pendingTracks).length > 0;
          }, e2.destroy = function() {
            this.unregisterListeners(), this.details = null, this.lastMpegAudioChunk = null, this.hls = null;
          }, e2.registerListeners = function() {
            var t4 = this.hls;
            t4.on(S.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.on(S.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(S.MANIFEST_PARSED, this.onManifestParsed, this), t4.on(S.BUFFER_RESET, this.onBufferReset, this), t4.on(S.BUFFER_APPENDING, this.onBufferAppending, this), t4.on(S.BUFFER_CODECS, this.onBufferCodecs, this), t4.on(S.BUFFER_EOS, this.onBufferEos, this), t4.on(S.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.on(S.LEVEL_UPDATED, this.onLevelUpdated, this), t4.on(S.FRAG_PARSED, this.onFragParsed, this), t4.on(S.FRAG_CHANGED, this.onFragChanged, this);
          }, e2.unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(S.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.off(S.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(S.MANIFEST_PARSED, this.onManifestParsed, this), t4.off(S.BUFFER_RESET, this.onBufferReset, this), t4.off(S.BUFFER_APPENDING, this.onBufferAppending, this), t4.off(S.BUFFER_CODECS, this.onBufferCodecs, this), t4.off(S.BUFFER_EOS, this.onBufferEos, this), t4.off(S.BUFFER_FLUSHING, this.onBufferFlushing, this), t4.off(S.LEVEL_UPDATED, this.onLevelUpdated, this), t4.off(S.FRAG_PARSED, this.onFragParsed, this), t4.off(S.FRAG_CHANGED, this.onFragChanged, this);
          }, e2._initSourceBuffer = function() {
            this.sourceBuffer = {}, this.operationQueue = new ra(this.sourceBuffer), this.listeners = { audio: [], video: [], audiovideo: [] }, this.appendErrors = { audio: 0, video: 0, audiovideo: 0 }, this.lastMpegAudioChunk = null;
          }, e2.onManifestLoading = function() {
            this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = 0, this.details = null;
          }, e2.onManifestParsed = function(t4, e3) {
            var r3 = 2;
            (e3.audio && !e3.video || !e3.altAudio) && (r3 = 1), this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = r3, this.log(this.bufferCodecEventsExpected + " bufferCodec event(s) expected");
          }, e2.onMediaAttaching = function(t4, e3) {
            var r3 = this.media = e3.media, i4 = se(this.appendSource);
            if (r3 && i4) {
              var n2, a2 = this.mediaSource = new i4();
              this.log("created media source: " + (null == (n2 = a2.constructor) ? void 0 : n2.name)), a2.addEventListener("sourceopen", this._onMediaSourceOpen), a2.addEventListener("sourceended", this._onMediaSourceEnded), a2.addEventListener("sourceclose", this._onMediaSourceClose), this.appendSource && (a2.addEventListener("startstreaming", this._onStartStreaming), a2.addEventListener("endstreaming", this._onEndStreaming));
              var s3 = this._objectUrl = self.URL.createObjectURL(a2);
              if (this.appendSource) try {
                r3.removeAttribute("src");
                var o2 = self.ManagedMediaSource;
                r3.disableRemotePlayback = r3.disableRemotePlayback || o2 && a2 instanceof o2, aa(r3), function(t5, e4) {
                  var r4 = self.document.createElement("source");
                  r4.type = "video/mp4", r4.src = e4, t5.appendChild(r4);
                }(r3, s3), r3.load();
              } catch (t5) {
                r3.src = s3;
              }
              else r3.src = s3;
              r3.addEventListener("emptied", this._onMediaEmptied);
            }
          }, e2.onMediaDetaching = function() {
            var t4 = this.media, e3 = this.mediaSource, r3 = this._objectUrl;
            if (e3) {
              if (this.log("media source detaching"), "open" === e3.readyState) try {
                e3.endOfStream();
              } catch (t5) {
                this.warn("onMediaDetaching: " + t5.message + " while calling endOfStream");
              }
              this.onBufferReset(), e3.removeEventListener("sourceopen", this._onMediaSourceOpen), e3.removeEventListener("sourceended", this._onMediaSourceEnded), e3.removeEventListener("sourceclose", this._onMediaSourceClose), this.appendSource && (e3.removeEventListener("startstreaming", this._onStartStreaming), e3.removeEventListener("endstreaming", this._onEndStreaming)), t4 && (t4.removeEventListener("emptied", this._onMediaEmptied), r3 && self.URL.revokeObjectURL(r3), this.mediaSrc === r3 ? (t4.removeAttribute("src"), this.appendSource && aa(t4), t4.load()) : this.warn("media|source.src was changed by a third party - skip cleanup")), this.mediaSource = null, this.media = null, this._objectUrl = null, this.bufferCodecEventsExpected = this._bufferCodecEventsTotal, this.pendingTracks = {}, this.tracks = {};
            }
            this.hls.trigger(S.MEDIA_DETACHED, void 0);
          }, e2.onBufferReset = function() {
            var t4 = this;
            this.getSourceBufferTypes().forEach(function(e3) {
              t4.resetBuffer(e3);
            }), this._initSourceBuffer();
          }, e2.resetBuffer = function(t4) {
            var e3 = this.sourceBuffer[t4];
            try {
              var r3;
              e3 && (this.removeBufferListeners(t4), this.sourceBuffer[t4] = void 0, null != (r3 = this.mediaSource) && r3.sourceBuffers.length && this.mediaSource.removeSourceBuffer(e3));
            } catch (e4) {
              this.warn("onBufferReset " + t4, e4);
            }
          }, e2.onBufferCodecs = function(t4, e3) {
            var r3 = this, i4 = this.getSourceBufferTypes().length, n2 = Object.keys(e3);
            if (n2.forEach(function(t5) {
              if (i4) {
                var n3 = r3.tracks[t5];
                if (n3 && "function" == typeof n3.buffer.changeType) {
                  var a3, s3 = e3[t5], o2 = s3.id, l2 = s3.codec, u2 = s3.levelCodec, h2 = s3.container, d2 = s3.metadata, c2 = me(n3.codec, n3.levelCodec), f3 = null == c2 ? void 0 : c2.replace(ia, "$1"), g2 = me(l2, u2), v2 = null == (a3 = g2) ? void 0 : a3.replace(ia, "$1");
                  if (g2 && f3 !== v2) {
                    "audio" === t5.slice(0, 5) && (g2 = ve(g2, r3.appendSource));
                    var m2 = h2 + ";codecs=" + g2;
                    r3.appendChangeType(t5, m2), r3.log("switching codec " + c2 + " to " + g2), r3.tracks[t5] = { buffer: n3.buffer, codec: l2, container: h2, levelCodec: u2, metadata: d2, id: o2 };
                  }
                }
              } else r3.pendingTracks[t5] = e3[t5];
            }), !i4) {
              var a2 = Math.max(this.bufferCodecEventsExpected - 1, 0);
              this.bufferCodecEventsExpected !== a2 && (this.log(a2 + " bufferCodec event(s) expected " + n2.join(",")), this.bufferCodecEventsExpected = a2), this.mediaSource && "open" === this.mediaSource.readyState && this.checkPendingTracks();
            }
          }, e2.appendChangeType = function(t4, e3) {
            var r3 = this, i4 = this.operationQueue, n2 = { execute: function() {
              var n3 = r3.sourceBuffer[t4];
              n3 && (r3.log("changing " + t4 + " sourceBuffer type to " + e3), n3.changeType(e3)), i4.shiftAndExecuteNext(t4);
            }, onStart: function() {
            }, onComplete: function() {
            }, onError: function(e4) {
              r3.warn("Failed to change " + t4 + " SourceBuffer type", e4);
            } };
            i4.append(n2, t4, !!this.pendingTracks[t4]);
          }, e2.onBufferAppending = function(t4, e3) {
            var r3 = this, i4 = this.hls, n2 = this.operationQueue, a2 = this.tracks, s3 = e3.data, o2 = e3.type, l2 = e3.frag, u2 = e3.part, h2 = e3.chunkMeta, d2 = h2.buffering[o2], c2 = self.performance.now();
            d2.start = c2;
            var f3 = l2.stats.buffering, g2 = u2 ? u2.stats.buffering : null;
            0 === f3.start && (f3.start = c2), g2 && 0 === g2.start && (g2.start = c2);
            var v2 = a2.audio, m2 = false;
            "audio" === o2 && "audio/mpeg" === (null == v2 ? void 0 : v2.container) && (m2 = !this.lastMpegAudioChunk || 1 === h2.id || this.lastMpegAudioChunk.sn !== h2.sn, this.lastMpegAudioChunk = h2);
            var p2 = l2.start, y2 = { execute: function() {
              if (d2.executeStart = self.performance.now(), m2) {
                var t5 = r3.sourceBuffer[o2];
                if (t5) {
                  var e4 = p2 - t5.timestampOffset;
                  Math.abs(e4) >= 0.1 && (r3.log("Updating audio SourceBuffer timestampOffset to " + p2 + " (delta: " + e4 + ") sn: " + l2.sn + ")"), t5.timestampOffset = p2);
                }
              }
              r3.appendExecutor(s3, o2);
            }, onStart: function() {
            }, onComplete: function() {
              var t5 = self.performance.now();
              d2.executeEnd = d2.end = t5, 0 === f3.first && (f3.first = t5), g2 && 0 === g2.first && (g2.first = t5);
              var e4 = r3.sourceBuffer, i5 = {};
              for (var n3 in e4) i5[n3] = ri.getBuffered(e4[n3]);
              r3.appendErrors[o2] = 0, "audio" === o2 || "video" === o2 ? r3.appendErrors.audiovideo = 0 : (r3.appendErrors.audio = 0, r3.appendErrors.video = 0), r3.hls.trigger(S.BUFFER_APPENDED, { type: o2, frag: l2, part: u2, chunkMeta: h2, parent: l2.type, timeRanges: i5 });
            }, onError: function(t5) {
              var e4 = { type: L.MEDIA_ERROR, parent: l2.type, details: A.BUFFER_APPEND_ERROR, sourceBufferName: o2, frag: l2, part: u2, chunkMeta: h2, error: t5, err: t5, fatal: false };
              if (t5.code === DOMException.QUOTA_EXCEEDED_ERR) e4.details = A.BUFFER_FULL_ERROR;
              else {
                var n3 = ++r3.appendErrors[o2];
                e4.details = A.BUFFER_APPEND_ERROR, r3.warn("Failed " + n3 + "/" + i4.config.appendErrorMaxRetry + ' times to append segment in "' + o2 + '" sourceBuffer'), n3 >= i4.config.appendErrorMaxRetry && (e4.fatal = true);
              }
              i4.trigger(S.ERROR, e4);
            } };
            n2.append(y2, o2, !!this.pendingTracks[o2]);
          }, e2.onBufferFlushing = function(t4, e3) {
            var r3 = this, i4 = this.operationQueue, n2 = function(t5) {
              return { execute: r3.removeExecutor.bind(r3, t5, e3.startOffset, e3.endOffset), onStart: function() {
              }, onComplete: function() {
                r3.hls.trigger(S.BUFFER_FLUSHED, { type: t5 });
              }, onError: function(e4) {
                r3.warn("Failed to remove from " + t5 + " SourceBuffer", e4);
              } };
            };
            e3.type ? i4.append(n2(e3.type), e3.type) : this.getSourceBufferTypes().forEach(function(t5) {
              i4.append(n2(t5), t5);
            });
          }, e2.onFragParsed = function(t4, e3) {
            var r3 = this, i4 = e3.frag, n2 = e3.part, a2 = [], s3 = n2 ? n2.elementaryStreams : i4.elementaryStreams;
            s3[U] ? a2.push("audiovideo") : (s3[O] && a2.push("audio"), s3[N] && a2.push("video")), 0 === a2.length && this.warn("Fragments must have at least one ElementaryStreamType set. type: " + i4.type + " level: " + i4.level + " sn: " + i4.sn), this.blockBuffers(function() {
              var t5 = self.performance.now();
              i4.stats.buffering.end = t5, n2 && (n2.stats.buffering.end = t5);
              var e4 = n2 ? n2.stats : i4.stats;
              r3.hls.trigger(S.FRAG_BUFFERED, { frag: i4, part: n2, stats: e4, id: i4.type });
            }, a2);
          }, e2.onFragChanged = function(t4, e3) {
            this.trimBuffers();
          }, e2.onBufferEos = function(t4, e3) {
            var r3 = this;
            this.getSourceBufferTypes().reduce(function(t5, i4) {
              var n2 = r3.sourceBuffer[i4];
              return !n2 || e3.type && e3.type !== i4 || (n2.ending = true, n2.ended || (n2.ended = true, r3.log(i4 + " sourceBuffer now EOS"))), t5 && !(n2 && !n2.ended);
            }, true) && (this.log("Queueing mediaSource.endOfStream()"), this.blockBuffers(function() {
              r3.getSourceBufferTypes().forEach(function(t6) {
                var e4 = r3.sourceBuffer[t6];
                e4 && (e4.ending = false);
              });
              var t5 = r3.mediaSource;
              t5 && "open" === t5.readyState ? (r3.log("Calling mediaSource.endOfStream()"), t5.endOfStream()) : t5 && r3.log("Could not call mediaSource.endOfStream(). mediaSource.readyState: " + t5.readyState);
            }));
          }, e2.onLevelUpdated = function(t4, e3) {
            var r3 = e3.details;
            r3.fragments.length && (this.details = r3, this.getSourceBufferTypes().length ? this.blockBuffers(this.updateMediaElementDuration.bind(this)) : this.updateMediaElementDuration());
          }, e2.trimBuffers = function() {
            var t4 = this.hls, e3 = this.details, r3 = this.media;
            if (r3 && null !== e3 && this.getSourceBufferTypes().length) {
              var i4 = t4.config, n2 = r3.currentTime, a2 = e3.levelTargetDuration, s3 = e3.live && null !== i4.liveBackBufferLength ? i4.liveBackBufferLength : i4.backBufferLength;
              if (y(s3) && s3 > 0) {
                var o2 = Math.max(s3, a2), l2 = Math.floor(n2 / a2) * a2 - o2;
                this.flushBackBuffer(n2, a2, l2);
              }
              if (y(i4.frontBufferFlushThreshold) && i4.frontBufferFlushThreshold > 0) {
                var u2 = Math.max(i4.maxBufferLength, i4.frontBufferFlushThreshold), h2 = Math.max(u2, a2), d2 = Math.floor(n2 / a2) * a2 + h2;
                this.flushFrontBuffer(n2, a2, d2);
              }
            }
          }, e2.flushBackBuffer = function(t4, e3, r3) {
            var i4 = this, n2 = this.details, a2 = this.sourceBuffer;
            this.getSourceBufferTypes().forEach(function(s3) {
              var o2 = a2[s3];
              if (o2) {
                var l2 = ri.getBuffered(o2);
                if (l2.length > 0 && r3 > l2.start(0)) {
                  if (i4.hls.trigger(S.BACK_BUFFER_REACHED, { bufferEnd: r3 }), null != n2 && n2.live) i4.hls.trigger(S.LIVE_BACK_BUFFER_REACHED, { bufferEnd: r3 });
                  else if (o2.ended && l2.end(l2.length - 1) - t4 < 2 * e3) return void i4.log("Cannot flush " + s3 + " back buffer while SourceBuffer is in ended state");
                  i4.hls.trigger(S.BUFFER_FLUSHING, { startOffset: 0, endOffset: r3, type: s3 });
                }
              }
            });
          }, e2.flushFrontBuffer = function(t4, e3, r3) {
            var i4 = this, n2 = this.sourceBuffer;
            this.getSourceBufferTypes().forEach(function(a2) {
              var s3 = n2[a2];
              if (s3) {
                var o2 = ri.getBuffered(s3), l2 = o2.length;
                if (l2 < 2) return;
                var u2 = o2.start(l2 - 1), h2 = o2.end(l2 - 1);
                if (r3 > u2 || t4 >= u2 && t4 <= h2) return;
                if (s3.ended && t4 - h2 < 2 * e3) return void i4.log("Cannot flush " + a2 + " front buffer while SourceBuffer is in ended state");
                i4.hls.trigger(S.BUFFER_FLUSHING, { startOffset: u2, endOffset: 1 / 0, type: a2 });
              }
            });
          }, e2.updateMediaElementDuration = function() {
            if (this.details && this.media && this.mediaSource && "open" === this.mediaSource.readyState) {
              var t4 = this.details, e3 = this.hls, r3 = this.media, i4 = this.mediaSource, n2 = t4.fragments[0].start + t4.totalduration, a2 = r3.duration, s3 = y(i4.duration) ? i4.duration : 0;
              t4.live && e3.config.liveDurationInfinity ? (i4.duration = 1 / 0, this.updateSeekableRange(t4)) : (n2 > s3 && n2 > a2 || !y(a2)) && (this.log("Updating Media Source duration to " + n2.toFixed(3)), i4.duration = n2);
            }
          }, e2.updateSeekableRange = function(t4) {
            var e3 = this.mediaSource, r3 = t4.fragments;
            if (r3.length && t4.live && null != e3 && e3.setLiveSeekableRange) {
              var i4 = Math.max(0, r3[0].start), n2 = Math.max(i4, i4 + t4.totalduration);
              this.log("Media Source duration is set to " + e3.duration + ". Setting seekable range to " + i4 + "-" + n2 + "."), e3.setLiveSeekableRange(i4, n2);
            }
          }, e2.checkPendingTracks = function() {
            var t4 = this.bufferCodecEventsExpected, e3 = this.operationQueue, r3 = this.pendingTracks, i4 = Object.keys(r3).length;
            if (i4 && (!t4 || 2 === i4 || "audiovideo" in r3)) {
              this.createSourceBuffers(r3), this.pendingTracks = {};
              var n2 = this.getSourceBufferTypes();
              if (n2.length) this.hls.trigger(S.BUFFER_CREATED, { tracks: this.tracks }), n2.forEach(function(t5) {
                e3.executeNext(t5);
              });
              else {
                var a2 = new Error("could not create source buffer for media codec(s)");
                this.hls.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.BUFFER_INCOMPATIBLE_CODECS_ERROR, fatal: true, error: a2, reason: a2.message });
              }
            }
          }, e2.createSourceBuffers = function(t4) {
            var e3 = this, r3 = this.sourceBuffer, i4 = this.mediaSource;
            if (!i4) throw Error("createSourceBuffers called when mediaSource was null");
            var n2 = function(n3) {
              if (!r3[n3]) {
                var a3, s3 = t4[n3];
                if (!s3) throw Error("source buffer exists for track " + n3 + ", however track does not");
                var o2 = -1 === (null == (a3 = s3.levelCodec) ? void 0 : a3.indexOf(",")) ? s3.levelCodec : s3.codec;
                o2 && "audio" === n3.slice(0, 5) && (o2 = ve(o2, e3.appendSource));
                var l2 = s3.container + ";codecs=" + o2;
                e3.log("creating sourceBuffer(" + l2 + ")");
                try {
                  var u2 = r3[n3] = i4.addSourceBuffer(l2), h2 = n3;
                  e3.addBufferListener(h2, "updatestart", e3._onSBUpdateStart), e3.addBufferListener(h2, "updateend", e3._onSBUpdateEnd), e3.addBufferListener(h2, "error", e3._onSBUpdateError), e3.appendSource && e3.addBufferListener(h2, "bufferedchange", function(t5, r4) {
                    var i5 = r4.removedRanges;
                    null != i5 && i5.length && e3.hls.trigger(S.BUFFER_FLUSHED, { type: n3 });
                  }), e3.tracks[n3] = { buffer: u2, codec: o2, container: s3.container, levelCodec: s3.levelCodec, metadata: s3.metadata, id: s3.id };
                } catch (t5) {
                  e3.error("error while trying to add sourceBuffer: " + t5.message), e3.hls.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.BUFFER_ADD_CODEC_ERROR, fatal: false, error: t5, sourceBufferName: n3, mimeType: l2 });
                }
              }
            };
            for (var a2 in t4) n2(a2);
          }, e2._onSBUpdateStart = function(t4) {
            this.operationQueue.current(t4).onStart();
          }, e2._onSBUpdateEnd = function(t4) {
            var e3;
            if ("closed" !== (null == (e3 = this.mediaSource) ? void 0 : e3.readyState)) {
              var r3 = this.operationQueue;
              r3.current(t4).onComplete(), r3.shiftAndExecuteNext(t4);
            } else this.resetBuffer(t4);
          }, e2._onSBUpdateError = function(t4, e3) {
            var r3, i4 = new Error(t4 + " SourceBuffer error. MediaSource readyState: " + (null == (r3 = this.mediaSource) ? void 0 : r3.readyState));
            this.error("" + i4, e3), this.hls.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.BUFFER_APPENDING_ERROR, sourceBufferName: t4, error: i4, fatal: false });
            var n2 = this.operationQueue.current(t4);
            n2 && n2.onError(i4);
          }, e2.removeExecutor = function(t4, e3, r3) {
            var i4 = this.media, n2 = this.mediaSource, a2 = this.operationQueue, s3 = this.sourceBuffer[t4];
            if (!i4 || !n2 || !s3) return this.warn("Attempting to remove from the " + t4 + " SourceBuffer, but it does not exist"), void a2.shiftAndExecuteNext(t4);
            var o2 = y(i4.duration) ? i4.duration : 1 / 0, l2 = y(n2.duration) ? n2.duration : 1 / 0, u2 = Math.max(0, e3), h2 = Math.min(r3, o2, l2);
            h2 > u2 && (!s3.ending || s3.ended) ? (s3.ended = false, this.log("Removing [" + u2 + "," + h2 + "] from the " + t4 + " SourceBuffer"), s3.remove(u2, h2)) : a2.shiftAndExecuteNext(t4);
          }, e2.appendExecutor = function(t4, e3) {
            var r3 = this.sourceBuffer[e3];
            if (r3) r3.ended = false, r3.appendBuffer(t4);
            else if (!this.pendingTracks[e3]) throw new Error("Attempting to append to the " + e3 + " SourceBuffer, but it does not exist");
          }, e2.blockBuffers = function(t4, e3) {
            var r3 = this;
            if (void 0 === e3 && (e3 = this.getSourceBufferTypes()), !e3.length) return this.log("Blocking operation requested, but no SourceBuffers exist"), void Promise.resolve().then(t4);
            var i4 = this.operationQueue, n2 = e3.map(function(t5) {
              return i4.appendBlocker(t5);
            });
            Promise.all(n2).then(function() {
              t4(), e3.forEach(function(t5) {
                var e4 = r3.sourceBuffer[t5];
                null != e4 && e4.updating || i4.shiftAndExecuteNext(t5);
              });
            });
          }, e2.getSourceBufferTypes = function() {
            return Object.keys(this.sourceBuffer);
          }, e2.addBufferListener = function(t4, e3, r3) {
            var i4 = this.sourceBuffer[t4];
            if (i4) {
              var n2 = r3.bind(this, t4);
              this.listeners[t4].push({ event: e3, listener: n2 }), i4.addEventListener(e3, n2);
            }
          }, e2.removeBufferListeners = function(t4) {
            var e3 = this.sourceBuffer[t4];
            e3 && this.listeners[t4].forEach(function(t5) {
              e3.removeEventListener(t5.event, t5.listener);
            });
          }, s2(t3, [{ key: "mediaSrc", get: function() {
            var t4, e3, r3 = (null == (t4 = this.media) || null == (e3 = t4.querySelector) ? void 0 : e3.call(t4, "source")) || this.media;
            return null == r3 ? void 0 : r3.src;
          } }]), t3;
        }();
        function aa(t3) {
          var e2 = t3.querySelectorAll("source");
          [].slice.call(e2).forEach(function(e3) {
            t3.removeChild(e3);
          });
        }
        var sa = { 42: 225, 92: 233, 94: 237, 95: 243, 96: 250, 123: 231, 124: 247, 125: 209, 126: 241, 127: 9608, 128: 174, 129: 176, 130: 189, 131: 191, 132: 8482, 133: 162, 134: 163, 135: 9834, 136: 224, 137: 32, 138: 232, 139: 226, 140: 234, 141: 238, 142: 244, 143: 251, 144: 193, 145: 201, 146: 211, 147: 218, 148: 220, 149: 252, 150: 8216, 151: 161, 152: 42, 153: 8217, 154: 9473, 155: 169, 156: 8480, 157: 8226, 158: 8220, 159: 8221, 160: 192, 161: 194, 162: 199, 163: 200, 164: 202, 165: 203, 166: 235, 167: 206, 168: 207, 169: 239, 170: 212, 171: 217, 172: 249, 173: 219, 174: 171, 175: 187, 176: 195, 177: 227, 178: 205, 179: 204, 180: 236, 181: 210, 182: 242, 183: 213, 184: 245, 185: 123, 186: 125, 187: 92, 188: 94, 189: 95, 190: 124, 191: 8764, 192: 196, 193: 228, 194: 214, 195: 246, 196: 223, 197: 165, 198: 164, 199: 9475, 200: 197, 201: 229, 202: 216, 203: 248, 204: 9487, 205: 9491, 206: 9495, 207: 9499 }, oa = function(t3) {
          return String.fromCharCode(sa[t3] || t3);
        }, la = 15, ua = 100, ha = { 17: 1, 18: 3, 21: 5, 22: 7, 23: 9, 16: 11, 19: 12, 20: 14 }, da = { 17: 2, 18: 4, 21: 6, 22: 8, 23: 10, 19: 13, 20: 15 }, ca = { 25: 1, 26: 3, 29: 5, 30: 7, 31: 9, 24: 11, 27: 12, 28: 14 }, fa = { 25: 2, 26: 4, 29: 6, 30: 8, 31: 10, 27: 13, 28: 15 }, ga = ["white", "green", "blue", "cyan", "red", "yellow", "magenta", "black", "transparent"], va = function() {
          function t3() {
            this.time = null, this.verboseLevel = 0;
          }
          return t3.prototype.log = function(t4, e2) {
            if (this.verboseLevel >= t4) {
              var r3 = "function" == typeof e2 ? e2() : e2;
              w.log(this.time + " [" + t4 + "] " + r3);
            }
          }, t3;
        }(), ma = function(t3) {
          for (var e2 = [], r3 = 0; r3 < t3.length; r3++) e2.push(t3[r3].toString(16));
          return e2;
        }, pa = function() {
          function t3() {
            this.foreground = "white", this.underline = false, this.italics = false, this.background = "black", this.flash = false;
          }
          var e2 = t3.prototype;
          return e2.reset = function() {
            this.foreground = "white", this.underline = false, this.italics = false, this.background = "black", this.flash = false;
          }, e2.setStyles = function(t4) {
            for (var e3 = ["foreground", "underline", "italics", "background", "flash"], r3 = 0; r3 < e3.length; r3++) {
              var i4 = e3[r3];
              t4.hasOwnProperty(i4) && (this[i4] = t4[i4]);
            }
          }, e2.isDefault = function() {
            return "white" === this.foreground && !this.underline && !this.italics && "black" === this.background && !this.flash;
          }, e2.equals = function(t4) {
            return this.foreground === t4.foreground && this.underline === t4.underline && this.italics === t4.italics && this.background === t4.background && this.flash === t4.flash;
          }, e2.copy = function(t4) {
            this.foreground = t4.foreground, this.underline = t4.underline, this.italics = t4.italics, this.background = t4.background, this.flash = t4.flash;
          }, e2.toString = function() {
            return "color=" + this.foreground + ", underline=" + this.underline + ", italics=" + this.italics + ", background=" + this.background + ", flash=" + this.flash;
          }, t3;
        }(), ya = function() {
          function t3() {
            this.uchar = " ", this.penState = new pa();
          }
          var e2 = t3.prototype;
          return e2.reset = function() {
            this.uchar = " ", this.penState.reset();
          }, e2.setChar = function(t4, e3) {
            this.uchar = t4, this.penState.copy(e3);
          }, e2.setPenState = function(t4) {
            this.penState.copy(t4);
          }, e2.equals = function(t4) {
            return this.uchar === t4.uchar && this.penState.equals(t4.penState);
          }, e2.copy = function(t4) {
            this.uchar = t4.uchar, this.penState.copy(t4.penState);
          }, e2.isEmpty = function() {
            return " " === this.uchar && this.penState.isDefault();
          }, t3;
        }(), Ea = function() {
          function t3(t4) {
            this.chars = [], this.pos = 0, this.currPenState = new pa(), this.cueStartTime = null, this.logger = void 0;
            for (var e3 = 0; e3 < ua; e3++) this.chars.push(new ya());
            this.logger = t4;
          }
          var e2 = t3.prototype;
          return e2.equals = function(t4) {
            for (var e3 = 0; e3 < ua; e3++) if (!this.chars[e3].equals(t4.chars[e3])) return false;
            return true;
          }, e2.copy = function(t4) {
            for (var e3 = 0; e3 < ua; e3++) this.chars[e3].copy(t4.chars[e3]);
          }, e2.isEmpty = function() {
            for (var t4 = true, e3 = 0; e3 < ua; e3++) if (!this.chars[e3].isEmpty()) {
              t4 = false;
              break;
            }
            return t4;
          }, e2.setCursor = function(t4) {
            this.pos !== t4 && (this.pos = t4), this.pos < 0 ? (this.logger.log(3, "Negative cursor position " + this.pos), this.pos = 0) : this.pos > ua && (this.logger.log(3, "Too large cursor position " + this.pos), this.pos = ua);
          }, e2.moveCursor = function(t4) {
            var e3 = this.pos + t4;
            if (t4 > 1) for (var r3 = this.pos + 1; r3 < e3 + 1; r3++) this.chars[r3].setPenState(this.currPenState);
            this.setCursor(e3);
          }, e2.backSpace = function() {
            this.moveCursor(-1), this.chars[this.pos].setChar(" ", this.currPenState);
          }, e2.insertChar = function(t4) {
            var e3 = this;
            t4 >= 144 && this.backSpace();
            var r3 = oa(t4);
            this.pos >= ua ? this.logger.log(0, function() {
              return "Cannot insert " + t4.toString(16) + " (" + r3 + ") at position " + e3.pos + ". Skipping it!";
            }) : (this.chars[this.pos].setChar(r3, this.currPenState), this.moveCursor(1));
          }, e2.clearFromPos = function(t4) {
            var e3;
            for (e3 = t4; e3 < ua; e3++) this.chars[e3].reset();
          }, e2.clear = function() {
            this.clearFromPos(0), this.pos = 0, this.currPenState.reset();
          }, e2.clearToEndOfRow = function() {
            this.clearFromPos(this.pos);
          }, e2.getTextString = function() {
            for (var t4 = [], e3 = true, r3 = 0; r3 < ua; r3++) {
              var i4 = this.chars[r3].uchar;
              " " !== i4 && (e3 = false), t4.push(i4);
            }
            return e3 ? "" : t4.join("");
          }, e2.setPenStyles = function(t4) {
            this.currPenState.setStyles(t4), this.chars[this.pos].setPenState(this.currPenState);
          }, t3;
        }(), Ta = function() {
          function t3(t4) {
            this.rows = [], this.currRow = 14, this.nrRollUpRows = null, this.lastOutputScreen = null, this.logger = void 0;
            for (var e3 = 0; e3 < la; e3++) this.rows.push(new Ea(t4));
            this.logger = t4;
          }
          var e2 = t3.prototype;
          return e2.reset = function() {
            for (var t4 = 0; t4 < la; t4++) this.rows[t4].clear();
            this.currRow = 14;
          }, e2.equals = function(t4) {
            for (var e3 = true, r3 = 0; r3 < la; r3++) if (!this.rows[r3].equals(t4.rows[r3])) {
              e3 = false;
              break;
            }
            return e3;
          }, e2.copy = function(t4) {
            for (var e3 = 0; e3 < la; e3++) this.rows[e3].copy(t4.rows[e3]);
          }, e2.isEmpty = function() {
            for (var t4 = true, e3 = 0; e3 < la; e3++) if (!this.rows[e3].isEmpty()) {
              t4 = false;
              break;
            }
            return t4;
          }, e2.backSpace = function() {
            this.rows[this.currRow].backSpace();
          }, e2.clearToEndOfRow = function() {
            this.rows[this.currRow].clearToEndOfRow();
          }, e2.insertChar = function(t4) {
            this.rows[this.currRow].insertChar(t4);
          }, e2.setPen = function(t4) {
            this.rows[this.currRow].setPenStyles(t4);
          }, e2.moveCursor = function(t4) {
            this.rows[this.currRow].moveCursor(t4);
          }, e2.setCursor = function(t4) {
            this.logger.log(2, "setCursor: " + t4), this.rows[this.currRow].setCursor(t4);
          }, e2.setPAC = function(t4) {
            this.logger.log(2, function() {
              return "pacData = " + JSON.stringify(t4);
            });
            var e3 = t4.row - 1;
            if (this.nrRollUpRows && e3 < this.nrRollUpRows - 1 && (e3 = this.nrRollUpRows - 1), this.nrRollUpRows && this.currRow !== e3) {
              for (var r3 = 0; r3 < la; r3++) this.rows[r3].clear();
              var i4 = this.currRow + 1 - this.nrRollUpRows, n2 = this.lastOutputScreen;
              if (n2) {
                var a2 = n2.rows[i4].cueStartTime, s3 = this.logger.time;
                if (null !== a2 && null !== s3 && a2 < s3) for (var o2 = 0; o2 < this.nrRollUpRows; o2++) this.rows[e3 - this.nrRollUpRows + o2 + 1].copy(n2.rows[i4 + o2]);
              }
            }
            this.currRow = e3;
            var l2 = this.rows[this.currRow];
            if (null !== t4.indent) {
              var u2 = t4.indent, h2 = Math.max(u2 - 1, 0);
              l2.setCursor(t4.indent), t4.color = l2.chars[h2].penState.foreground;
            }
            var d2 = { foreground: t4.color, underline: t4.underline, italics: t4.italics, background: "black", flash: false };
            this.setPen(d2);
          }, e2.setBkgData = function(t4) {
            this.logger.log(2, function() {
              return "bkgData = " + JSON.stringify(t4);
            }), this.backSpace(), this.setPen(t4), this.insertChar(32);
          }, e2.setRollUpRows = function(t4) {
            this.nrRollUpRows = t4;
          }, e2.rollUp = function() {
            var t4 = this;
            if (null !== this.nrRollUpRows) {
              this.logger.log(1, function() {
                return t4.getDisplayText();
              });
              var e3 = this.currRow + 1 - this.nrRollUpRows, r3 = this.rows.splice(e3, 1)[0];
              r3.clear(), this.rows.splice(this.currRow, 0, r3), this.logger.log(2, "Rolling up");
            } else this.logger.log(3, "roll_up but nrRollUpRows not set yet");
          }, e2.getDisplayText = function(t4) {
            t4 = t4 || false;
            for (var e3 = [], r3 = "", i4 = -1, n2 = 0; n2 < la; n2++) {
              var a2 = this.rows[n2].getTextString();
              a2 && (i4 = n2 + 1, t4 ? e3.push("Row " + i4 + ": '" + a2 + "'") : e3.push(a2.trim()));
            }
            return e3.length > 0 && (r3 = t4 ? "[" + e3.join(" | ") + "]" : e3.join("\n")), r3;
          }, e2.getTextAndFormat = function() {
            return this.rows;
          }, t3;
        }(), Sa = function() {
          function t3(t4, e3, r3) {
            this.chNr = void 0, this.outputFilter = void 0, this.mode = void 0, this.verbose = void 0, this.displayedMemory = void 0, this.nonDisplayedMemory = void 0, this.lastOutputScreen = void 0, this.currRollUpRow = void 0, this.writeScreen = void 0, this.cueStartTime = void 0, this.logger = void 0, this.chNr = t4, this.outputFilter = e3, this.mode = null, this.verbose = 0, this.displayedMemory = new Ta(r3), this.nonDisplayedMemory = new Ta(r3), this.lastOutputScreen = new Ta(r3), this.currRollUpRow = this.displayedMemory.rows[14], this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null, this.logger = r3;
          }
          var e2 = t3.prototype;
          return e2.reset = function() {
            this.mode = null, this.displayedMemory.reset(), this.nonDisplayedMemory.reset(), this.lastOutputScreen.reset(), this.outputFilter.reset(), this.currRollUpRow = this.displayedMemory.rows[14], this.writeScreen = this.displayedMemory, this.mode = null, this.cueStartTime = null;
          }, e2.getHandler = function() {
            return this.outputFilter;
          }, e2.setHandler = function(t4) {
            this.outputFilter = t4;
          }, e2.setPAC = function(t4) {
            this.writeScreen.setPAC(t4);
          }, e2.setBkgData = function(t4) {
            this.writeScreen.setBkgData(t4);
          }, e2.setMode = function(t4) {
            t4 !== this.mode && (this.mode = t4, this.logger.log(2, function() {
              return "MODE=" + t4;
            }), "MODE_POP-ON" === this.mode ? this.writeScreen = this.nonDisplayedMemory : (this.writeScreen = this.displayedMemory, this.writeScreen.reset()), "MODE_ROLL-UP" !== this.mode && (this.displayedMemory.nrRollUpRows = null, this.nonDisplayedMemory.nrRollUpRows = null), this.mode = t4);
          }, e2.insertChars = function(t4) {
            for (var e3 = this, r3 = 0; r3 < t4.length; r3++) this.writeScreen.insertChar(t4[r3]);
            var i4 = this.writeScreen === this.displayedMemory ? "DISP" : "NON_DISP";
            this.logger.log(2, function() {
              return i4 + ": " + e3.writeScreen.getDisplayText(true);
            }), "MODE_PAINT-ON" !== this.mode && "MODE_ROLL-UP" !== this.mode || (this.logger.log(1, function() {
              return "DISPLAYED: " + e3.displayedMemory.getDisplayText(true);
            }), this.outputDataUpdate());
          }, e2.ccRCL = function() {
            this.logger.log(2, "RCL - Resume Caption Loading"), this.setMode("MODE_POP-ON");
          }, e2.ccBS = function() {
            this.logger.log(2, "BS - BackSpace"), "MODE_TEXT" !== this.mode && (this.writeScreen.backSpace(), this.writeScreen === this.displayedMemory && this.outputDataUpdate());
          }, e2.ccAOF = function() {
          }, e2.ccAON = function() {
          }, e2.ccDER = function() {
            this.logger.log(2, "DER- Delete to End of Row"), this.writeScreen.clearToEndOfRow(), this.outputDataUpdate();
          }, e2.ccRU = function(t4) {
            this.logger.log(2, "RU(" + t4 + ") - Roll Up"), this.writeScreen = this.displayedMemory, this.setMode("MODE_ROLL-UP"), this.writeScreen.setRollUpRows(t4);
          }, e2.ccFON = function() {
            this.logger.log(2, "FON - Flash On"), this.writeScreen.setPen({ flash: true });
          }, e2.ccRDC = function() {
            this.logger.log(2, "RDC - Resume Direct Captioning"), this.setMode("MODE_PAINT-ON");
          }, e2.ccTR = function() {
            this.logger.log(2, "TR"), this.setMode("MODE_TEXT");
          }, e2.ccRTD = function() {
            this.logger.log(2, "RTD"), this.setMode("MODE_TEXT");
          }, e2.ccEDM = function() {
            this.logger.log(2, "EDM - Erase Displayed Memory"), this.displayedMemory.reset(), this.outputDataUpdate(true);
          }, e2.ccCR = function() {
            this.logger.log(2, "CR - Carriage Return"), this.writeScreen.rollUp(), this.outputDataUpdate(true);
          }, e2.ccENM = function() {
            this.logger.log(2, "ENM - Erase Non-displayed Memory"), this.nonDisplayedMemory.reset();
          }, e2.ccEOC = function() {
            var t4 = this;
            if (this.logger.log(2, "EOC - End Of Caption"), "MODE_POP-ON" === this.mode) {
              var e3 = this.displayedMemory;
              this.displayedMemory = this.nonDisplayedMemory, this.nonDisplayedMemory = e3, this.writeScreen = this.nonDisplayedMemory, this.logger.log(1, function() {
                return "DISP: " + t4.displayedMemory.getDisplayText();
              });
            }
            this.outputDataUpdate(true);
          }, e2.ccTO = function(t4) {
            this.logger.log(2, "TO(" + t4 + ") - Tab Offset"), this.writeScreen.moveCursor(t4);
          }, e2.ccMIDROW = function(t4) {
            var e3 = { flash: false };
            if (e3.underline = t4 % 2 == 1, e3.italics = t4 >= 46, e3.italics) e3.foreground = "white";
            else {
              var r3 = Math.floor(t4 / 2) - 16;
              e3.foreground = ["white", "green", "blue", "cyan", "red", "yellow", "magenta"][r3];
            }
            this.logger.log(2, "MIDROW: " + JSON.stringify(e3)), this.writeScreen.setPen(e3);
          }, e2.outputDataUpdate = function(t4) {
            void 0 === t4 && (t4 = false);
            var e3 = this.logger.time;
            null !== e3 && this.outputFilter && (null !== this.cueStartTime || this.displayedMemory.isEmpty() ? this.displayedMemory.equals(this.lastOutputScreen) || (this.outputFilter.newCue(this.cueStartTime, e3, this.lastOutputScreen), t4 && this.outputFilter.dispatchCue && this.outputFilter.dispatchCue(), this.cueStartTime = this.displayedMemory.isEmpty() ? null : e3) : this.cueStartTime = e3, this.lastOutputScreen.copy(this.displayedMemory));
          }, e2.cueSplitAtTime = function(t4) {
            this.outputFilter && (this.displayedMemory.isEmpty() || (this.outputFilter.newCue && this.outputFilter.newCue(this.cueStartTime, t4, this.displayedMemory), this.cueStartTime = t4));
          }, t3;
        }(), La = function() {
          function t3(t4, e3, r3) {
            this.channels = void 0, this.currentChannel = 0, this.cmdHistory = { a: null, b: null }, this.logger = void 0;
            var i4 = this.logger = new va();
            this.channels = [null, new Sa(t4, e3, i4), new Sa(t4 + 1, r3, i4)];
          }
          var e2 = t3.prototype;
          return e2.getHandler = function(t4) {
            return this.channels[t4].getHandler();
          }, e2.setHandler = function(t4, e3) {
            this.channels[t4].setHandler(e3);
          }, e2.addData = function(t4, e3) {
            var r3 = this;
            this.logger.time = t4;
            for (var i4 = function(t5) {
              var i5 = 127 & e3[t5], n3 = 127 & e3[t5 + 1], a2 = false, s3 = null;
              if (0 === i5 && 0 === n3) return 0;
              r3.logger.log(3, function() {
                return "[" + ma([e3[t5], e3[t5 + 1]]) + "] -> (" + ma([i5, n3]) + ")";
              });
              var o2 = r3.cmdHistory;
              if (i5 >= 16 && i5 <= 31) {
                if (function(t6, e4, r4) {
                  return r4.a === t6 && r4.b === e4;
                }(i5, n3, o2)) return Aa(null, null, o2), r3.logger.log(3, function() {
                  return "Repeated command (" + ma([i5, n3]) + ") is dropped";
                }), 0;
                Aa(i5, n3, r3.cmdHistory), (a2 = r3.parseCmd(i5, n3)) || (a2 = r3.parseMidrow(i5, n3)), a2 || (a2 = r3.parsePAC(i5, n3)), a2 || (a2 = r3.parseBackgroundAttributes(i5, n3));
              } else Aa(null, null, o2);
              if (!a2 && (s3 = r3.parseChars(i5, n3))) {
                var l2 = r3.currentChannel;
                l2 && l2 > 0 ? r3.channels[l2].insertChars(s3) : r3.logger.log(2, "No channel found yet. TEXT-MODE?");
              }
              a2 || s3 || r3.logger.log(2, function() {
                return "Couldn't parse cleaned data " + ma([i5, n3]) + " orig: " + ma([e3[t5], e3[t5 + 1]]);
              });
            }, n2 = 0; n2 < e3.length; n2 += 2) i4(n2);
          }, e2.parseCmd = function(t4, e3) {
            if (!((20 === t4 || 28 === t4 || 21 === t4 || 29 === t4) && e3 >= 32 && e3 <= 47 || (23 === t4 || 31 === t4) && e3 >= 33 && e3 <= 35)) return false;
            var r3 = 20 === t4 || 21 === t4 || 23 === t4 ? 1 : 2, i4 = this.channels[r3];
            return 20 === t4 || 21 === t4 || 28 === t4 || 29 === t4 ? 32 === e3 ? i4.ccRCL() : 33 === e3 ? i4.ccBS() : 34 === e3 ? i4.ccAOF() : 35 === e3 ? i4.ccAON() : 36 === e3 ? i4.ccDER() : 37 === e3 ? i4.ccRU(2) : 38 === e3 ? i4.ccRU(3) : 39 === e3 ? i4.ccRU(4) : 40 === e3 ? i4.ccFON() : 41 === e3 ? i4.ccRDC() : 42 === e3 ? i4.ccTR() : 43 === e3 ? i4.ccRTD() : 44 === e3 ? i4.ccEDM() : 45 === e3 ? i4.ccCR() : 46 === e3 ? i4.ccENM() : 47 === e3 && i4.ccEOC() : i4.ccTO(e3 - 32), this.currentChannel = r3, true;
          }, e2.parseMidrow = function(t4, e3) {
            var r3 = 0;
            if ((17 === t4 || 25 === t4) && e3 >= 32 && e3 <= 47) {
              if ((r3 = 17 === t4 ? 1 : 2) !== this.currentChannel) return this.logger.log(0, "Mismatch channel in midrow parsing"), false;
              var i4 = this.channels[r3];
              return !!i4 && (i4.ccMIDROW(e3), this.logger.log(3, function() {
                return "MIDROW (" + ma([t4, e3]) + ")";
              }), true);
            }
            return false;
          }, e2.parsePAC = function(t4, e3) {
            var r3;
            if (!((t4 >= 17 && t4 <= 23 || t4 >= 25 && t4 <= 31) && e3 >= 64 && e3 <= 127 || (16 === t4 || 24 === t4) && e3 >= 64 && e3 <= 95)) return false;
            var i4 = t4 <= 23 ? 1 : 2;
            r3 = e3 >= 64 && e3 <= 95 ? 1 === i4 ? ha[t4] : ca[t4] : 1 === i4 ? da[t4] : fa[t4];
            var n2 = this.channels[i4];
            return !!n2 && (n2.setPAC(this.interpretPAC(r3, e3)), this.currentChannel = i4, true);
          }, e2.interpretPAC = function(t4, e3) {
            var r3, i4 = { color: null, italics: false, indent: null, underline: false, row: t4 };
            return r3 = e3 > 95 ? e3 - 96 : e3 - 64, i4.underline = 1 == (1 & r3), r3 <= 13 ? i4.color = ["white", "green", "blue", "cyan", "red", "yellow", "magenta", "white"][Math.floor(r3 / 2)] : r3 <= 15 ? (i4.italics = true, i4.color = "white") : i4.indent = 4 * Math.floor((r3 - 16) / 2), i4;
          }, e2.parseChars = function(t4, e3) {
            var r3, i4, n2 = null, a2 = null;
            return t4 >= 25 ? (r3 = 2, a2 = t4 - 8) : (r3 = 1, a2 = t4), a2 >= 17 && a2 <= 19 ? (i4 = 17 === a2 ? e3 + 80 : 18 === a2 ? e3 + 112 : e3 + 144, this.logger.log(2, function() {
              return "Special char '" + oa(i4) + "' in channel " + r3;
            }), n2 = [i4]) : t4 >= 32 && t4 <= 127 && (n2 = 0 === e3 ? [t4] : [t4, e3]), n2 && this.logger.log(3, function() {
              return "Char codes =  " + ma(n2).join(",");
            }), n2;
          }, e2.parseBackgroundAttributes = function(t4, e3) {
            var r3;
            if (!((16 === t4 || 24 === t4) && e3 >= 32 && e3 <= 47 || (23 === t4 || 31 === t4) && e3 >= 45 && e3 <= 47)) return false;
            var i4 = {};
            16 === t4 || 24 === t4 ? (r3 = Math.floor((e3 - 32) / 2), i4.background = ga[r3], e3 % 2 == 1 && (i4.background = i4.background + "_semi")) : 45 === e3 ? i4.background = "transparent" : (i4.foreground = "black", 47 === e3 && (i4.underline = true));
            var n2 = t4 <= 23 ? 1 : 2;
            return this.channels[n2].setBkgData(i4), true;
          }, e2.reset = function() {
            for (var t4 = 0; t4 < Object.keys(this.channels).length; t4++) {
              var e3 = this.channels[t4];
              e3 && e3.reset();
            }
            Aa(null, null, this.cmdHistory);
          }, e2.cueSplitAtTime = function(t4) {
            for (var e3 = 0; e3 < this.channels.length; e3++) {
              var r3 = this.channels[e3];
              r3 && r3.cueSplitAtTime(t4);
            }
          }, t3;
        }();
        function Aa(t3, e2, r3) {
          r3.a = t3, r3.b = e2;
        }
        var Ra = function() {
          function t3(t4, e3) {
            this.timelineController = void 0, this.cueRanges = [], this.trackName = void 0, this.startTime = null, this.endTime = null, this.screen = null, this.timelineController = t4, this.trackName = e3;
          }
          var e2 = t3.prototype;
          return e2.dispatchCue = function() {
            null !== this.startTime && (this.timelineController.addCues(this.trackName, this.startTime, this.endTime, this.screen, this.cueRanges), this.startTime = null);
          }, e2.newCue = function(t4, e3, r3) {
            (null === this.startTime || this.startTime > t4) && (this.startTime = t4), this.endTime = e3, this.screen = r3, this.timelineController.createCaptionsTrack(this.trackName);
          }, e2.reset = function() {
            this.cueRanges = [], this.startTime = null;
          }, t3;
        }(), ba = function() {
          if (null != j && j.VTTCue) return self.VTTCue;
          var t3 = ["", "lr", "rl"], e2 = ["start", "middle", "end", "left", "right"];
          function r3(t4, e3) {
            if ("string" != typeof e3) return false;
            if (!Array.isArray(t4)) return false;
            var r4 = e3.toLowerCase();
            return !!~t4.indexOf(r4) && r4;
          }
          function i4(t4) {
            return r3(e2, t4);
          }
          function n2(t4) {
            for (var e3 = arguments.length, r4 = new Array(e3 > 1 ? e3 - 1 : 0), i5 = 1; i5 < e3; i5++) r4[i5 - 1] = arguments[i5];
            for (var n3 = 1; n3 < arguments.length; n3++) {
              var a3 = arguments[n3];
              for (var s3 in a3) t4[s3] = a3[s3];
            }
            return t4;
          }
          function a2(e3, a3, s3) {
            var o2 = this, l2 = { enumerable: true };
            o2.hasBeenReset = false;
            var u2 = "", h2 = false, d2 = e3, c2 = a3, f3 = s3, g2 = null, v2 = "", m2 = true, p2 = "auto", y2 = "start", E2 = 50, T2 = "middle", S2 = 50, L2 = "middle";
            Object.defineProperty(o2, "id", n2({}, l2, { get: function() {
              return u2;
            }, set: function(t4) {
              u2 = "" + t4;
            } })), Object.defineProperty(o2, "pauseOnExit", n2({}, l2, { get: function() {
              return h2;
            }, set: function(t4) {
              h2 = !!t4;
            } })), Object.defineProperty(o2, "startTime", n2({}, l2, { get: function() {
              return d2;
            }, set: function(t4) {
              if ("number" != typeof t4) throw new TypeError("Start time must be set to a number.");
              d2 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "endTime", n2({}, l2, { get: function() {
              return c2;
            }, set: function(t4) {
              if ("number" != typeof t4) throw new TypeError("End time must be set to a number.");
              c2 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "text", n2({}, l2, { get: function() {
              return f3;
            }, set: function(t4) {
              f3 = "" + t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "region", n2({}, l2, { get: function() {
              return g2;
            }, set: function(t4) {
              g2 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "vertical", n2({}, l2, { get: function() {
              return v2;
            }, set: function(e4) {
              var i5 = function(e5) {
                return r3(t3, e5);
              }(e4);
              if (false === i5) throw new SyntaxError("An invalid or illegal string was specified.");
              v2 = i5, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "snapToLines", n2({}, l2, { get: function() {
              return m2;
            }, set: function(t4) {
              m2 = !!t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "line", n2({}, l2, { get: function() {
              return p2;
            }, set: function(t4) {
              if ("number" != typeof t4 && "auto" !== t4) throw new SyntaxError("An invalid number or illegal string was specified.");
              p2 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "lineAlign", n2({}, l2, { get: function() {
              return y2;
            }, set: function(t4) {
              var e4 = i4(t4);
              if (!e4) throw new SyntaxError("An invalid or illegal string was specified.");
              y2 = e4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "position", n2({}, l2, { get: function() {
              return E2;
            }, set: function(t4) {
              if (t4 < 0 || t4 > 100) throw new Error("Position must be between 0 and 100.");
              E2 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "positionAlign", n2({}, l2, { get: function() {
              return T2;
            }, set: function(t4) {
              var e4 = i4(t4);
              if (!e4) throw new SyntaxError("An invalid or illegal string was specified.");
              T2 = e4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "size", n2({}, l2, { get: function() {
              return S2;
            }, set: function(t4) {
              if (t4 < 0 || t4 > 100) throw new Error("Size must be between 0 and 100.");
              S2 = t4, this.hasBeenReset = true;
            } })), Object.defineProperty(o2, "align", n2({}, l2, { get: function() {
              return L2;
            }, set: function(t4) {
              var e4 = i4(t4);
              if (!e4) throw new SyntaxError("An invalid or illegal string was specified.");
              L2 = e4, this.hasBeenReset = true;
            } })), o2.displayState = void 0;
          }
          return a2.prototype.getCueAsHTML = function() {
            return self.WebVTT.convertCueToDOMTree(self, this.text);
          }, a2;
        }(), ka = function() {
          function t3() {
          }
          return t3.prototype.decode = function(t4, e2) {
            if (!t4) return "";
            if ("string" != typeof t4) throw new Error("Error - expected string data.");
            return decodeURIComponent(encodeURIComponent(t4));
          }, t3;
        }();
        function Da(t3) {
          function e2(t4, e3, r4, i4) {
            return 3600 * (0 | t4) + 60 * (0 | e3) + (0 | r4) + parseFloat(i4 || 0);
          }
          var r3 = t3.match(/^(?:(\d+):)?(\d{2}):(\d{2})(\.\d+)?/);
          return r3 ? parseFloat(r3[2]) > 59 ? e2(r3[2], r3[3], 0, r3[4]) : e2(r3[1], r3[2], r3[3], r3[4]) : null;
        }
        var Ia = function() {
          function t3() {
            this.values = /* @__PURE__ */ Object.create(null);
          }
          var e2 = t3.prototype;
          return e2.set = function(t4, e3) {
            this.get(t4) || "" === e3 || (this.values[t4] = e3);
          }, e2.get = function(t4, e3, r3) {
            return r3 ? this.has(t4) ? this.values[t4] : e3[r3] : this.has(t4) ? this.values[t4] : e3;
          }, e2.has = function(t4) {
            return t4 in this.values;
          }, e2.alt = function(t4, e3, r3) {
            for (var i4 = 0; i4 < r3.length; ++i4) if (e3 === r3[i4]) {
              this.set(t4, e3);
              break;
            }
          }, e2.integer = function(t4, e3) {
            /^-?\d+$/.test(e3) && this.set(t4, parseInt(e3, 10));
          }, e2.percent = function(t4, e3) {
            if (/^([\d]{1,3})(\.[\d]*)?%$/.test(e3)) {
              var r3 = parseFloat(e3);
              if (r3 >= 0 && r3 <= 100) return this.set(t4, r3), true;
            }
            return false;
          }, t3;
        }();
        function wa(t3, e2, r3, i4) {
          var n2 = i4 ? t3.split(i4) : [t3];
          for (var a2 in n2) if ("string" == typeof n2[a2]) {
            var s3 = n2[a2].split(r3);
            2 === s3.length && e2(s3[0], s3[1]);
          }
        }
        var Ca = new ba(0, 0, ""), _a = "middle" === Ca.align ? "middle" : "center";
        function xa(t3, e2, r3) {
          var i4 = t3;
          function n2() {
            var e3 = Da(t3);
            if (null === e3) throw new Error("Malformed timestamp: " + i4);
            return t3 = t3.replace(/^[^\sa-zA-Z-]+/, ""), e3;
          }
          function a2() {
            t3 = t3.replace(/^\s+/, "");
          }
          if (a2(), e2.startTime = n2(), a2(), "-->" !== t3.slice(0, 3)) throw new Error("Malformed time stamp (time stamps must be separated by '-->'): " + i4);
          t3 = t3.slice(3), a2(), e2.endTime = n2(), a2(), function(t4, e3) {
            var i5 = new Ia();
            wa(t4, function(t5, e4) {
              var n4;
              switch (t5) {
                case "region":
                  for (var a4 = r3.length - 1; a4 >= 0; a4--) if (r3[a4].id === e4) {
                    i5.set(t5, r3[a4].region);
                    break;
                  }
                  break;
                case "vertical":
                  i5.alt(t5, e4, ["rl", "lr"]);
                  break;
                case "line":
                  n4 = e4.split(","), i5.integer(t5, n4[0]), i5.percent(t5, n4[0]) && i5.set("snapToLines", false), i5.alt(t5, n4[0], ["auto"]), 2 === n4.length && i5.alt("lineAlign", n4[1], ["start", _a, "end"]);
                  break;
                case "position":
                  n4 = e4.split(","), i5.percent(t5, n4[0]), 2 === n4.length && i5.alt("positionAlign", n4[1], ["start", _a, "end", "line-left", "line-right", "auto"]);
                  break;
                case "size":
                  i5.percent(t5, e4);
                  break;
                case "align":
                  i5.alt(t5, e4, ["start", _a, "end", "left", "right"]);
              }
            }, /:/, /\s/), e3.region = i5.get("region", null), e3.vertical = i5.get("vertical", "");
            var n3 = i5.get("line", "auto");
            "auto" === n3 && -1 === Ca.line && (n3 = -1), e3.line = n3, e3.lineAlign = i5.get("lineAlign", "start"), e3.snapToLines = i5.get("snapToLines", true), e3.size = i5.get("size", 100), e3.align = i5.get("align", _a);
            var a3 = i5.get("position", "auto");
            "auto" === a3 && 50 === Ca.position && (a3 = "start" === e3.align || "left" === e3.align ? 0 : "end" === e3.align || "right" === e3.align ? 100 : 50), e3.position = a3;
          }(t3, e2);
        }
        function Pa(t3) {
          return t3.replace(/<br(?: \/)?>/gi, "\n");
        }
        var Fa = function() {
          function t3() {
            this.state = "INITIAL", this.buffer = "", this.decoder = new ka(), this.regionList = [], this.cue = null, this.oncue = void 0, this.onparsingerror = void 0, this.onflush = void 0;
          }
          var e2 = t3.prototype;
          return e2.parse = function(t4) {
            var e3 = this;
            function r3() {
              var t5 = e3.buffer, r4 = 0;
              for (t5 = Pa(t5); r4 < t5.length && "\r" !== t5[r4] && "\n" !== t5[r4]; ) ++r4;
              var i5 = t5.slice(0, r4);
              return "\r" === t5[r4] && ++r4, "\n" === t5[r4] && ++r4, e3.buffer = t5.slice(r4), i5;
            }
            t4 && (e3.buffer += e3.decoder.decode(t4, { stream: true }));
            try {
              var i4 = "";
              if ("INITIAL" === e3.state) {
                if (!/\r\n|\n/.test(e3.buffer)) return this;
                var n2 = (i4 = r3()).match(/^(ï»¿)?WEBVTT([ \t].*)?$/);
                if (null == n2 || !n2[0]) throw new Error("Malformed WebVTT signature.");
                e3.state = "HEADER";
              }
              for (var a2 = false; e3.buffer; ) {
                if (!/\r\n|\n/.test(e3.buffer)) return this;
                switch (a2 ? a2 = false : i4 = r3(), e3.state) {
                  case "HEADER":
                    /:/.test(i4) ? wa(i4, function(t5, e4) {
                    }, /:/) : i4 || (e3.state = "ID");
                    continue;
                  case "NOTE":
                    i4 || (e3.state = "ID");
                    continue;
                  case "ID":
                    if (/^NOTE($|[ \t])/.test(i4)) {
                      e3.state = "NOTE";
                      break;
                    }
                    if (!i4) continue;
                    if (e3.cue = new ba(0, 0, ""), e3.state = "CUE", -1 === i4.indexOf("-->")) {
                      e3.cue.id = i4;
                      continue;
                    }
                  case "CUE":
                    if (!e3.cue) {
                      e3.state = "BADCUE";
                      continue;
                    }
                    try {
                      xa(i4, e3.cue, e3.regionList);
                    } catch (t5) {
                      e3.cue = null, e3.state = "BADCUE";
                      continue;
                    }
                    e3.state = "CUETEXT";
                    continue;
                  case "CUETEXT":
                    var s3 = -1 !== i4.indexOf("-->");
                    if (!i4 || s3 && (a2 = true)) {
                      e3.oncue && e3.cue && e3.oncue(e3.cue), e3.cue = null, e3.state = "ID";
                      continue;
                    }
                    if (null === e3.cue) continue;
                    e3.cue.text && (e3.cue.text += "\n"), e3.cue.text += i4;
                    continue;
                  case "BADCUE":
                    i4 || (e3.state = "ID");
                }
              }
            } catch (t5) {
              "CUETEXT" === e3.state && e3.cue && e3.oncue && e3.oncue(e3.cue), e3.cue = null, e3.state = "INITIAL" === e3.state ? "BADWEBVTT" : "BADCUE";
            }
            return this;
          }, e2.flush = function() {
            var t4 = this;
            try {
              if ((t4.cue || "HEADER" === t4.state) && (t4.buffer += "\n\n", t4.parse()), "INITIAL" === t4.state || "BADWEBVTT" === t4.state) throw new Error("Malformed WebVTT signature.");
            } catch (e3) {
              t4.onparsingerror && t4.onparsingerror(e3);
            }
            return t4.onflush && t4.onflush(), this;
          }, t3;
        }(), Ma = /\r\n|\n\r|\n|\r/g, Oa = function(t3, e2, r3) {
          return void 0 === r3 && (r3 = 0), t3.slice(r3, r3 + e2.length) === e2;
        }, Na = function(t3) {
          for (var e2 = 5381, r3 = t3.length; r3; ) e2 = 33 * e2 ^ t3.charCodeAt(--r3);
          return (e2 >>> 0).toString();
        };
        function Ua(t3, e2, r3) {
          return Na(t3.toString()) + Na(e2.toString()) + Na(r3);
        }
        function Ba(t3, e2, r3, i4, n2, a2, s3) {
          var o2, l2, u2, h2 = new Fa(), d2 = Rt(new Uint8Array(t3)).trim().replace(Ma, "\n").split("\n"), c2 = [], f3 = e2 ? (o2 = e2.baseTime, void 0 === (l2 = e2.timescale) && (l2 = 1), Rn(o2, An, 1 / l2)) : 0, g2 = "00:00.000", v2 = 0, m2 = 0, p2 = true;
          h2.oncue = function(t4) {
            var a3 = r3[i4], s4 = r3.ccOffset, o3 = (v2 - f3) / 9e4;
            if (null != a3 && a3.new && (void 0 !== m2 ? s4 = r3.ccOffset = a3.start : function(t5, e3, r4) {
              var i5 = t5[e3], n3 = t5[i5.prevCC];
              if (!n3 || !n3.new && i5.new) return t5.ccOffset = t5.presentationOffset = i5.start, void (i5.new = false);
              for (; null != (a4 = n3) && a4.new; ) {
                var a4;
                t5.ccOffset += i5.start - n3.start, i5.new = false, n3 = t5[(i5 = n3).prevCC];
              }
              t5.presentationOffset = r4;
            }(r3, i4, o3)), o3) {
              if (!e2) return void (u2 = new Error("Missing initPTS for VTT MPEGTS"));
              s4 = o3 - r3.presentationOffset;
            }
            var l3 = t4.endTime - t4.startTime, h3 = wn(9e4 * (t4.startTime + s4 - m2), 9e4 * n2) / 9e4;
            t4.startTime = Math.max(h3, 0), t4.endTime = Math.max(h3 + l3, 0);
            var d3 = t4.text.trim();
            t4.text = decodeURIComponent(encodeURIComponent(d3)), t4.id || (t4.id = Ua(t4.startTime, t4.endTime, d3)), t4.endTime > 0 && c2.push(t4);
          }, h2.onparsingerror = function(t4) {
            u2 = t4;
          }, h2.onflush = function() {
            u2 ? s3(u2) : a2(c2);
          }, d2.forEach(function(t4) {
            if (p2) {
              if (Oa(t4, "X-TIMESTAMP-MAP=")) {
                p2 = false, t4.slice(16).split(",").forEach(function(t5) {
                  Oa(t5, "LOCAL:") ? g2 = t5.slice(6) : Oa(t5, "MPEGTS:") && (v2 = parseInt(t5.slice(7)));
                });
                try {
                  m2 = function(t5) {
                    var e3 = parseInt(t5.slice(-3)), r4 = parseInt(t5.slice(-6, -4)), i5 = parseInt(t5.slice(-9, -7)), n3 = t5.length > 9 ? parseInt(t5.substring(0, t5.indexOf(":"))) : 0;
                    if (!(y(e3) && y(r4) && y(i5) && y(n3))) throw Error("Malformed X-TIMESTAMP-MAP: Local:" + t5);
                    return e3 += 1e3 * r4, (e3 += 6e4 * i5) + 36e5 * n3;
                  }(g2) / 1e3;
                } catch (t5) {
                  u2 = t5;
                }
                return;
              }
              "" === t4 && (p2 = false);
            }
            h2.parse(t4 + "\n");
          }), h2.flush();
        }
        var Ga = "stpp.ttml.im1t", Ka = /^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/, Ha = /^(\d*(?:\.\d*)?)(h|m|s|ms|f|t)$/, Va = { left: "start", center: "center", right: "end", start: "start", end: "end" };
        function Ya(t3, e2, r3, i4) {
          var n2 = Ot(new Uint8Array(t3), ["mdat"]);
          if (0 !== n2.length) {
            var a2, s3, l2, u2, h2 = n2.map(function(t4) {
              return Rt(t4);
            }), d2 = (a2 = e2.baseTime, s3 = 1, void 0 === (l2 = e2.timescale) && (l2 = 1), void 0 === u2 && (u2 = false), Rn(a2, s3, 1 / l2, u2));
            try {
              h2.forEach(function(t4) {
                return r3(function(t5, e3) {
                  var r4 = new DOMParser().parseFromString(t5, "text/xml"), i5 = r4.getElementsByTagName("tt")[0];
                  if (!i5) throw new Error("Invalid ttml");
                  var n3 = { frameRate: 30, subFrameRate: 1, frameRateMultiplier: 0, tickRate: 0 }, a3 = Object.keys(n3).reduce(function(t6, e4) {
                    return t6[e4] = i5.getAttribute("ttp:" + e4) || n3[e4], t6;
                  }, {}), s4 = "preserve" !== i5.getAttribute("xml:space"), l3 = ja(Wa(i5, "styling", "style")), u3 = ja(Wa(i5, "layout", "region")), h3 = Wa(i5, "body", "[begin]");
                  return [].map.call(h3, function(t6) {
                    var r5 = qa(t6, s4);
                    if (!r5 || !t6.hasAttribute("begin")) return null;
                    var i6 = Qa(t6.getAttribute("begin"), a3), n4 = Qa(t6.getAttribute("dur"), a3), h4 = Qa(t6.getAttribute("end"), a3);
                    if (null === i6) throw za(t6);
                    if (null === h4) {
                      if (null === n4) throw za(t6);
                      h4 = i6 + n4;
                    }
                    var d3 = new ba(i6 - e3, h4 - e3, r5);
                    d3.id = Ua(d3.startTime, d3.endTime, d3.text);
                    var c2 = function(t7, e4, r6) {
                      var i7 = "http://www.w3.org/ns/ttml#styling", n5 = null, a4 = ["displayAlign", "textAlign", "color", "backgroundColor", "fontSize", "fontFamily"], s5 = null != t7 && t7.hasAttribute("style") ? t7.getAttribute("style") : null;
                      return s5 && r6.hasOwnProperty(s5) && (n5 = r6[s5]), a4.reduce(function(r7, a5) {
                        var s6 = Xa(e4, i7, a5) || Xa(t7, i7, a5) || Xa(n5, i7, a5);
                        return s6 && (r7[a5] = s6), r7;
                      }, {});
                    }(u3[t6.getAttribute("region")], l3[t6.getAttribute("style")], l3), f3 = c2.textAlign;
                    if (f3) {
                      var g2 = Va[f3];
                      g2 && (d3.lineAlign = g2), d3.align = f3;
                    }
                    return o(d3, c2), d3;
                  }).filter(function(t6) {
                    return null !== t6;
                  });
                }(t4, d2));
              });
            } catch (t4) {
              i4(t4);
            }
          } else i4(new Error("Could not parse IMSC1 mdat"));
        }
        function Wa(t3, e2, r3) {
          var i4 = t3.getElementsByTagName(e2)[0];
          return i4 ? [].slice.call(i4.querySelectorAll(r3)) : [];
        }
        function ja(t3) {
          return t3.reduce(function(t4, e2) {
            var r3 = e2.getAttribute("xml:id");
            return r3 && (t4[r3] = e2), t4;
          }, {});
        }
        function qa(t3, e2) {
          return [].slice.call(t3.childNodes).reduce(function(t4, r3, i4) {
            var n2;
            return "br" === r3.nodeName && i4 ? t4 + "\n" : null != (n2 = r3.childNodes) && n2.length ? qa(r3, e2) : e2 ? t4 + r3.textContent.trim().replace(/\s+/g, " ") : t4 + r3.textContent;
          }, "");
        }
        function Xa(t3, e2, r3) {
          return t3 && t3.hasAttributeNS(e2, r3) ? t3.getAttributeNS(e2, r3) : null;
        }
        function za(t3) {
          return new Error("Could not parse ttml timestamp " + t3);
        }
        function Qa(t3, e2) {
          if (!t3) return null;
          var r3 = Da(t3);
          return null === r3 && (Ka.test(t3) ? r3 = function(t4, e3) {
            var r4 = Ka.exec(t4), i4 = (0 | r4[4]) + (0 | r4[5]) / e3.subFrameRate;
            return 3600 * (0 | r4[1]) + 60 * (0 | r4[2]) + (0 | r4[3]) + i4 / e3.frameRate;
          }(t3, e2) : Ha.test(t3) && (r3 = function(t4, e3) {
            var r4 = Ha.exec(t4), i4 = Number(r4[1]);
            switch (r4[2]) {
              case "h":
                return 3600 * i4;
              case "m":
                return 60 * i4;
              case "ms":
                return 1e3 * i4;
              case "f":
                return i4 / e3.frameRate;
              case "t":
                return i4 / e3.tickRate;
            }
            return i4;
          }(t3, e2))), r3;
        }
        var Ja = function() {
          function t3(t4) {
            this.hls = void 0, this.media = null, this.config = void 0, this.enabled = true, this.Cues = void 0, this.textTracks = [], this.tracks = [], this.initPTS = [], this.unparsedVttFrags = [], this.captionsTracks = {}, this.nonNativeCaptionsTracks = {}, this.cea608Parser1 = void 0, this.cea608Parser2 = void 0, this.lastCc = -1, this.lastSn = -1, this.lastPartIndex = -1, this.prevCC = -1, this.vttCCs = { ccOffset: 0, presentationOffset: 0, 0: { start: 0, prevCC: -1, new: true } }, this.captionsProperties = void 0, this.hls = t4, this.config = t4.config, this.Cues = t4.config.cueHandler, this.captionsProperties = { textTrack1: { label: this.config.captionsTextTrack1Label, languageCode: this.config.captionsTextTrack1LanguageCode }, textTrack2: { label: this.config.captionsTextTrack2Label, languageCode: this.config.captionsTextTrack2LanguageCode }, textTrack3: { label: this.config.captionsTextTrack3Label, languageCode: this.config.captionsTextTrack3LanguageCode }, textTrack4: { label: this.config.captionsTextTrack4Label, languageCode: this.config.captionsTextTrack4LanguageCode } }, t4.on(S.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.on(S.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(S.MANIFEST_LOADED, this.onManifestLoaded, this), t4.on(S.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t4.on(S.FRAG_LOADING, this.onFragLoading, this), t4.on(S.FRAG_LOADED, this.onFragLoaded, this), t4.on(S.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this), t4.on(S.FRAG_DECRYPTED, this.onFragDecrypted, this), t4.on(S.INIT_PTS_FOUND, this.onInitPtsFound, this), t4.on(S.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this), t4.on(S.BUFFER_FLUSHING, this.onBufferFlushing, this);
          }
          var e2 = t3.prototype;
          return e2.destroy = function() {
            var t4 = this.hls;
            t4.off(S.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.off(S.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(S.MANIFEST_LOADED, this.onManifestLoaded, this), t4.off(S.SUBTITLE_TRACKS_UPDATED, this.onSubtitleTracksUpdated, this), t4.off(S.FRAG_LOADING, this.onFragLoading, this), t4.off(S.FRAG_LOADED, this.onFragLoaded, this), t4.off(S.FRAG_PARSING_USERDATA, this.onFragParsingUserdata, this), t4.off(S.FRAG_DECRYPTED, this.onFragDecrypted, this), t4.off(S.INIT_PTS_FOUND, this.onInitPtsFound, this), t4.off(S.SUBTITLE_TRACKS_CLEARED, this.onSubtitleTracksCleared, this), t4.off(S.BUFFER_FLUSHING, this.onBufferFlushing, this), this.hls = this.config = null, this.cea608Parser1 = this.cea608Parser2 = void 0;
          }, e2.initCea608Parsers = function() {
            if (this.config.enableCEA708Captions && (!this.cea608Parser1 || !this.cea608Parser2)) {
              var t4 = new Ra(this, "textTrack1"), e3 = new Ra(this, "textTrack2"), r3 = new Ra(this, "textTrack3"), i4 = new Ra(this, "textTrack4");
              this.cea608Parser1 = new La(1, t4, e3), this.cea608Parser2 = new La(3, r3, i4);
            }
          }, e2.addCues = function(t4, e3, r3, i4, n2) {
            for (var a2, s3, o2, l2, u2 = false, h2 = n2.length; h2--; ) {
              var d2 = n2[h2], c2 = (a2 = d2[0], s3 = d2[1], o2 = e3, l2 = r3, Math.min(s3, l2) - Math.max(a2, o2));
              if (c2 >= 0 && (d2[0] = Math.min(d2[0], e3), d2[1] = Math.max(d2[1], r3), u2 = true, c2 / (r3 - e3) > 0.5)) return;
            }
            if (u2 || n2.push([e3, r3]), this.config.renderTextTracksNatively) {
              var f3 = this.captionsTracks[t4];
              this.Cues.newCue(f3, e3, r3, i4);
            } else {
              var g2 = this.Cues.newCue(null, e3, r3, i4);
              this.hls.trigger(S.CUES_PARSED, { type: "captions", cues: g2, track: t4 });
            }
          }, e2.onInitPtsFound = function(t4, e3) {
            var r3 = this, i4 = e3.frag, n2 = e3.id, a2 = e3.initPTS, s3 = e3.timescale, o2 = this.unparsedVttFrags;
            "main" === n2 && (this.initPTS[i4.cc] = { baseTime: a2, timescale: s3 }), o2.length && (this.unparsedVttFrags = [], o2.forEach(function(t5) {
              r3.onFragLoaded(S.FRAG_LOADED, t5);
            }));
          }, e2.getExistingTrack = function(t4, e3) {
            var r3 = this.media;
            if (r3) for (var i4 = 0; i4 < r3.textTracks.length; i4++) {
              var n2 = r3.textTracks[i4];
              if (Za(n2, { name: t4, lang: e3, attrs: {} })) return n2;
            }
            return null;
          }, e2.createCaptionsTrack = function(t4) {
            this.config.renderTextTracksNatively ? this.createNativeTrack(t4) : this.createNonNativeTrack(t4);
          }, e2.createNativeTrack = function(t4) {
            if (!this.captionsTracks[t4]) {
              var e3 = this.captionsProperties, r3 = this.captionsTracks, i4 = this.media, n2 = e3[t4], a2 = n2.label, s3 = n2.languageCode, o2 = this.getExistingTrack(a2, s3);
              if (o2) r3[t4] = o2, He(r3[t4]), Ge(r3[t4], i4);
              else {
                var l2 = this.createTextTrack("captions", a2, s3);
                l2 && (l2[t4] = true, r3[t4] = l2);
              }
            }
          }, e2.createNonNativeTrack = function(t4) {
            if (!this.nonNativeCaptionsTracks[t4]) {
              var e3 = this.captionsProperties[t4];
              if (e3) {
                var r3 = { _id: t4, label: e3.label, kind: "captions", default: !!e3.media && !!e3.media.default, closedCaptions: e3.media };
                this.nonNativeCaptionsTracks[t4] = r3, this.hls.trigger(S.NON_NATIVE_TEXT_TRACKS_FOUND, { tracks: [r3] });
              }
            }
          }, e2.createTextTrack = function(t4, e3, r3) {
            var i4 = this.media;
            if (i4) return i4.addTextTrack(t4, e3, r3);
          }, e2.onMediaAttaching = function(t4, e3) {
            this.media = e3.media, this._cleanTracks();
          }, e2.onMediaDetaching = function() {
            var t4 = this.captionsTracks;
            Object.keys(t4).forEach(function(e3) {
              He(t4[e3]), delete t4[e3];
            }), this.nonNativeCaptionsTracks = {};
          }, e2.onManifestLoading = function() {
            this.lastCc = -1, this.lastSn = -1, this.lastPartIndex = -1, this.prevCC = -1, this.vttCCs = { ccOffset: 0, presentationOffset: 0, 0: { start: 0, prevCC: -1, new: true } }, this._cleanTracks(), this.tracks = [], this.captionsTracks = {}, this.nonNativeCaptionsTracks = {}, this.textTracks = [], this.unparsedVttFrags = [], this.initPTS = [], this.cea608Parser1 && this.cea608Parser2 && (this.cea608Parser1.reset(), this.cea608Parser2.reset());
          }, e2._cleanTracks = function() {
            var t4 = this.media;
            if (t4) {
              var e3 = t4.textTracks;
              if (e3) for (var r3 = 0; r3 < e3.length; r3++) He(e3[r3]);
            }
          }, e2.onSubtitleTracksUpdated = function(t4, e3) {
            var r3 = this, i4 = e3.subtitleTracks || [], n2 = i4.some(function(t5) {
              return t5.textCodec === Ga;
            });
            if (this.config.enableWebVTT || n2 && this.config.enableIMSC1) {
              if (Xn(this.tracks, i4)) return void (this.tracks = i4);
              if (this.textTracks = [], this.tracks = i4, this.config.renderTextTracksNatively) {
                var a2 = this.media, s3 = a2 ? Ye(a2.textTracks) : null;
                if (this.tracks.forEach(function(t5, e4) {
                  var i5;
                  if (s3) {
                    for (var n3 = null, a3 = 0; a3 < s3.length; a3++) if (s3[a3] && Za(s3[a3], t5)) {
                      n3 = s3[a3], s3[a3] = null;
                      break;
                    }
                    n3 && (i5 = n3);
                  }
                  if (i5) He(i5);
                  else {
                    var o3 = $a(t5);
                    (i5 = r3.createTextTrack(o3, t5.name, t5.lang)) && (i5.mode = "disabled");
                  }
                  i5 && r3.textTracks.push(i5);
                }), null != s3 && s3.length) {
                  var o2 = s3.filter(function(t5) {
                    return null !== t5;
                  }).map(function(t5) {
                    return t5.label;
                  });
                  o2.length && w.warn("Media element contains unused subtitle tracks: " + o2.join(", ") + ". Replace media element for each source to clear TextTracks and captions menu.");
                }
              } else if (this.tracks.length) {
                var l2 = this.tracks.map(function(t5) {
                  return { label: t5.name, kind: t5.type.toLowerCase(), default: t5.default, subtitleTrack: t5 };
                });
                this.hls.trigger(S.NON_NATIVE_TEXT_TRACKS_FOUND, { tracks: l2 });
              }
            }
          }, e2.onManifestLoaded = function(t4, e3) {
            var r3 = this;
            this.config.enableCEA708Captions && e3.captions && e3.captions.forEach(function(t5) {
              var e4 = /(?:CC|SERVICE)([1-4])/.exec(t5.instreamId);
              if (e4) {
                var i4 = "textTrack" + e4[1], n2 = r3.captionsProperties[i4];
                n2 && (n2.label = t5.name, t5.lang && (n2.languageCode = t5.lang), n2.media = t5);
              }
            });
          }, e2.closedCaptionsForLevel = function(t4) {
            var e3 = this.hls.levels[t4.level];
            return null == e3 ? void 0 : e3.attrs["CLOSED-CAPTIONS"];
          }, e2.onFragLoading = function(t4, e3) {
            if (this.enabled && e3.frag.type === Fe) {
              var r3, i4, n2 = this.cea608Parser1, a2 = this.cea608Parser2, s3 = this.lastSn, o2 = e3.frag, l2 = o2.cc, u2 = o2.sn, h2 = null != (r3 = null == (i4 = e3.part) ? void 0 : i4.index) ? r3 : -1;
              n2 && a2 && (u2 !== s3 + 1 || u2 === s3 && h2 !== this.lastPartIndex + 1 || l2 !== this.lastCc) && (n2.reset(), a2.reset()), this.lastCc = l2, this.lastSn = u2, this.lastPartIndex = h2;
            }
          }, e2.onFragLoaded = function(t4, e3) {
            var r3 = e3.frag, i4 = e3.payload;
            if (r3.type === Oe) if (i4.byteLength) {
              var n2 = r3.decryptdata, a2 = "stats" in e3;
              if (null == n2 || !n2.encrypted || a2) {
                var s3 = this.tracks[r3.level], o2 = this.vttCCs;
                o2[r3.cc] || (o2[r3.cc] = { start: r3.start, prevCC: this.prevCC, new: true }, this.prevCC = r3.cc), s3 && s3.textCodec === Ga ? this._parseIMSC1(r3, i4) : this._parseVTTs(e3);
              }
            } else this.hls.trigger(S.SUBTITLE_FRAG_PROCESSED, { success: false, frag: r3, error: new Error("Empty subtitle payload") });
          }, e2._parseIMSC1 = function(t4, e3) {
            var r3 = this, i4 = this.hls;
            Ya(e3, this.initPTS[t4.cc], function(e4) {
              r3._appendCues(e4, t4.level), i4.trigger(S.SUBTITLE_FRAG_PROCESSED, { success: true, frag: t4 });
            }, function(e4) {
              w.log("Failed to parse IMSC1: " + e4), i4.trigger(S.SUBTITLE_FRAG_PROCESSED, { success: false, frag: t4, error: e4 });
            });
          }, e2._parseVTTs = function(t4) {
            var e3, r3 = this, i4 = t4.frag, n2 = t4.payload, a2 = this.initPTS, s3 = this.unparsedVttFrags, o2 = a2.length - 1;
            if (a2[i4.cc] || -1 !== o2) {
              var l2 = this.hls;
              Ba(null != (e3 = i4.initSegment) && e3.data ? Wt(i4.initSegment.data, new Uint8Array(n2)) : n2, this.initPTS[i4.cc], this.vttCCs, i4.cc, i4.start, function(t5) {
                r3._appendCues(t5, i4.level), l2.trigger(S.SUBTITLE_FRAG_PROCESSED, { success: true, frag: i4 });
              }, function(e4) {
                var a3 = "Missing initPTS for VTT MPEGTS" === e4.message;
                a3 ? s3.push(t4) : r3._fallbackToIMSC1(i4, n2), w.log("Failed to parse VTT cue: " + e4), a3 && o2 > i4.cc || l2.trigger(S.SUBTITLE_FRAG_PROCESSED, { success: false, frag: i4, error: e4 });
              });
            } else s3.push(t4);
          }, e2._fallbackToIMSC1 = function(t4, e3) {
            var r3 = this, i4 = this.tracks[t4.level];
            i4.textCodec || Ya(e3, this.initPTS[t4.cc], function() {
              i4.textCodec = Ga, r3._parseIMSC1(t4, e3);
            }, function() {
              i4.textCodec = "wvtt";
            });
          }, e2._appendCues = function(t4, e3) {
            var r3 = this.hls;
            if (this.config.renderTextTracksNatively) {
              var i4 = this.textTracks[e3];
              if (!i4 || "disabled" === i4.mode) return;
              t4.forEach(function(t5) {
                return Ke(i4, t5);
              });
            } else {
              var n2 = this.tracks[e3];
              if (!n2) return;
              var a2 = n2.default ? "default" : "subtitles" + e3;
              r3.trigger(S.CUES_PARSED, { type: "subtitles", cues: t4, track: a2 });
            }
          }, e2.onFragDecrypted = function(t4, e3) {
            e3.frag.type === Oe && this.onFragLoaded(S.FRAG_LOADED, e3);
          }, e2.onSubtitleTracksCleared = function() {
            this.tracks = [], this.captionsTracks = {};
          }, e2.onFragParsingUserdata = function(t4, e3) {
            this.initCea608Parsers();
            var r3 = this.cea608Parser1, i4 = this.cea608Parser2;
            if (this.enabled && r3 && i4) {
              var n2 = e3.frag, a2 = e3.samples;
              if (n2.type !== Fe || "NONE" !== this.closedCaptionsForLevel(n2)) for (var s3 = 0; s3 < a2.length; s3++) {
                var o2 = a2[s3].bytes;
                if (o2) {
                  var l2 = this.extractCea608Data(o2);
                  r3.addData(a2[s3].pts, l2[0]), i4.addData(a2[s3].pts, l2[1]);
                }
              }
            }
          }, e2.onBufferFlushing = function(t4, e3) {
            var r3 = e3.startOffset, i4 = e3.endOffset, n2 = e3.endOffsetSubtitles, a2 = e3.type, s3 = this.media;
            if (s3 && !(s3.currentTime < i4)) {
              if (!a2 || "video" === a2) {
                var o2 = this.captionsTracks;
                Object.keys(o2).forEach(function(t5) {
                  return Ve(o2[t5], r3, i4);
                });
              }
              if (this.config.renderTextTracksNatively && 0 === r3 && void 0 !== n2) {
                var l2 = this.textTracks;
                Object.keys(l2).forEach(function(t5) {
                  return Ve(l2[t5], r3, n2);
                });
              }
            }
          }, e2.extractCea608Data = function(t4) {
            for (var e3 = [[], []], r3 = 31 & t4[0], i4 = 2, n2 = 0; n2 < r3; n2++) {
              var a2 = t4[i4++], s3 = 127 & t4[i4++], o2 = 127 & t4[i4++];
              if ((0 !== s3 || 0 !== o2) && 0 != (4 & a2)) {
                var l2 = 3 & a2;
                0 !== l2 && 1 !== l2 || (e3[l2].push(s3), e3[l2].push(o2));
              }
            }
            return e3;
          }, t3;
        }();
        function $a(t3) {
          return t3.characteristics && /transcribes-spoken-dialog/gi.test(t3.characteristics) && /describes-music-and-sound/gi.test(t3.characteristics) ? "captions" : "subtitles";
        }
        function Za(t3, e2) {
          return !!t3 && t3.kind === $a(e2) && Qn(e2, t3);
        }
        var ts = function() {
          function t3(t4) {
            this.hls = void 0, this.autoLevelCapping = void 0, this.firstLevel = void 0, this.media = void 0, this.restrictedLevels = void 0, this.timer = void 0, this.clientRect = void 0, this.streamController = void 0, this.hls = t4, this.autoLevelCapping = Number.POSITIVE_INFINITY, this.firstLevel = -1, this.media = null, this.restrictedLevels = [], this.timer = void 0, this.clientRect = null, this.registerListeners();
          }
          var e2 = t3.prototype;
          return e2.setStreamController = function(t4) {
            this.streamController = t4;
          }, e2.destroy = function() {
            this.hls && this.unregisterListener(), this.timer && this.stopCapping(), this.media = null, this.clientRect = null, this.hls = this.streamController = null;
          }, e2.registerListeners = function() {
            var t4 = this.hls;
            t4.on(S.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this), t4.on(S.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.on(S.MANIFEST_PARSED, this.onManifestParsed, this), t4.on(S.LEVELS_UPDATED, this.onLevelsUpdated, this), t4.on(S.BUFFER_CODECS, this.onBufferCodecs, this), t4.on(S.MEDIA_DETACHING, this.onMediaDetaching, this);
          }, e2.unregisterListener = function() {
            var t4 = this.hls;
            t4.off(S.FPS_DROP_LEVEL_CAPPING, this.onFpsDropLevelCapping, this), t4.off(S.MEDIA_ATTACHING, this.onMediaAttaching, this), t4.off(S.MANIFEST_PARSED, this.onManifestParsed, this), t4.off(S.LEVELS_UPDATED, this.onLevelsUpdated, this), t4.off(S.BUFFER_CODECS, this.onBufferCodecs, this), t4.off(S.MEDIA_DETACHING, this.onMediaDetaching, this);
          }, e2.onFpsDropLevelCapping = function(t4, e3) {
            var r3 = this.hls.levels[e3.droppedLevel];
            this.isLevelAllowed(r3) && this.restrictedLevels.push({ bitrate: r3.bitrate, height: r3.height, width: r3.width });
          }, e2.onMediaAttaching = function(t4, e3) {
            this.media = e3.media instanceof HTMLVideoElement ? e3.media : null, this.clientRect = null, this.timer && this.hls.levels.length && this.detectPlayerSize();
          }, e2.onManifestParsed = function(t4, e3) {
            var r3 = this.hls;
            this.restrictedLevels = [], this.firstLevel = e3.firstLevel, r3.config.capLevelToPlayerSize && e3.video && this.startCapping();
          }, e2.onLevelsUpdated = function(t4, e3) {
            this.timer && y(this.autoLevelCapping) && this.detectPlayerSize();
          }, e2.onBufferCodecs = function(t4, e3) {
            this.hls.config.capLevelToPlayerSize && e3.video && this.startCapping();
          }, e2.onMediaDetaching = function() {
            this.stopCapping();
          }, e2.detectPlayerSize = function() {
            if (this.media) {
              if (this.mediaHeight <= 0 || this.mediaWidth <= 0) return void (this.clientRect = null);
              var t4 = this.hls.levels;
              if (t4.length) {
                var e3 = this.hls, r3 = this.getMaxLevel(t4.length - 1);
                r3 !== this.autoLevelCapping && w.log("Setting autoLevelCapping to " + r3 + ": " + t4[r3].height + "p@" + t4[r3].bitrate + " for media " + this.mediaWidth + "x" + this.mediaHeight), e3.autoLevelCapping = r3, e3.autoLevelCapping > this.autoLevelCapping && this.streamController && this.streamController.nextLevelSwitch(), this.autoLevelCapping = e3.autoLevelCapping;
              }
            }
          }, e2.getMaxLevel = function(e3) {
            var r3 = this, i4 = this.hls.levels;
            if (!i4.length) return -1;
            var n2 = i4.filter(function(t4, i5) {
              return r3.isLevelAllowed(t4) && i5 <= e3;
            });
            return this.clientRect = null, t3.getMaxLevelByMediaSize(n2, this.mediaWidth, this.mediaHeight);
          }, e2.startCapping = function() {
            this.timer || (this.autoLevelCapping = Number.POSITIVE_INFINITY, self.clearInterval(this.timer), this.timer = self.setInterval(this.detectPlayerSize.bind(this), 1e3), this.detectPlayerSize());
          }, e2.stopCapping = function() {
            this.restrictedLevels = [], this.firstLevel = -1, this.autoLevelCapping = Number.POSITIVE_INFINITY, this.timer && (self.clearInterval(this.timer), this.timer = void 0);
          }, e2.getDimensions = function() {
            if (this.clientRect) return this.clientRect;
            var t4 = this.media, e3 = { width: 0, height: 0 };
            if (t4) {
              var r3 = t4.getBoundingClientRect();
              e3.width = r3.width, e3.height = r3.height, e3.width || e3.height || (e3.width = r3.right - r3.left || t4.width || 0, e3.height = r3.bottom - r3.top || t4.height || 0);
            }
            return this.clientRect = e3, e3;
          }, e2.isLevelAllowed = function(t4) {
            return !this.restrictedLevels.some(function(e3) {
              return t4.bitrate === e3.bitrate && t4.width === e3.width && t4.height === e3.height;
            });
          }, t3.getMaxLevelByMediaSize = function(t4, e3, r3) {
            if (null == t4 || !t4.length) return -1;
            for (var i4, n2, a2 = t4.length - 1, s3 = Math.max(e3, r3), o2 = 0; o2 < t4.length; o2 += 1) {
              var l2 = t4[o2];
              if ((l2.width >= s3 || l2.height >= s3) && (i4 = l2, !(n2 = t4[o2 + 1]) || i4.width !== n2.width || i4.height !== n2.height)) {
                a2 = o2;
                break;
              }
            }
            return a2;
          }, s2(t3, [{ key: "mediaWidth", get: function() {
            return this.getDimensions().width * this.contentScaleFactor;
          } }, { key: "mediaHeight", get: function() {
            return this.getDimensions().height * this.contentScaleFactor;
          } }, { key: "contentScaleFactor", get: function() {
            var t4 = 1;
            if (!this.hls.config.ignoreDevicePixelRatio) try {
              t4 = self.devicePixelRatio;
            } catch (t5) {
            }
            return t4;
          } }]), t3;
        }(), es = function() {
          function t3(t4) {
            this.hls = void 0, this.isVideoPlaybackQualityAvailable = false, this.timer = void 0, this.media = null, this.lastTime = void 0, this.lastDroppedFrames = 0, this.lastDecodedFrames = 0, this.streamController = void 0, this.hls = t4, this.registerListeners();
          }
          var e2 = t3.prototype;
          return e2.setStreamController = function(t4) {
            this.streamController = t4;
          }, e2.registerListeners = function() {
            this.hls.on(S.MEDIA_ATTACHING, this.onMediaAttaching, this);
          }, e2.unregisterListeners = function() {
            this.hls.off(S.MEDIA_ATTACHING, this.onMediaAttaching, this);
          }, e2.destroy = function() {
            this.timer && clearInterval(this.timer), this.unregisterListeners(), this.isVideoPlaybackQualityAvailable = false, this.media = null;
          }, e2.onMediaAttaching = function(t4, e3) {
            var r3 = this.hls.config;
            if (r3.capLevelOnFPSDrop) {
              var i4 = e3.media instanceof self.HTMLVideoElement ? e3.media : null;
              this.media = i4, i4 && "function" == typeof i4.getVideoPlaybackQuality && (this.isVideoPlaybackQualityAvailable = true), self.clearInterval(this.timer), this.timer = self.setInterval(this.checkFPSInterval.bind(this), r3.fpsDroppedMonitoringPeriod);
            }
          }, e2.checkFPS = function(t4, e3, r3) {
            var i4 = performance.now();
            if (e3) {
              if (this.lastTime) {
                var n2 = i4 - this.lastTime, a2 = r3 - this.lastDroppedFrames, s3 = e3 - this.lastDecodedFrames, o2 = 1e3 * a2 / n2, l2 = this.hls;
                if (l2.trigger(S.FPS_DROP, { currentDropped: a2, currentDecoded: s3, totalDroppedFrames: r3 }), o2 > 0 && a2 > l2.config.fpsDroppedMonitoringThreshold * s3) {
                  var u2 = l2.currentLevel;
                  w.warn("drop FPS ratio greater than max allowed value for currentLevel: " + u2), u2 > 0 && (-1 === l2.autoLevelCapping || l2.autoLevelCapping >= u2) && (u2 -= 1, l2.trigger(S.FPS_DROP_LEVEL_CAPPING, { level: u2, droppedLevel: l2.currentLevel }), l2.autoLevelCapping = u2, this.streamController.nextLevelSwitch());
                }
              }
              this.lastTime = i4, this.lastDroppedFrames = r3, this.lastDecodedFrames = e3;
            }
          }, e2.checkFPSInterval = function() {
            var t4 = this.media;
            if (t4) if (this.isVideoPlaybackQualityAvailable) {
              var e3 = t4.getVideoPlaybackQuality();
              this.checkFPS(t4, e3.totalVideoFrames, e3.droppedVideoFrames);
            } else this.checkFPS(t4, t4.webkitDecodedFrameCount, t4.webkitDroppedFrameCount);
          }, t3;
        }(), rs = "[eme]", is = function() {
          function t3(e3) {
            this.hls = void 0, this.config = void 0, this.media = null, this.keyFormatPromise = null, this.keySystemAccessPromises = {}, this._requestLicenseFailureCount = 0, this.mediaKeySessions = [], this.keyIdToKeySessionPromise = {}, this.setMediaKeysQueue = t3.CDMCleanupPromise ? [t3.CDMCleanupPromise] : [], this.onMediaEncrypted = this._onMediaEncrypted.bind(this), this.onWaitingForKey = this._onWaitingForKey.bind(this), this.debug = w.debug.bind(w, rs), this.log = w.log.bind(w, rs), this.warn = w.warn.bind(w, rs), this.error = w.error.bind(w, rs), this.hls = e3, this.config = e3.config, this.registerListeners();
          }
          var e2 = t3.prototype;
          return e2.destroy = function() {
            this.unregisterListeners(), this.onMediaDetached();
            var t4 = this.config;
            t4.requestMediaKeySystemAccessFunc = null, t4.licenseXhrSetup = t4.licenseResponseCallback = void 0, t4.drmSystems = t4.drmSystemOptions = {}, this.hls = this.onMediaEncrypted = this.onWaitingForKey = this.keyIdToKeySessionPromise = null, this.config = null;
          }, e2.registerListeners = function() {
            this.hls.on(S.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.on(S.MEDIA_DETACHED, this.onMediaDetached, this), this.hls.on(S.MANIFEST_LOADING, this.onManifestLoading, this), this.hls.on(S.MANIFEST_LOADED, this.onManifestLoaded, this);
          }, e2.unregisterListeners = function() {
            this.hls.off(S.MEDIA_ATTACHED, this.onMediaAttached, this), this.hls.off(S.MEDIA_DETACHED, this.onMediaDetached, this), this.hls.off(S.MANIFEST_LOADING, this.onManifestLoading, this), this.hls.off(S.MANIFEST_LOADED, this.onManifestLoaded, this);
          }, e2.getLicenseServerUrl = function(t4) {
            var e3 = this.config, r3 = e3.drmSystems, i4 = e3.widevineLicenseUrl, n2 = r3[t4];
            if (n2) return n2.licenseUrl;
            if (t4 === q.WIDEVINE && i4) return i4;
            throw new Error('no license server URL configured for key-system "' + t4 + '"');
          }, e2.getServerCertificateUrl = function(t4) {
            var e3 = this.config.drmSystems[t4];
            if (e3) return e3.serverCertificateUrl;
            this.log('No Server Certificate in config.drmSystems["' + t4 + '"]');
          }, e2.attemptKeySystemAccess = function(t4) {
            var e3 = this, r3 = this.hls.levels, i4 = function(t5, e4, r4) {
              return !!t5 && r4.indexOf(t5) === e4;
            }, n2 = r3.map(function(t5) {
              return t5.audioCodec;
            }).filter(i4), a2 = r3.map(function(t5) {
              return t5.videoCodec;
            }).filter(i4);
            return n2.length + a2.length === 0 && a2.push("avc1.42e01e"), new Promise(function(r4, i5) {
              !function t5(s3) {
                var o2 = s3.shift();
                e3.getMediaKeysPromise(o2, n2, a2).then(function(t6) {
                  return r4({ keySystem: o2, mediaKeys: t6 });
                }).catch(function(e4) {
                  s3.length ? t5(s3) : i5(e4 instanceof ls ? e4 : new ls({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_NO_ACCESS, error: e4, fatal: true }, e4.message));
                });
              }(t4);
            });
          }, e2.requestMediaKeySystemAccess = function(t4, e3) {
            var r3 = this.config.requestMediaKeySystemAccessFunc;
            if ("function" != typeof r3) {
              var i4 = "Configured requestMediaKeySystemAccess is not a function " + r3;
              return null === ot && "http:" === self.location.protocol && (i4 = "navigator.requestMediaKeySystemAccess is not available over insecure protocol " + location.protocol), Promise.reject(new Error(i4));
            }
            return r3(t4, e3);
          }, e2.getMediaKeysPromise = function(t4, e3, r3) {
            var i4 = this, n2 = function(t5, e4, r4, i5) {
              var n3;
              switch (t5) {
                case q.FAIRPLAY:
                  n3 = ["cenc", "sinf"];
                  break;
                case q.WIDEVINE:
                case q.PLAYREADY:
                  n3 = ["cenc"];
                  break;
                case q.CLEARKEY:
                  n3 = ["cenc", "keyids"];
                  break;
                default:
                  throw new Error("Unknown key-system: " + t5);
              }
              return function(t6, e5, r5, i6) {
                return [{ initDataTypes: t6, persistentState: i6.persistentState || "optional", distinctiveIdentifier: i6.distinctiveIdentifier || "optional", sessionTypes: i6.sessionTypes || [i6.sessionType || "temporary"], audioCapabilities: e5.map(function(t7) {
                  return { contentType: 'audio/mp4; codecs="' + t7 + '"', robustness: i6.audioRobustness || "", encryptionScheme: i6.audioEncryptionScheme || null };
                }), videoCapabilities: r5.map(function(t7) {
                  return { contentType: 'video/mp4; codecs="' + t7 + '"', robustness: i6.videoRobustness || "", encryptionScheme: i6.videoEncryptionScheme || null };
                }) }];
              }(n3, e4, r4, i5);
            }(t4, e3, r3, this.config.drmSystemOptions), a2 = this.keySystemAccessPromises[t4], s3 = null == a2 ? void 0 : a2.keySystemAccess;
            if (!s3) {
              this.log('Requesting encrypted media "' + t4 + '" key-system access with config: ' + JSON.stringify(n2)), s3 = this.requestMediaKeySystemAccess(t4, n2);
              var o2 = this.keySystemAccessPromises[t4] = { keySystemAccess: s3 };
              return s3.catch(function(e4) {
                i4.log('Failed to obtain access to key-system "' + t4 + '": ' + e4);
              }), s3.then(function(e4) {
                i4.log('Access for key-system "' + e4.keySystem + '" obtained');
                var r4 = i4.fetchServerCertificate(t4);
                return i4.log('Create media-keys for "' + t4 + '"'), o2.mediaKeys = e4.createMediaKeys().then(function(e5) {
                  return i4.log('Media-keys created for "' + t4 + '"'), r4.then(function(r5) {
                    return r5 ? i4.setMediaKeysServerCertificate(e5, t4, r5) : e5;
                  });
                }), o2.mediaKeys.catch(function(e5) {
                  i4.error('Failed to create media-keys for "' + t4 + '"}: ' + e5);
                }), o2.mediaKeys;
              });
            }
            return s3.then(function() {
              return a2.mediaKeys;
            });
          }, e2.createMediaKeySessionContext = function(t4) {
            var e3 = t4.decryptdata, r3 = t4.keySystem, i4 = t4.mediaKeys;
            this.log('Creating key-system session "' + r3 + '" keyId: ' + kt.hexDump(e3.keyId || []));
            var n2 = i4.createSession(), a2 = { decryptdata: e3, keySystem: r3, mediaKeys: i4, mediaKeysSession: n2, keyStatus: "status-pending" };
            return this.mediaKeySessions.push(a2), a2;
          }, e2.renewKeySession = function(t4) {
            var e3 = t4.decryptdata;
            if (e3.pssh) {
              var r3 = this.createMediaKeySessionContext(t4), i4 = this.getKeyIdString(e3);
              this.keyIdToKeySessionPromise[i4] = this.generateRequestWithPreferredKeySession(r3, "cenc", e3.pssh, "expired");
            } else this.warn("Could not renew expired session. Missing pssh initData.");
            this.removeSession(t4);
          }, e2.getKeyIdString = function(t4) {
            if (!t4) throw new Error("Could not read keyId of undefined decryptdata");
            if (null === t4.keyId) throw new Error("keyId is null");
            return kt.hexDump(t4.keyId);
          }, e2.updateKeySession = function(t4, e3) {
            var r3, i4 = t4.mediaKeysSession;
            return this.log('Updating key-session "' + i4.sessionId + '" for keyID ' + kt.hexDump((null == (r3 = t4.decryptdata) ? void 0 : r3.keyId) || []) + "\n      } (data length: " + (e3 ? e3.byteLength : e3) + ")"), i4.update(e3);
          }, e2.selectKeySystemFormat = function(t4) {
            var e3 = Object.keys(t4.levelkeys || {});
            return this.keyFormatPromise || (this.log("Selecting key-system from fragment (sn: " + t4.sn + " " + t4.type + ": " + t4.level + ") key formats " + e3.join(", ")), this.keyFormatPromise = this.getKeyFormatPromise(e3)), this.keyFormatPromise;
          }, e2.getKeyFormatPromise = function(t4) {
            var e3 = this;
            return new Promise(function(r3, i4) {
              var n2 = at(e3.config), a2 = t4.map($3).filter(function(t5) {
                return !!t5 && -1 !== n2.indexOf(t5);
              });
              return e3.getKeySystemSelectionPromise(a2).then(function(t5) {
                var e4 = t5.keySystem, n3 = nt(e4);
                n3 ? r3(n3) : i4(new Error('Unable to find format for key-system "' + e4 + '"'));
              }).catch(i4);
            });
          }, e2.loadKey = function(t4) {
            var e3 = this, r3 = t4.keyInfo.decryptdata, i4 = this.getKeyIdString(r3), n2 = "(keyId: " + i4 + ' format: "' + r3.keyFormat + '" method: ' + r3.method + " uri: " + r3.uri + ")";
            this.log("Starting session for key " + n2);
            var a2 = this.keyIdToKeySessionPromise[i4];
            return a2 || (a2 = this.keyIdToKeySessionPromise[i4] = this.getKeySystemForKeyPromise(r3).then(function(i5) {
              var a3 = i5.keySystem, s3 = i5.mediaKeys;
              return e3.throwIfDestroyed(), e3.log("Handle encrypted media sn: " + t4.frag.sn + " " + t4.frag.type + ": " + t4.frag.level + " using key " + n2), e3.attemptSetMediaKeys(a3, s3).then(function() {
                e3.throwIfDestroyed();
                var t5 = e3.createMediaKeySessionContext({ keySystem: a3, mediaKeys: s3, decryptdata: r3 });
                return e3.generateRequestWithPreferredKeySession(t5, "cenc", r3.pssh, "playlist-key");
              });
            })).catch(function(t5) {
              return e3.handleError(t5);
            }), a2;
          }, e2.throwIfDestroyed = function(t4) {
            if (!this.hls) throw new Error("invalid state");
          }, e2.handleError = function(t4) {
            this.hls && (this.error(t4.message), t4 instanceof ls ? this.hls.trigger(S.ERROR, t4.data) : this.hls.trigger(S.ERROR, { type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_NO_KEYS, error: t4, fatal: true }));
          }, e2.getKeySystemForKeyPromise = function(t4) {
            var e3 = this.getKeyIdString(t4), r3 = this.keyIdToKeySessionPromise[e3];
            if (!r3) {
              var i4 = $3(t4.keyFormat), n2 = i4 ? [i4] : at(this.config);
              return this.attemptKeySystemAccess(n2);
            }
            return r3;
          }, e2.getKeySystemSelectionPromise = function(t4) {
            if (t4.length || (t4 = at(this.config)), 0 === t4.length) throw new ls({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_NO_CONFIGURED_LICENSE, fatal: true }, "Missing key-system license configuration options " + JSON.stringify({ drmSystems: this.config.drmSystems }));
            return this.attemptKeySystemAccess(t4);
          }, e2._onMediaEncrypted = function(t4) {
            var e3 = this, r3 = t4.initDataType, i4 = t4.initData, n2 = '"' + t4.type + '" event: init data type: "' + r3 + '"';
            if (this.debug(n2), null !== i4) {
              var a2, s3;
              if ("sinf" === r3 && this.config.drmSystems[q.FAIRPLAY]) {
                var o2 = Ct(new Uint8Array(i4));
                try {
                  var l2 = V(JSON.parse(o2).sinf), u2 = Vt(new Uint8Array(l2));
                  if (!u2) throw new Error("'schm' box missing or not cbcs/cenc with schi > tenc");
                  a2 = u2.subarray(8, 24), s3 = q.FAIRPLAY;
                } catch (t5) {
                  return void this.warn(n2 + " Failed to parse sinf: " + t5);
                }
              } else {
                var h2 = function(t5) {
                  var e4 = [];
                  if (t5 instanceof ArrayBuffer) for (var r4 = t5.byteLength, i5 = 0; i5 + 32 < r4; ) {
                    var n3 = Jt(new DataView(t5, i5));
                    e4.push(n3), i5 += n3.size;
                  }
                  return e4;
                }(i4), d2 = h2.filter(function(t5) {
                  return t5.systemId === rt;
                })[0];
                if (!d2) return void (0 === h2.length || h2.some(function(t5) {
                  return !t5.systemId;
                }) ? this.warn(n2 + " contains incomplete or invalid pssh data") : this.log("ignoring " + n2 + " for " + h2.map(function(t5) {
                  return it(t5.systemId);
                }).join(",") + " pssh data in favor of playlist keys"));
                if (s3 = it(d2.systemId), 0 === d2.version && d2.data) {
                  var c2 = d2.data.length - 22;
                  a2 = d2.data.subarray(c2, c2 + 16);
                }
              }
              if (s3 && a2) {
                for (var f3, g2 = kt.hexDump(a2), v2 = this.keyIdToKeySessionPromise, m2 = this.mediaKeySessions, p2 = v2[g2], y2 = function() {
                  var t5 = m2[E2], n3 = t5.decryptdata;
                  if (!n3.keyId) return 0;
                  var s4 = kt.hexDump(n3.keyId);
                  return g2 === s4 || -1 !== n3.uri.replace(/-/g, "").indexOf(g2) ? (p2 = v2[s4], n3.pssh || (delete v2[s4], n3.pssh = new Uint8Array(i4), n3.keyId = a2, p2 = v2[g2] = p2.then(function() {
                    return e3.generateRequestWithPreferredKeySession(t5, r3, i4, "encrypted-event-key-match");
                  })), 1) : void 0;
                }, E2 = 0; E2 < m2.length && (0 === (f3 = y2()) || 1 !== f3); E2++) ;
                p2 || (p2 = v2[g2] = this.getKeySystemSelectionPromise([s3]).then(function(t5) {
                  var n3, s4 = t5.keySystem, o3 = t5.mediaKeys;
                  e3.throwIfDestroyed();
                  var l3 = new Zt("ISO-23001-7", g2, null != (n3 = nt(s4)) ? n3 : "");
                  return l3.pssh = new Uint8Array(i4), l3.keyId = a2, e3.attemptSetMediaKeys(s4, o3).then(function() {
                    e3.throwIfDestroyed();
                    var t6 = e3.createMediaKeySessionContext({ decryptdata: l3, keySystem: s4, mediaKeys: o3 });
                    return e3.generateRequestWithPreferredKeySession(t6, r3, i4, "encrypted-event-no-match");
                  });
                })), p2.catch(function(t5) {
                  return e3.handleError(t5);
                });
              }
            }
          }, e2._onWaitingForKey = function(t4) {
            this.log('"' + t4.type + '" event');
          }, e2.attemptSetMediaKeys = function(t4, e3) {
            var r3 = this, i4 = this.setMediaKeysQueue.slice();
            this.log('Setting media-keys for "' + t4 + '"');
            var n2 = Promise.all(i4).then(function() {
              if (!r3.media) throw new Error("Attempted to set mediaKeys without media element attached");
              return r3.media.setMediaKeys(e3);
            });
            return this.setMediaKeysQueue.push(n2), n2.then(function() {
              r3.log('Media-keys set for "' + t4 + '"'), i4.push(n2), r3.setMediaKeysQueue = r3.setMediaKeysQueue.filter(function(t5) {
                return -1 === i4.indexOf(t5);
              });
            });
          }, e2.generateRequestWithPreferredKeySession = function(t4, e3, r3, i4) {
            var n2, a2, s3 = this, o2 = null == (n2 = this.config.drmSystems) || null == (a2 = n2[t4.keySystem]) ? void 0 : a2.generateRequest;
            if (o2) try {
              var l2 = o2.call(this.hls, e3, r3, t4);
              if (!l2) throw new Error("Invalid response from configured generateRequest filter");
              e3 = l2.initDataType, r3 = t4.decryptdata.pssh = l2.initData ? new Uint8Array(l2.initData) : null;
            } catch (t5) {
              var u2;
              if (this.warn(t5.message), null != (u2 = this.hls) && u2.config.debug) throw t5;
            }
            if (null === r3) return this.log('Skipping key-session request for "' + i4 + '" (no initData)'), Promise.resolve(t4);
            var h2 = this.getKeyIdString(t4.decryptdata);
            this.log('Generating key-session request for "' + i4 + '": ' + h2 + " (init data type: " + e3 + " length: " + (r3 ? r3.byteLength : null) + ")");
            var d2 = new Vn(), c2 = t4._onmessage = function(e4) {
              var r4 = t4.mediaKeysSession;
              if (r4) {
                var i5 = e4.messageType, n3 = e4.message;
                s3.log('"' + i5 + '" message event for session "' + r4.sessionId + '" message size: ' + n3.byteLength), "license-request" === i5 || "license-renewal" === i5 ? s3.renewLicense(t4, n3).catch(function(t5) {
                  s3.handleError(t5), d2.emit("error", t5);
                }) : "license-release" === i5 ? t4.keySystem === q.FAIRPLAY && (s3.updateKeySession(t4, W("acknowledged")), s3.removeSession(t4)) : s3.warn('unhandled media key message type "' + i5 + '"');
              } else d2.emit("error", new Error("invalid state"));
            }, f3 = t4._onkeystatuseschange = function(e4) {
              if (t4.mediaKeysSession) {
                s3.onKeyStatusChange(t4);
                var r4 = t4.keyStatus;
                d2.emit("keyStatus", r4), "expired" === r4 && (s3.warn(t4.keySystem + " expired for key " + h2), s3.renewKeySession(t4));
              } else d2.emit("error", new Error("invalid state"));
            };
            t4.mediaKeysSession.addEventListener("message", c2), t4.mediaKeysSession.addEventListener("keystatuseschange", f3);
            var g2 = new Promise(function(t5, e4) {
              d2.on("error", e4), d2.on("keyStatus", function(r4) {
                r4.startsWith("usable") ? t5() : "output-restricted" === r4 ? e4(new ls({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED, fatal: false }, "HDCP level output restricted")) : "internal-error" === r4 ? e4(new ls({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_STATUS_INTERNAL_ERROR, fatal: true }, 'key status changed to "' + r4 + '"')) : "expired" === r4 ? e4(new Error("key expired while generating request")) : s3.warn('unhandled key status change "' + r4 + '"');
              });
            });
            return t4.mediaKeysSession.generateRequest(e3, r3).then(function() {
              var e4;
              s3.log('Request generated for key-session "' + (null == (e4 = t4.mediaKeysSession) ? void 0 : e4.sessionId) + '" keyId: ' + h2);
            }).catch(function(t5) {
              throw new ls({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_NO_SESSION, error: t5, fatal: false }, "Error generating key-session request: " + t5);
            }).then(function() {
              return g2;
            }).catch(function(e4) {
              throw d2.removeAllListeners(), s3.removeSession(t4), e4;
            }).then(function() {
              return d2.removeAllListeners(), t4;
            });
          }, e2.onKeyStatusChange = function(t4) {
            var e3 = this;
            t4.mediaKeysSession.keyStatuses.forEach(function(r3, i4) {
              e3.log('key status change "' + r3 + '" for keyStatuses keyId: ' + kt.hexDump("buffer" in i4 ? new Uint8Array(i4.buffer, i4.byteOffset, i4.byteLength) : new Uint8Array(i4)) + " session keyId: " + kt.hexDump(new Uint8Array(t4.decryptdata.keyId || [])) + " uri: " + t4.decryptdata.uri), t4.keyStatus = r3;
            });
          }, e2.fetchServerCertificate = function(t4) {
            var e3 = this.config, r3 = new e3.loader(e3), n2 = this.getServerCertificateUrl(t4);
            return n2 ? (this.log('Fetching server certificate for "' + t4 + '"'), new Promise(function(a2, s3) {
              var o2 = { responseType: "arraybuffer", url: n2 }, l2 = e3.certLoadPolicy.default, u2 = { loadPolicy: l2, timeout: l2.maxLoadTimeMs, maxRetry: 0, retryDelay: 0, maxRetryDelay: 0 }, h2 = { onSuccess: function(t5, e4, r4, i4) {
                a2(t5.data);
              }, onError: function(e4, r4, a3, l3) {
                s3(new ls({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED, fatal: true, networkDetails: a3, response: i3({ url: o2.url, data: void 0 }, e4) }, '"' + t4 + '" certificate request failed (' + n2 + "). Status: " + e4.code + " (" + e4.text + ")"));
              }, onTimeout: function(e4, r4, i4) {
                s3(new ls({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED, fatal: true, networkDetails: i4, response: { url: o2.url, data: void 0 } }, '"' + t4 + '" certificate request timed out (' + n2 + ")"));
              }, onAbort: function(t5, e4, r4) {
                s3(new Error("aborted"));
              } };
              r3.load(o2, u2, h2);
            })) : Promise.resolve();
          }, e2.setMediaKeysServerCertificate = function(t4, e3, r3) {
            var i4 = this;
            return new Promise(function(n2, a2) {
              t4.setServerCertificate(r3).then(function(a3) {
                i4.log("setServerCertificate " + (a3 ? "success" : "not supported by CDM") + " (" + (null == r3 ? void 0 : r3.byteLength) + ') on "' + e3 + '"'), n2(t4);
              }).catch(function(t5) {
                a2(new ls({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED, error: t5, fatal: true }, t5.message));
              });
            });
          }, e2.renewLicense = function(t4, e3) {
            var r3 = this;
            return this.requestLicense(t4, new Uint8Array(e3)).then(function(e4) {
              return r3.updateKeySession(t4, new Uint8Array(e4)).catch(function(t5) {
                throw new ls({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_SESSION_UPDATE_FAILED, error: t5, fatal: true }, t5.message);
              });
            });
          }, e2.unpackPlayReadyKeyMessage = function(t4, e3) {
            var r3 = String.fromCharCode.apply(null, new Uint16Array(e3.buffer));
            if (!r3.includes("PlayReadyKeyMessage")) return t4.setRequestHeader("Content-Type", "text/xml; charset=utf-8"), e3;
            var i4 = new DOMParser().parseFromString(r3, "application/xml"), n2 = i4.querySelectorAll("HttpHeader");
            if (n2.length > 0) for (var a2, s3 = 0, o2 = n2.length; s3 < o2; s3++) {
              var l2, u2, h2 = null == (l2 = (a2 = n2[s3]).querySelector("name")) ? void 0 : l2.textContent, d2 = null == (u2 = a2.querySelector("value")) ? void 0 : u2.textContent;
              h2 && d2 && t4.setRequestHeader(h2, d2);
            }
            var c2 = i4.querySelector("Challenge"), f3 = null == c2 ? void 0 : c2.textContent;
            if (!f3) throw new Error("Cannot find <Challenge> in key message");
            return W(atob(f3));
          }, e2.setupLicenseXHR = function(t4, e3, r3, i4) {
            var n2 = this, a2 = this.config.licenseXhrSetup;
            return a2 ? Promise.resolve().then(function() {
              if (!r3.decryptdata) throw new Error("Key removed");
              return a2.call(n2.hls, t4, e3, r3, i4);
            }).catch(function(s3) {
              if (!r3.decryptdata) throw s3;
              return t4.open("POST", e3, true), a2.call(n2.hls, t4, e3, r3, i4);
            }).then(function(r4) {
              return t4.readyState || t4.open("POST", e3, true), { xhr: t4, licenseChallenge: r4 || i4 };
            }) : (t4.open("POST", e3, true), Promise.resolve({ xhr: t4, licenseChallenge: i4 }));
          }, e2.requestLicense = function(t4, e3) {
            var r3 = this, i4 = this.config.keyLoadPolicy.default;
            return new Promise(function(n2, a2) {
              var s3 = r3.getLicenseServerUrl(t4.keySystem);
              r3.log("Sending license request to URL: " + s3);
              var o2 = new XMLHttpRequest();
              o2.responseType = "arraybuffer", o2.onreadystatechange = function() {
                if (!r3.hls || !t4.mediaKeysSession) return a2(new Error("invalid state"));
                if (4 === o2.readyState) if (200 === o2.status) {
                  r3._requestLicenseFailureCount = 0;
                  var l2 = o2.response;
                  r3.log("License received " + (l2 instanceof ArrayBuffer ? l2.byteLength : l2));
                  var u2 = r3.config.licenseResponseCallback;
                  if (u2) try {
                    l2 = u2.call(r3.hls, o2, s3, t4);
                  } catch (t5) {
                    r3.error(t5);
                  }
                  n2(l2);
                } else {
                  var h2 = i4.errorRetry, d2 = h2 ? h2.maxNumRetry : 0;
                  if (r3._requestLicenseFailureCount++, r3._requestLicenseFailureCount > d2 || o2.status >= 400 && o2.status < 500) a2(new ls({ type: L.KEY_SYSTEM_ERROR, details: A.KEY_SYSTEM_LICENSE_REQUEST_FAILED, fatal: true, networkDetails: o2, response: { url: s3, data: void 0, code: o2.status, text: o2.statusText } }, "License Request XHR failed (" + s3 + "). Status: " + o2.status + " (" + o2.statusText + ")"));
                  else {
                    var c2 = d2 - r3._requestLicenseFailureCount + 1;
                    r3.warn("Retrying license request, " + c2 + " attempts left"), r3.requestLicense(t4, e3).then(n2, a2);
                  }
                }
              }, t4.licenseXhr && t4.licenseXhr.readyState !== XMLHttpRequest.DONE && t4.licenseXhr.abort(), t4.licenseXhr = o2, r3.setupLicenseXHR(o2, s3, t4, e3).then(function(e4) {
                var i5 = e4.xhr, n3 = e4.licenseChallenge;
                t4.keySystem == q.PLAYREADY && (n3 = r3.unpackPlayReadyKeyMessage(i5, n3)), i5.send(n3);
              });
            });
          }, e2.onMediaAttached = function(t4, e3) {
            if (this.config.emeEnabled) {
              var r3 = e3.media;
              this.media = r3, r3.addEventListener("encrypted", this.onMediaEncrypted), r3.addEventListener("waitingforkey", this.onWaitingForKey);
            }
          }, e2.onMediaDetached = function() {
            var e3 = this, r3 = this.media, i4 = this.mediaKeySessions;
            r3 && (r3.removeEventListener("encrypted", this.onMediaEncrypted), r3.removeEventListener("waitingforkey", this.onWaitingForKey), this.media = null), this._requestLicenseFailureCount = 0, this.setMediaKeysQueue = [], this.mediaKeySessions = [], this.keyIdToKeySessionPromise = {}, Zt.clearKeyUriToKeyIdMap();
            var n2 = i4.length;
            t3.CDMCleanupPromise = Promise.all(i4.map(function(t4) {
              return e3.removeSession(t4);
            }).concat(null == r3 ? void 0 : r3.setMediaKeys(null).catch(function(t4) {
              e3.log("Could not clear media keys: " + t4);
            }))).then(function() {
              n2 && (e3.log("finished closing key sessions and clearing media keys"), i4.length = 0);
            }).catch(function(t4) {
              e3.log("Could not close sessions and clear media keys: " + t4);
            });
          }, e2.onManifestLoading = function() {
            this.keyFormatPromise = null;
          }, e2.onManifestLoaded = function(t4, e3) {
            var r3 = e3.sessionKeys;
            if (r3 && this.config.emeEnabled && !this.keyFormatPromise) {
              var i4 = r3.reduce(function(t5, e4) {
                return -1 === t5.indexOf(e4.keyFormat) && t5.push(e4.keyFormat), t5;
              }, []);
              this.log("Selecting key-system from session-keys " + i4.join(", ")), this.keyFormatPromise = this.getKeyFormatPromise(i4);
            }
          }, e2.removeSession = function(t4) {
            var e3 = this, r3 = t4.mediaKeysSession, i4 = t4.licenseXhr;
            if (r3) {
              this.log("Remove licenses and keys and close session " + r3.sessionId), t4._onmessage && (r3.removeEventListener("message", t4._onmessage), t4._onmessage = void 0), t4._onkeystatuseschange && (r3.removeEventListener("keystatuseschange", t4._onkeystatuseschange), t4._onkeystatuseschange = void 0), i4 && i4.readyState !== XMLHttpRequest.DONE && i4.abort(), t4.mediaKeysSession = t4.decryptdata = t4.licenseXhr = void 0;
              var n2 = this.mediaKeySessions.indexOf(t4);
              return n2 > -1 && this.mediaKeySessions.splice(n2, 1), r3.remove().catch(function(t5) {
                e3.log("Could not remove session: " + t5);
              }).then(function() {
                return r3.close();
              }).catch(function(t5) {
                e3.log("Could not close session: " + t5);
              });
            }
          }, t3;
        }();
        is.CDMCleanupPromise = void 0;
        var ns, as, ss, os, ls = function(t3) {
          function e2(e3, r3) {
            var i4;
            return (i4 = t3.call(this, r3) || this).data = void 0, e3.error || (e3.error = new Error(r3)), i4.data = e3, e3.err = e3.error, i4;
          }
          return l(e2, t3), e2;
        }(c(Error));
        !function(t3) {
          t3.MANIFEST = "m", t3.AUDIO = "a", t3.VIDEO = "v", t3.MUXED = "av", t3.INIT = "i", t3.CAPTION = "c", t3.TIMED_TEXT = "tt", t3.KEY = "k", t3.OTHER = "o";
        }(ns || (ns = {})), function(t3) {
          t3.DASH = "d", t3.HLS = "h", t3.SMOOTH = "s", t3.OTHER = "o";
        }(as || (as = {})), function(t3) {
          t3.OBJECT = "CMCD-Object", t3.REQUEST = "CMCD-Request", t3.SESSION = "CMCD-Session", t3.STATUS = "CMCD-Status";
        }(ss || (ss = {}));
        var us = ((os = {})[ss.OBJECT] = ["br", "d", "ot", "tb"], os[ss.REQUEST] = ["bl", "dl", "mtp", "nor", "nrr", "su"], os[ss.SESSION] = ["cid", "pr", "sf", "sid", "st", "v"], os[ss.STATUS] = ["bs", "rtp"], os), hs = function t3(e2, r3) {
          this.value = void 0, this.params = void 0, Array.isArray(e2) && (e2 = e2.map(function(e3) {
            return e3 instanceof t3 ? e3 : new t3(e3);
          })), this.value = e2, this.params = r3;
        }, ds = function(t3) {
          this.description = void 0, this.description = t3;
        }, cs = "Dict";
        function fs(t3, e2, r3, i4) {
          return new Error("failed to " + t3 + ' "' + (n2 = e2, (Array.isArray(n2) ? JSON.stringify(n2) : n2 instanceof Map ? "Map{}" : n2 instanceof Set ? "Set{}" : "object" == typeof n2 ? JSON.stringify(n2) : String(n2)) + '" as ') + r3, { cause: i4 });
          var n2;
        }
        var gs = "Bare Item", vs = "Boolean", ms = "Byte Sequence", ps = "Decimal", ys = "Integer", Es = /[\x00-\x1f\x7f]+/, Ts = "Token", Ss = "Key";
        function Ls(t3, e2, r3) {
          return fs("serialize", t3, e2, r3);
        }
        function As(t3) {
          if (false === ArrayBuffer.isView(t3)) throw Ls(t3, ms);
          return ":" + (e2 = t3, btoa(String.fromCharCode.apply(String, e2)) + ":");
          var e2;
        }
        function Rs(t3) {
          if (function(t4) {
            return t4 < -999999999999999 || 999999999999999 < t4;
          }(t3)) throw Ls(t3, ys);
          return t3.toString();
        }
        function bs(t3, e2) {
          if (t3 < 0) return -bs(-t3, e2);
          var r3 = Math.pow(10, e2);
          if (Math.abs(t3 * r3 % 1 - 0.5) < Number.EPSILON) {
            var i4 = Math.floor(t3 * r3);
            return (i4 % 2 == 0 ? i4 : i4 + 1) / r3;
          }
          return Math.round(t3 * r3) / r3;
        }
        function ks(t3) {
          var e2 = bs(t3, 3);
          if (Math.floor(Math.abs(e2)).toString().length > 12) throw Ls(t3, ps);
          var r3 = e2.toString();
          return r3.includes(".") ? r3 : r3 + ".0";
        }
        var Ds = "String";
        function Is(t3) {
          var e2, r3 = (e2 = t3).description || e2.toString().slice(7, -1);
          if (false === /^([a-zA-Z*])([!#$%&'*+\-.^_`|~\w:/]*)$/.test(r3)) throw Ls(r3, Ts);
          return r3;
        }
        function ws(t3) {
          switch (typeof t3) {
            case "number":
              if (!y(t3)) throw Ls(t3, gs);
              return Number.isInteger(t3) ? Rs(t3) : ks(t3);
            case "string":
              return function(t4) {
                if (Es.test(t4)) throw Ls(t4, Ds);
                return '"' + t4.replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"';
              }(t3);
            case "symbol":
              return Is(t3);
            case "boolean":
              return function(t4) {
                if ("boolean" != typeof t4) throw Ls(t4, vs);
                return t4 ? "?1" : "?0";
              }(t3);
            case "object":
              if (t3 instanceof Date) return function(t4) {
                return "@" + Rs(t4.getTime() / 1e3);
              }(t3);
              if (t3 instanceof Uint8Array) return As(t3);
              if (t3 instanceof ds) return Is(t3);
            default:
              throw Ls(t3, gs);
          }
        }
        function Cs(t3) {
          if (false === /^[a-z*][a-z0-9\-_.*]*$/.test(t3)) throw Ls(t3, Ss);
          return t3;
        }
        function _s(t3) {
          return null == t3 ? "" : Object.entries(t3).map(function(t4) {
            var e2 = t4[0], r3 = t4[1];
            return true === r3 ? ";" + Cs(e2) : ";" + Cs(e2) + "=" + ws(r3);
          }).join("");
        }
        function xs(t3) {
          return t3 instanceof hs ? "" + ws(t3.value) + _s(t3.params) : ws(t3);
        }
        function Ps(t3, e2) {
          var r3;
          if (void 0 === e2 && (e2 = { whitespace: true }), "object" != typeof t3) throw Ls(t3, cs);
          var i4 = t3 instanceof Map ? t3.entries() : Object.entries(t3), n2 = null != (r3 = e2) && r3.whitespace ? " " : "";
          return Array.from(i4).map(function(t4) {
            var e3 = t4[0], r4 = t4[1];
            r4 instanceof hs == 0 && (r4 = new hs(r4));
            var i5, n3 = Cs(e3);
            return true === r4.value ? n3 += _s(r4.params) : (n3 += "=", Array.isArray(r4.value) ? n3 += "(" + (i5 = r4).value.map(xs).join(" ") + ")" + _s(i5.params) : n3 += xs(r4)), n3;
          }).join("," + n2);
        }
        var Fs = function(t3) {
          return "ot" === t3 || "sf" === t3 || "st" === t3;
        }, Ms = function(t3) {
          return "number" == typeof t3 ? y(t3) : null != t3 && "" !== t3 && false !== t3;
        }, Os = function(t3) {
          return Math.round(t3);
        }, Ns = function(t3) {
          return 100 * Os(t3 / 100);
        }, Us = { br: Os, d: Os, bl: Ns, dl: Ns, mtp: Ns, nor: function(t3, e2) {
          return null != e2 && e2.baseUrl && (t3 = function(t4, e3) {
            var r3 = new URL(t4), i4 = new URL(e3);
            if (r3.origin !== i4.origin) return t4;
            for (var n2 = r3.pathname.split("/").slice(1), a2 = i4.pathname.split("/").slice(1, -1); n2[0] === a2[0]; ) n2.shift(), a2.shift();
            for (; a2.length; ) a2.shift(), n2.unshift("..");
            return n2.join("/");
          }(t3, e2.baseUrl)), encodeURIComponent(t3);
        }, rtp: Ns, tb: Os };
        function Bs(t3, e2) {
          return void 0 === e2 && (e2 = {}), t3 ? function(t4, e3) {
            return Ps(t4, e3);
          }(function(t4, e3) {
            var r3 = {};
            if (null == t4 || "object" != typeof t4) return r3;
            var i4 = Object.keys(t4).sort(), n2 = o({}, Us, null == e3 ? void 0 : e3.formatters), a2 = null == e3 ? void 0 : e3.filter;
            return i4.forEach(function(i5) {
              if (null == a2 || !a2(i5)) {
                var s3 = t4[i5], o2 = n2[i5];
                o2 && (s3 = o2(s3, e3)), "v" === i5 && 1 === s3 || "pr" == i5 && 1 === s3 || Ms(s3) && (Fs(i5) && "string" == typeof s3 && (s3 = new ds(s3)), r3[i5] = s3);
              }
            }), r3;
          }(t3, e2), o({ whitespace: false }, e2)) : "";
        }
        function Gs(t3, e2, r3) {
          return o(t3, function(t4, e3) {
            var r4;
            if (void 0 === e3 && (e3 = {}), !t4) return {};
            var i4 = Object.entries(t4), n2 = Object.entries(us).concat(Object.entries((null == (r4 = e3) ? void 0 : r4.customHeaderMap) || {})), a2 = i4.reduce(function(t5, e4) {
              var r5, i5 = e4[0], a3 = e4[1], s3 = (null == (r5 = n2.find(function(t6) {
                return t6[1].includes(i5);
              })) ? void 0 : r5[0]) || ss.REQUEST;
              return null != t5[s3] || (t5[s3] = {}), t5[s3][i5] = a3, t5;
            }, {});
            return Object.entries(a2).reduce(function(t5, r5) {
              var i5 = r5[0], n3 = r5[1];
              return t5[i5] = Bs(n3, e3), t5;
            }, {});
          }(e2, r3));
        }
        var Ks = "CMCD", Hs = /CMCD=[^&#]+/;
        function Vs(t3, e2, r3) {
          var i4 = function(t4, e3) {
            if (void 0 === e3 && (e3 = {}), !t4) return "";
            var r4 = Bs(t4, e3);
            return Ks + "=" + encodeURIComponent(r4);
          }(e2, r3);
          if (!i4) return t3;
          if (Hs.test(t3)) return t3.replace(Hs, i4);
          var n2 = t3.includes("?") ? "&" : "?";
          return "" + t3 + n2 + i4;
        }
        var Ys = function() {
          function t3(t4) {
            var e3 = this;
            this.hls = void 0, this.config = void 0, this.media = void 0, this.sid = void 0, this.cid = void 0, this.useHeaders = false, this.includeKeys = void 0, this.initialized = false, this.starved = false, this.buffering = true, this.audioBuffer = void 0, this.videoBuffer = void 0, this.onWaiting = function() {
              e3.initialized && (e3.starved = true), e3.buffering = true;
            }, this.onPlaying = function() {
              e3.initialized || (e3.initialized = true), e3.buffering = false;
            }, this.applyPlaylistData = function(t5) {
              try {
                e3.apply(t5, { ot: ns.MANIFEST, su: !e3.initialized });
              } catch (t6) {
                w.warn("Could not generate manifest CMCD data.", t6);
              }
            }, this.applyFragmentData = function(t5) {
              try {
                var r4 = t5.frag, i5 = e3.hls.levels[r4.level], n2 = e3.getObjectType(r4), a2 = { d: 1e3 * r4.duration, ot: n2 };
                n2 !== ns.VIDEO && n2 !== ns.AUDIO && n2 != ns.MUXED || (a2.br = i5.bitrate / 1e3, a2.tb = e3.getTopBandwidth(n2) / 1e3, a2.bl = e3.getBufferLength(n2)), e3.apply(t5, a2);
              } catch (t6) {
                w.warn("Could not generate segment CMCD data.", t6);
              }
            }, this.hls = t4;
            var r3 = this.config = t4.config, i4 = r3.cmcd;
            null != i4 && (r3.pLoader = this.createPlaylistLoader(), r3.fLoader = this.createFragmentLoader(), this.sid = i4.sessionId || function() {
              try {
                return crypto.randomUUID();
              } catch (i5) {
                try {
                  var t5 = URL.createObjectURL(new Blob()), e4 = t5.toString();
                  return URL.revokeObjectURL(t5), e4.slice(e4.lastIndexOf("/") + 1);
                } catch (t6) {
                  var r4 = (/* @__PURE__ */ new Date()).getTime();
                  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(t7) {
                    var e5 = (r4 + 16 * Math.random()) % 16 | 0;
                    return r4 = Math.floor(r4 / 16), ("x" == t7 ? e5 : 3 & e5 | 8).toString(16);
                  });
                }
              }
            }(), this.cid = i4.contentId, this.useHeaders = true === i4.useHeaders, this.includeKeys = i4.includeKeys, this.registerListeners());
          }
          var e2 = t3.prototype;
          return e2.registerListeners = function() {
            var t4 = this.hls;
            t4.on(S.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(S.MEDIA_DETACHED, this.onMediaDetached, this), t4.on(S.BUFFER_CREATED, this.onBufferCreated, this);
          }, e2.unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(S.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(S.MEDIA_DETACHED, this.onMediaDetached, this), t4.off(S.BUFFER_CREATED, this.onBufferCreated, this);
          }, e2.destroy = function() {
            this.unregisterListeners(), this.onMediaDetached(), this.hls = this.config = this.audioBuffer = this.videoBuffer = null, this.onWaiting = this.onPlaying = null;
          }, e2.onMediaAttached = function(t4, e3) {
            this.media = e3.media, this.media.addEventListener("waiting", this.onWaiting), this.media.addEventListener("playing", this.onPlaying);
          }, e2.onMediaDetached = function() {
            this.media && (this.media.removeEventListener("waiting", this.onWaiting), this.media.removeEventListener("playing", this.onPlaying), this.media = null);
          }, e2.onBufferCreated = function(t4, e3) {
            var r3, i4;
            this.audioBuffer = null == (r3 = e3.tracks.audio) ? void 0 : r3.buffer, this.videoBuffer = null == (i4 = e3.tracks.video) ? void 0 : i4.buffer;
          }, e2.createData = function() {
            var t4;
            return { v: 1, sf: as.HLS, sid: this.sid, cid: this.cid, pr: null == (t4 = this.media) ? void 0 : t4.playbackRate, mtp: this.hls.bandwidthEstimate / 1e3 };
          }, e2.apply = function(t4, e3) {
            void 0 === e3 && (e3 = {}), o(e3, this.createData());
            var r3 = e3.ot === ns.INIT || e3.ot === ns.VIDEO || e3.ot === ns.MUXED;
            this.starved && r3 && (e3.bs = true, e3.su = true, this.starved = false), null == e3.su && (e3.su = this.buffering);
            var i4 = this.includeKeys;
            i4 && (e3 = Object.keys(e3).reduce(function(t5, r4) {
              return i4.includes(r4) && (t5[r4] = e3[r4]), t5;
            }, {})), this.useHeaders ? (t4.headers || (t4.headers = {}), Gs(t4.headers, e3)) : t4.url = Vs(t4.url, e3);
          }, e2.getObjectType = function(t4) {
            var e3 = t4.type;
            return "subtitle" === e3 ? ns.TIMED_TEXT : "initSegment" === t4.sn ? ns.INIT : "audio" === e3 ? ns.AUDIO : "main" === e3 ? this.hls.audioTracks.length ? ns.VIDEO : ns.MUXED : void 0;
          }, e2.getTopBandwidth = function(t4) {
            var e3, r3 = 0, i4 = this.hls;
            if (t4 === ns.AUDIO) e3 = i4.audioTracks;
            else {
              var n2 = i4.maxAutoLevel, a2 = n2 > -1 ? n2 + 1 : i4.levels.length;
              e3 = i4.levels.slice(0, a2);
            }
            for (var s3, o2 = g(e3); !(s3 = o2()).done; ) {
              var l2 = s3.value;
              l2.bitrate > r3 && (r3 = l2.bitrate);
            }
            return r3 > 0 ? r3 : NaN;
          }, e2.getBufferLength = function(t4) {
            var e3 = this.hls.media, r3 = t4 === ns.AUDIO ? this.audioBuffer : this.videoBuffer;
            return r3 && e3 ? 1e3 * ri.bufferInfo(r3, e3.currentTime, this.config.maxBufferHole).len : NaN;
          }, e2.createPlaylistLoader = function() {
            var t4 = this.config.pLoader, e3 = this.applyPlaylistData, r3 = t4 || this.config.loader;
            return function() {
              function t5(t6) {
                this.loader = void 0, this.loader = new r3(t6);
              }
              var i4 = t5.prototype;
              return i4.destroy = function() {
                this.loader.destroy();
              }, i4.abort = function() {
                this.loader.abort();
              }, i4.load = function(t6, r4, i5) {
                e3(t6), this.loader.load(t6, r4, i5);
              }, s2(t5, [{ key: "stats", get: function() {
                return this.loader.stats;
              } }, { key: "context", get: function() {
                return this.loader.context;
              } }]), t5;
            }();
          }, e2.createFragmentLoader = function() {
            var t4 = this.config.fLoader, e3 = this.applyFragmentData, r3 = t4 || this.config.loader;
            return function() {
              function t5(t6) {
                this.loader = void 0, this.loader = new r3(t6);
              }
              var i4 = t5.prototype;
              return i4.destroy = function() {
                this.loader.destroy();
              }, i4.abort = function() {
                this.loader.abort();
              }, i4.load = function(t6, r4, i5) {
                e3(t6), this.loader.load(t6, r4, i5);
              }, s2(t5, [{ key: "stats", get: function() {
                return this.loader.stats;
              } }, { key: "context", get: function() {
                return this.loader.context;
              } }]), t5;
            }();
          }, t3;
        }(), Ws = function() {
          function t3(t4) {
            this.hls = void 0, this.log = void 0, this.loader = null, this.uri = null, this.pathwayId = ".", this.pathwayPriority = null, this.timeToLoad = 300, this.reloadTimer = -1, this.updated = 0, this.started = false, this.enabled = true, this.levels = null, this.audioTracks = null, this.subtitleTracks = null, this.penalizedPathways = {}, this.hls = t4, this.log = w.log.bind(w, "[content-steering]:"), this.registerListeners();
          }
          var e2 = t3.prototype;
          return e2.registerListeners = function() {
            var t4 = this.hls;
            t4.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(S.MANIFEST_LOADED, this.onManifestLoaded, this), t4.on(S.MANIFEST_PARSED, this.onManifestParsed, this), t4.on(S.ERROR, this.onError, this);
          }, e2.unregisterListeners = function() {
            var t4 = this.hls;
            t4 && (t4.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(S.MANIFEST_LOADED, this.onManifestLoaded, this), t4.off(S.MANIFEST_PARSED, this.onManifestParsed, this), t4.off(S.ERROR, this.onError, this));
          }, e2.startLoad = function() {
            if (this.started = true, this.clearTimeout(), this.enabled && this.uri) {
              if (this.updated) {
                var t4 = 1e3 * this.timeToLoad - (performance.now() - this.updated);
                if (t4 > 0) return void this.scheduleRefresh(this.uri, t4);
              }
              this.loadSteeringManifest(this.uri);
            }
          }, e2.stopLoad = function() {
            this.started = false, this.loader && (this.loader.destroy(), this.loader = null), this.clearTimeout();
          }, e2.clearTimeout = function() {
            -1 !== this.reloadTimer && (self.clearTimeout(this.reloadTimer), this.reloadTimer = -1);
          }, e2.destroy = function() {
            this.unregisterListeners(), this.stopLoad(), this.hls = null, this.levels = this.audioTracks = this.subtitleTracks = null;
          }, e2.removeLevel = function(t4) {
            var e3 = this.levels;
            e3 && (this.levels = e3.filter(function(e4) {
              return e4 !== t4;
            }));
          }, e2.onManifestLoading = function() {
            this.stopLoad(), this.enabled = true, this.timeToLoad = 300, this.updated = 0, this.uri = null, this.pathwayId = ".", this.levels = this.audioTracks = this.subtitleTracks = null;
          }, e2.onManifestLoaded = function(t4, e3) {
            var r3 = e3.contentSteering;
            null !== r3 && (this.pathwayId = r3.pathwayId, this.uri = r3.uri, this.started && this.startLoad());
          }, e2.onManifestParsed = function(t4, e3) {
            this.audioTracks = e3.audioTracks, this.subtitleTracks = e3.subtitleTracks;
          }, e2.onError = function(t4, e3) {
            var r3 = e3.errorAction;
            if ((null == r3 ? void 0 : r3.action) === Dr && r3.flags === _r) {
              var i4 = this.levels, n2 = this.pathwayPriority, a2 = this.pathwayId;
              if (e3.context) {
                var s3 = e3.context, o2 = s3.groupId, l2 = s3.pathwayId, u2 = s3.type;
                o2 && i4 ? a2 = this.getPathwayForGroupId(o2, u2, a2) : l2 && (a2 = l2);
              }
              a2 in this.penalizedPathways || (this.penalizedPathways[a2] = performance.now()), !n2 && i4 && (n2 = i4.reduce(function(t5, e4) {
                return -1 === t5.indexOf(e4.pathwayId) && t5.push(e4.pathwayId), t5;
              }, [])), n2 && n2.length > 1 && (this.updatePathwayPriority(n2), r3.resolved = this.pathwayId !== a2), r3.resolved || w.warn("Could not resolve " + e3.details + ' ("' + e3.error.message + '") with content-steering for Pathway: ' + a2 + " levels: " + (i4 ? i4.length : i4) + " priorities: " + JSON.stringify(n2) + " penalized: " + JSON.stringify(this.penalizedPathways));
            }
          }, e2.filterParsedLevels = function(t4) {
            this.levels = t4;
            var e3 = this.getLevelsForPathway(this.pathwayId);
            if (0 === e3.length) {
              var r3 = t4[0].pathwayId;
              this.log("No levels found in Pathway " + this.pathwayId + '. Setting initial Pathway to "' + r3 + '"'), e3 = this.getLevelsForPathway(r3), this.pathwayId = r3;
            }
            return e3.length !== t4.length ? (this.log("Found " + e3.length + "/" + t4.length + ' levels in Pathway "' + this.pathwayId + '"'), e3) : t4;
          }, e2.getLevelsForPathway = function(t4) {
            return null === this.levels ? [] : this.levels.filter(function(e3) {
              return t4 === e3.pathwayId;
            });
          }, e2.updatePathwayPriority = function(t4) {
            var e3;
            this.pathwayPriority = t4;
            var r3 = this.penalizedPathways, i4 = performance.now();
            Object.keys(r3).forEach(function(t5) {
              i4 - r3[t5] > 3e5 && delete r3[t5];
            });
            for (var n2 = 0; n2 < t4.length; n2++) {
              var a2 = t4[n2];
              if (!(a2 in r3)) {
                if (a2 === this.pathwayId) return;
                var s3 = this.hls.nextLoadLevel, o2 = this.hls.levels[s3];
                if ((e3 = this.getLevelsForPathway(a2)).length > 0) {
                  this.log('Setting Pathway to "' + a2 + '"'), this.pathwayId = a2, mr(e3), this.hls.trigger(S.LEVELS_UPDATED, { levels: e3 });
                  var l2 = this.hls.levels[s3];
                  o2 && l2 && this.levels && (l2.attrs["STABLE-VARIANT-ID"] !== o2.attrs["STABLE-VARIANT-ID"] && l2.bitrate !== o2.bitrate && this.log("Unstable Pathways change from bitrate " + o2.bitrate + " to " + l2.bitrate), this.hls.nextLoadLevel = s3);
                  break;
                }
              }
            }
          }, e2.getPathwayForGroupId = function(t4, e3, r3) {
            for (var i4 = this.getLevelsForPathway(r3).concat(this.levels || []), n2 = 0; n2 < i4.length; n2++) if (e3 === xe && i4[n2].hasAudioGroup(t4) || e3 === Pe && i4[n2].hasSubtitleGroup(t4)) return i4[n2].pathwayId;
            return r3;
          }, e2.clonePathways = function(t4) {
            var e3 = this, r3 = this.levels;
            if (r3) {
              var i4 = {}, n2 = {};
              t4.forEach(function(t5) {
                var a2 = t5.ID, s3 = t5["BASE-ID"], o2 = t5["URI-REPLACEMENT"];
                if (!r3.some(function(t6) {
                  return t6.pathwayId === a2;
                })) {
                  var l2 = e3.getLevelsForPathway(s3).map(function(t6) {
                    var e4 = new x(t6.attrs);
                    e4["PATHWAY-ID"] = a2;
                    var r4 = e4.AUDIO && e4.AUDIO + "_clone_" + a2, s4 = e4.SUBTITLES && e4.SUBTITLES + "_clone_" + a2;
                    r4 && (i4[e4.AUDIO] = r4, e4.AUDIO = r4), s4 && (n2[e4.SUBTITLES] = s4, e4.SUBTITLES = s4);
                    var l3 = qs(t6.uri, e4["STABLE-VARIANT-ID"], "PER-VARIANT-URIS", o2), u2 = new or({ attrs: e4, audioCodec: t6.audioCodec, bitrate: t6.bitrate, height: t6.height, name: t6.name, url: l3, videoCodec: t6.videoCodec, width: t6.width });
                    if (t6.audioGroups) for (var h2 = 1; h2 < t6.audioGroups.length; h2++) u2.addGroupId("audio", t6.audioGroups[h2] + "_clone_" + a2);
                    if (t6.subtitleGroups) for (var d2 = 1; d2 < t6.subtitleGroups.length; d2++) u2.addGroupId("text", t6.subtitleGroups[d2] + "_clone_" + a2);
                    return u2;
                  });
                  r3.push.apply(r3, l2), js(e3.audioTracks, i4, o2, a2), js(e3.subtitleTracks, n2, o2, a2);
                }
              });
            }
          }, e2.loadSteeringManifest = function(t4) {
            var e3, r3 = this, i4 = this.hls.config, n2 = i4.loader;
            this.loader && this.loader.destroy(), this.loader = new n2(i4);
            try {
              e3 = new self.URL(t4);
            } catch (e4) {
              return this.enabled = false, void this.log("Failed to parse Steering Manifest URI: " + t4);
            }
            if ("data:" !== e3.protocol) {
              var a2 = 0 | (this.hls.bandwidthEstimate || i4.abrEwmaDefaultEstimate);
              e3.searchParams.set("_HLS_pathway", this.pathwayId), e3.searchParams.set("_HLS_throughput", "" + a2);
            }
            var s3 = { responseType: "json", url: e3.href }, o2 = i4.steeringManifestLoadPolicy.default, l2 = o2.errorRetry || o2.timeoutRetry || {}, u2 = { loadPolicy: o2, timeout: o2.maxLoadTimeMs, maxRetry: l2.maxNumRetry || 0, retryDelay: l2.retryDelayMs || 0, maxRetryDelay: l2.maxRetryDelayMs || 0 }, h2 = { onSuccess: function(t5, i5, n3, a3) {
              r3.log('Loaded steering manifest: "' + e3 + '"');
              var s4 = t5.data;
              if (1 === s4.VERSION) {
                r3.updated = performance.now(), r3.timeToLoad = s4.TTL;
                var o3 = s4["RELOAD-URI"], l3 = s4["PATHWAY-CLONES"], u3 = s4["PATHWAY-PRIORITY"];
                if (o3) try {
                  r3.uri = new self.URL(o3, e3).href;
                } catch (t6) {
                  return r3.enabled = false, void r3.log("Failed to parse Steering Manifest RELOAD-URI: " + o3);
                }
                r3.scheduleRefresh(r3.uri || n3.url), l3 && r3.clonePathways(l3);
                var h3 = { steeringManifest: s4, url: e3.toString() };
                r3.hls.trigger(S.STEERING_MANIFEST_LOADED, h3), u3 && r3.updatePathwayPriority(u3);
              } else r3.log("Steering VERSION " + s4.VERSION + " not supported!");
            }, onError: function(t5, e4, i5, n3) {
              if (r3.log("Error loading steering manifest: " + t5.code + " " + t5.text + " (" + e4.url + ")"), r3.stopLoad(), 410 === t5.code) return r3.enabled = false, void r3.log("Steering manifest " + e4.url + " no longer available");
              var a3 = 1e3 * r3.timeToLoad;
              if (429 !== t5.code) r3.scheduleRefresh(r3.uri || e4.url, a3);
              else {
                var s4 = r3.loader;
                if ("function" == typeof (null == s4 ? void 0 : s4.getResponseHeader)) {
                  var o3 = s4.getResponseHeader("Retry-After");
                  o3 && (a3 = 1e3 * parseFloat(o3));
                }
                r3.log("Steering manifest " + e4.url + " rate limited");
              }
            }, onTimeout: function(t5, e4, i5) {
              r3.log("Timeout loading steering manifest (" + e4.url + ")"), r3.scheduleRefresh(r3.uri || e4.url);
            } };
            this.log("Requesting steering manifest: " + e3), this.loader.load(s3, u2, h2);
          }, e2.scheduleRefresh = function(t4, e3) {
            var r3 = this;
            void 0 === e3 && (e3 = 1e3 * this.timeToLoad), this.clearTimeout(), this.reloadTimer = self.setTimeout(function() {
              var e4, i4 = null == (e4 = r3.hls) ? void 0 : e4.media;
              !i4 || i4.ended ? r3.scheduleRefresh(t4, 1e3 * r3.timeToLoad) : r3.loadSteeringManifest(t4);
            }, e3);
          }, t3;
        }();
        function js(t3, e2, r3, i4) {
          t3 && Object.keys(e2).forEach(function(n2) {
            var a2 = t3.filter(function(t4) {
              return t4.groupId === n2;
            }).map(function(t4) {
              var a3 = o({}, t4);
              return a3.details = void 0, a3.attrs = new x(a3.attrs), a3.url = a3.attrs.URI = qs(t4.url, t4.attrs["STABLE-RENDITION-ID"], "PER-RENDITION-URIS", r3), a3.groupId = a3.attrs["GROUP-ID"] = e2[n2], a3.attrs["PATHWAY-ID"] = i4, a3;
            });
            t3.push.apply(t3, a2);
          });
        }
        function qs(t3, e2, r3, i4) {
          var n2, a2 = i4.HOST, s3 = i4.PARAMS, o2 = i4[r3];
          e2 && (n2 = null == o2 ? void 0 : o2[e2]) && (t3 = n2);
          var l2 = new self.URL(t3);
          return a2 && !n2 && (l2.host = a2), s3 && Object.keys(s3).sort().forEach(function(t4) {
            t4 && l2.searchParams.set(t4, s3[t4]);
          }), l2.href;
        }
        var Xs = /^age:\s*[\d.]+\s*$/im, zs = function() {
          function t3(t4) {
            this.xhrSetup = void 0, this.requestTimeout = void 0, this.retryTimeout = void 0, this.retryDelay = void 0, this.config = null, this.callbacks = null, this.context = null, this.loader = null, this.stats = void 0, this.xhrSetup = t4 && t4.xhrSetup || null, this.stats = new M(), this.retryDelay = 0;
          }
          var e2 = t3.prototype;
          return e2.destroy = function() {
            this.callbacks = null, this.abortInternal(), this.loader = null, this.config = null, this.context = null, this.xhrSetup = null;
          }, e2.abortInternal = function() {
            var t4 = this.loader;
            self.clearTimeout(this.requestTimeout), self.clearTimeout(this.retryTimeout), t4 && (t4.onreadystatechange = null, t4.onprogress = null, 4 !== t4.readyState && (this.stats.aborted = true, t4.abort()));
          }, e2.abort = function() {
            var t4;
            this.abortInternal(), null != (t4 = this.callbacks) && t4.onAbort && this.callbacks.onAbort(this.stats, this.context, this.loader);
          }, e2.load = function(t4, e3, r3) {
            if (this.stats.loading.start) throw new Error("Loader can only be used once.");
            this.stats.loading.start = self.performance.now(), this.context = t4, this.config = e3, this.callbacks = r3, this.loadInternal();
          }, e2.loadInternal = function() {
            var t4 = this, e3 = this.config, r3 = this.context;
            if (e3 && r3) {
              var i4 = this.loader = new self.XMLHttpRequest(), n2 = this.stats;
              n2.loading.first = 0, n2.loaded = 0, n2.aborted = false;
              var a2 = this.xhrSetup;
              a2 ? Promise.resolve().then(function() {
                if (t4.loader === i4 && !t4.stats.aborted) return a2(i4, r3.url);
              }).catch(function(e4) {
                if (t4.loader === i4 && !t4.stats.aborted) return i4.open("GET", r3.url, true), a2(i4, r3.url);
              }).then(function() {
                t4.loader !== i4 || t4.stats.aborted || t4.openAndSendXhr(i4, r3, e3);
              }).catch(function(e4) {
                t4.callbacks.onError({ code: i4.status, text: e4.message }, r3, i4, n2);
              }) : this.openAndSendXhr(i4, r3, e3);
            }
          }, e2.openAndSendXhr = function(t4, e3, r3) {
            t4.readyState || t4.open("GET", e3.url, true);
            var i4 = e3.headers, n2 = r3.loadPolicy, a2 = n2.maxTimeToFirstByteMs, s3 = n2.maxLoadTimeMs;
            if (i4) for (var o2 in i4) t4.setRequestHeader(o2, i4[o2]);
            e3.rangeEnd && t4.setRequestHeader("Range", "bytes=" + e3.rangeStart + "-" + (e3.rangeEnd - 1)), t4.onreadystatechange = this.readystatechange.bind(this), t4.onprogress = this.loadprogress.bind(this), t4.responseType = e3.responseType, self.clearTimeout(this.requestTimeout), r3.timeout = a2 && y(a2) ? a2 : s3, this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), r3.timeout), t4.send();
          }, e2.readystatechange = function() {
            var t4 = this.context, e3 = this.loader, r3 = this.stats;
            if (t4 && e3) {
              var i4 = e3.readyState, n2 = this.config;
              if (!r3.aborted && i4 >= 2 && (0 === r3.loading.first && (r3.loading.first = Math.max(self.performance.now(), r3.loading.start), n2.timeout !== n2.loadPolicy.maxLoadTimeMs && (self.clearTimeout(this.requestTimeout), n2.timeout = n2.loadPolicy.maxLoadTimeMs, this.requestTimeout = self.setTimeout(this.loadtimeout.bind(this), n2.loadPolicy.maxLoadTimeMs - (r3.loading.first - r3.loading.start)))), 4 === i4)) {
                self.clearTimeout(this.requestTimeout), e3.onreadystatechange = null, e3.onprogress = null;
                var a2 = e3.status, s3 = "text" !== e3.responseType;
                if (a2 >= 200 && a2 < 300 && (s3 && e3.response || null !== e3.responseText)) {
                  r3.loading.end = Math.max(self.performance.now(), r3.loading.first);
                  var o2 = s3 ? e3.response : e3.responseText, l2 = "arraybuffer" === e3.responseType ? o2.byteLength : o2.length;
                  if (r3.loaded = r3.total = l2, r3.bwEstimate = 8e3 * r3.total / (r3.loading.end - r3.loading.first), !this.callbacks) return;
                  var u2 = this.callbacks.onProgress;
                  if (u2 && u2(r3, t4, o2, e3), !this.callbacks) return;
                  var h2 = { url: e3.responseURL, data: o2, code: a2 };
                  this.callbacks.onSuccess(h2, r3, t4, e3);
                } else {
                  var d2 = n2.loadPolicy.errorRetry;
                  Sr(d2, r3.retry, false, { url: t4.url, data: void 0, code: a2 }) ? this.retry(d2) : (w.error(a2 + " while loading " + t4.url), this.callbacks.onError({ code: a2, text: e3.statusText }, t4, e3, r3));
                }
              }
            }
          }, e2.loadtimeout = function() {
            if (this.config) {
              var t4 = this.config.loadPolicy.timeoutRetry;
              if (Sr(t4, this.stats.retry, true)) this.retry(t4);
              else {
                var e3;
                w.warn("timeout while loading " + (null == (e3 = this.context) ? void 0 : e3.url));
                var r3 = this.callbacks;
                r3 && (this.abortInternal(), r3.onTimeout(this.stats, this.context, this.loader));
              }
            }
          }, e2.retry = function(t4) {
            var e3 = this.context, r3 = this.stats;
            this.retryDelay = Er(t4, r3.retry), r3.retry++, w.warn((status ? "HTTP Status " + status : "Timeout") + " while loading " + (null == e3 ? void 0 : e3.url) + ", retrying " + r3.retry + "/" + t4.maxNumRetry + " in " + this.retryDelay + "ms"), this.abortInternal(), this.loader = null, self.clearTimeout(this.retryTimeout), this.retryTimeout = self.setTimeout(this.loadInternal.bind(this), this.retryDelay);
          }, e2.loadprogress = function(t4) {
            var e3 = this.stats;
            e3.loaded = t4.loaded, t4.lengthComputable && (e3.total = t4.total);
          }, e2.getCacheAge = function() {
            var t4 = null;
            if (this.loader && Xs.test(this.loader.getAllResponseHeaders())) {
              var e3 = this.loader.getResponseHeader("age");
              t4 = e3 ? parseFloat(e3) : null;
            }
            return t4;
          }, e2.getResponseHeader = function(t4) {
            return this.loader && new RegExp("^" + t4 + ":\\s*[\\d.]+\\s*$", "im").test(this.loader.getAllResponseHeaders()) ? this.loader.getResponseHeader(t4) : null;
          }, t3;
        }(), Qs = /(\d+)-(\d+)\/(\d+)/, Js = function() {
          function t3(t4) {
            this.fetchSetup = void 0, this.requestTimeout = void 0, this.request = null, this.response = null, this.controller = void 0, this.context = null, this.config = null, this.callbacks = null, this.stats = void 0, this.loader = null, this.fetchSetup = t4.fetchSetup || $s, this.controller = new self.AbortController(), this.stats = new M();
          }
          var e2 = t3.prototype;
          return e2.destroy = function() {
            this.loader = this.callbacks = this.context = this.config = this.request = null, this.abortInternal(), this.response = null, this.fetchSetup = this.controller = this.stats = null;
          }, e2.abortInternal = function() {
            this.controller && !this.stats.loading.end && (this.stats.aborted = true, this.controller.abort());
          }, e2.abort = function() {
            var t4;
            this.abortInternal(), null != (t4 = this.callbacks) && t4.onAbort && this.callbacks.onAbort(this.stats, this.context, this.response);
          }, e2.load = function(t4, e3, r3) {
            var i4 = this, n2 = this.stats;
            if (n2.loading.start) throw new Error("Loader can only be used once.");
            n2.loading.start = self.performance.now();
            var a2 = function(t5, e4) {
              var r4 = { method: "GET", mode: "cors", credentials: "same-origin", signal: e4, headers: new self.Headers(o({}, t5.headers)) };
              return t5.rangeEnd && r4.headers.set("Range", "bytes=" + t5.rangeStart + "-" + String(t5.rangeEnd - 1)), r4;
            }(t4, this.controller.signal), s3 = r3.onProgress, l2 = "arraybuffer" === t4.responseType, u2 = l2 ? "byteLength" : "length", h2 = e3.loadPolicy, d2 = h2.maxTimeToFirstByteMs, c2 = h2.maxLoadTimeMs;
            this.context = t4, this.config = e3, this.callbacks = r3, this.request = this.fetchSetup(t4, a2), self.clearTimeout(this.requestTimeout), e3.timeout = d2 && y(d2) ? d2 : c2, this.requestTimeout = self.setTimeout(function() {
              i4.abortInternal(), r3.onTimeout(n2, t4, i4.response);
            }, e3.timeout), self.fetch(this.request).then(function(a3) {
              i4.response = i4.loader = a3;
              var o2 = Math.max(self.performance.now(), n2.loading.start);
              if (self.clearTimeout(i4.requestTimeout), e3.timeout = c2, i4.requestTimeout = self.setTimeout(function() {
                i4.abortInternal(), r3.onTimeout(n2, t4, i4.response);
              }, c2 - (o2 - n2.loading.start)), !a3.ok) {
                var u3 = a3.status, h3 = a3.statusText;
                throw new to(h3 || "fetch, bad network response", u3, a3);
              }
              return n2.loading.first = o2, n2.total = function(t5) {
                var e4 = t5.get("Content-Range");
                if (e4) {
                  var r4 = function(t6) {
                    var e5 = Qs.exec(t6);
                    if (e5) return parseInt(e5[2]) - parseInt(e5[1]) + 1;
                  }(e4);
                  if (y(r4)) return r4;
                }
                var i5 = t5.get("Content-Length");
                if (i5) return parseInt(i5);
              }(a3.headers) || n2.total, s3 && y(e3.highWaterMark) ? i4.loadProgressively(a3, n2, t4, e3.highWaterMark, s3) : l2 ? a3.arrayBuffer() : "json" === t4.responseType ? a3.json() : a3.text();
            }).then(function(a3) {
              var o2 = i4.response;
              if (!o2) throw new Error("loader destroyed");
              self.clearTimeout(i4.requestTimeout), n2.loading.end = Math.max(self.performance.now(), n2.loading.first);
              var l3 = a3[u2];
              l3 && (n2.loaded = n2.total = l3);
              var h3 = { url: o2.url, data: a3, code: o2.status };
              s3 && !y(e3.highWaterMark) && s3(n2, t4, a3, o2), r3.onSuccess(h3, n2, t4, o2);
            }).catch(function(e4) {
              if (self.clearTimeout(i4.requestTimeout), !n2.aborted) {
                var a3 = e4 && e4.code || 0, s4 = e4 ? e4.message : null;
                r3.onError({ code: a3, text: s4 }, t4, e4 ? e4.details : null, n2);
              }
            });
          }, e2.getCacheAge = function() {
            var t4 = null;
            if (this.response) {
              var e3 = this.response.headers.get("age");
              t4 = e3 ? parseFloat(e3) : null;
            }
            return t4;
          }, e2.getResponseHeader = function(t4) {
            return this.response ? this.response.headers.get(t4) : null;
          }, e2.loadProgressively = function(t4, e3, r3, i4, n2) {
            void 0 === i4 && (i4 = 0);
            var a2 = new xi(), s3 = t4.body.getReader();
            return function o2() {
              return s3.read().then(function(s4) {
                if (s4.done) return a2.dataLength && n2(e3, r3, a2.flush(), t4), Promise.resolve(new ArrayBuffer(0));
                var l2 = s4.value, u2 = l2.length;
                return e3.loaded += u2, u2 < i4 || a2.dataLength ? (a2.push(l2), a2.dataLength >= i4 && n2(e3, r3, a2.flush(), t4)) : n2(e3, r3, l2, t4), o2();
              }).catch(function() {
                return Promise.reject();
              });
            }();
          }, t3;
        }();
        function $s(t3, e2) {
          return new self.Request(t3.url, e2);
        }
        var Zs, to = function(t3) {
          function e2(e3, r3, i4) {
            var n2;
            return (n2 = t3.call(this, e3) || this).code = void 0, n2.details = void 0, n2.code = r3, n2.details = i4, n2;
          }
          return l(e2, t3), e2;
        }(c(Error)), eo = /\s/, ro = i3(i3({ autoStartLoad: true, startPosition: -1, defaultAudioCodec: void 0, debug: false, capLevelOnFPSDrop: false, capLevelToPlayerSize: false, ignoreDevicePixelRatio: false, preferManagedMediaSource: true, initialLiveManifestSize: 1, maxBufferLength: 30, backBufferLength: 1 / 0, frontBufferFlushThreshold: 1 / 0, maxBufferSize: 6e7, maxBufferHole: 0.1, highBufferWatchdogPeriod: 2, nudgeOffset: 0.1, nudgeMaxRetry: 3, maxFragLookUpTolerance: 0.25, liveSyncDurationCount: 3, liveMaxLatencyDurationCount: 1 / 0, liveSyncDuration: void 0, liveMaxLatencyDuration: void 0, maxLiveSyncPlaybackRate: 1, liveDurationInfinity: false, liveBackBufferLength: null, maxMaxBufferLength: 600, enableWorker: true, workerPath: null, enableSoftwareAES: true, startLevel: void 0, startFragPrefetch: false, fpsDroppedMonitoringPeriod: 5e3, fpsDroppedMonitoringThreshold: 0.2, appendErrorMaxRetry: 3, loader: zs, fLoader: void 0, pLoader: void 0, xhrSetup: void 0, licenseXhrSetup: void 0, licenseResponseCallback: void 0, abrController: jr, bufferController: na, capLevelController: ts, errorController: Pr, fpsController: es, stretchShortVideoTrack: false, maxAudioFramesDrift: 1, forceKeyFrameOnDiscontinuity: true, abrEwmaFastLive: 3, abrEwmaSlowLive: 9, abrEwmaFastVoD: 3, abrEwmaSlowVoD: 9, abrEwmaDefaultEstimate: 5e5, abrEwmaDefaultEstimateMax: 5e6, abrBandWidthFactor: 0.95, abrBandWidthUpFactor: 0.7, abrMaxWithRealBitrate: false, maxStarvationDelay: 4, maxLoadingDelay: 4, minAutoBitrate: 0, emeEnabled: false, widevineLicenseUrl: void 0, drmSystems: {}, drmSystemOptions: {}, requestMediaKeySystemAccessFunc: ot, testBandwidth: true, progressive: false, lowLatencyMode: true, cmcd: void 0, enableDateRangeMetadataCues: true, enableEmsgMetadataCues: true, enableID3MetadataCues: true, useMediaCapabilities: true, certLoadPolicy: { default: { maxTimeToFirstByteMs: 8e3, maxLoadTimeMs: 2e4, timeoutRetry: null, errorRetry: null } }, keyLoadPolicy: { default: { maxTimeToFirstByteMs: 8e3, maxLoadTimeMs: 2e4, timeoutRetry: { maxNumRetry: 1, retryDelayMs: 1e3, maxRetryDelayMs: 2e4, backoff: "linear" }, errorRetry: { maxNumRetry: 8, retryDelayMs: 1e3, maxRetryDelayMs: 2e4, backoff: "linear" } } }, manifestLoadPolicy: { default: { maxTimeToFirstByteMs: 1 / 0, maxLoadTimeMs: 2e4, timeoutRetry: { maxNumRetry: 2, retryDelayMs: 0, maxRetryDelayMs: 0 }, errorRetry: { maxNumRetry: 1, retryDelayMs: 1e3, maxRetryDelayMs: 8e3 } } }, playlistLoadPolicy: { default: { maxTimeToFirstByteMs: 1e4, maxLoadTimeMs: 2e4, timeoutRetry: { maxNumRetry: 2, retryDelayMs: 0, maxRetryDelayMs: 0 }, errorRetry: { maxNumRetry: 2, retryDelayMs: 1e3, maxRetryDelayMs: 8e3 } } }, fragLoadPolicy: { default: { maxTimeToFirstByteMs: 1e4, maxLoadTimeMs: 12e4, timeoutRetry: { maxNumRetry: 4, retryDelayMs: 0, maxRetryDelayMs: 0 }, errorRetry: { maxNumRetry: 6, retryDelayMs: 1e3, maxRetryDelayMs: 8e3 } } }, steeringManifestLoadPolicy: { default: { maxTimeToFirstByteMs: 1e4, maxLoadTimeMs: 2e4, timeoutRetry: { maxNumRetry: 2, retryDelayMs: 0, maxRetryDelayMs: 0 }, errorRetry: { maxNumRetry: 1, retryDelayMs: 1e3, maxRetryDelayMs: 8e3 } } }, manifestLoadingTimeOut: 1e4, manifestLoadingMaxRetry: 1, manifestLoadingRetryDelay: 1e3, manifestLoadingMaxRetryTimeout: 64e3, levelLoadingTimeOut: 1e4, levelLoadingMaxRetry: 4, levelLoadingRetryDelay: 1e3, levelLoadingMaxRetryTimeout: 64e3, fragLoadingTimeOut: 2e4, fragLoadingMaxRetry: 6, fragLoadingRetryDelay: 1e3, fragLoadingMaxRetryTimeout: 64e3 }, { cueHandler: { newCue: function(t3, e2, r3, i4) {
          for (var n2, a2, s3, o2, l2, u2 = [], h2 = self.VTTCue || self.TextTrackCue, d2 = 0; d2 < i4.rows.length; d2++) if (s3 = true, o2 = 0, l2 = "", !(n2 = i4.rows[d2]).isEmpty()) {
            for (var c2, f3 = 0; f3 < n2.chars.length; f3++) eo.test(n2.chars[f3].uchar) && s3 ? o2++ : (l2 += n2.chars[f3].uchar, s3 = false);
            n2.cueStartTime = e2, e2 === r3 && (r3 += 1e-4), o2 >= 16 ? o2-- : o2++;
            var g2 = Pa(l2.trim()), v2 = Ua(e2, r3, g2);
            null != t3 && null != (c2 = t3.cues) && c2.getCueById(v2) || ((a2 = new h2(e2, r3, g2)).id = v2, a2.line = d2 + 1, a2.align = "left", a2.position = 10 + Math.min(80, 10 * Math.floor(8 * o2 / 32)), u2.push(a2));
          }
          return t3 && u2.length && (u2.sort(function(t4, e3) {
            return "auto" === t4.line || "auto" === e3.line ? 0 : t4.line > 8 && e3.line > 8 ? e3.line - t4.line : t4.line - e3.line;
          }), u2.forEach(function(e3) {
            return Ke(t3, e3);
          })), u2;
        } }, enableWebVTT: true, enableIMSC1: true, enableCEA708Captions: true, captionsTextTrack1Label: "English", captionsTextTrack1LanguageCode: "en", captionsTextTrack2Label: "Spanish", captionsTextTrack2LanguageCode: "es", captionsTextTrack3Label: "Unknown CC", captionsTextTrack3LanguageCode: "", captionsTextTrack4Label: "Unknown CC", captionsTextTrack4LanguageCode: "", renderTextTracksNatively: true }), {}, { subtitleStreamController: Zn, subtitleTrackController: ea, timelineController: Ja, audioStreamController: Jn, audioTrackController: $n, emeController: is, cmcdController: Ys, contentSteeringController: Ws });
        function io(t3) {
          return t3 && "object" == typeof t3 ? Array.isArray(t3) ? t3.map(io) : Object.keys(t3).reduce(function(e2, r3) {
            return e2[r3] = io(t3[r3]), e2;
          }, {}) : t3;
        }
        function no(t3) {
          var e2 = t3.loader;
          e2 !== Js && e2 !== zs ? (w.log("[config]: Custom loader detected, cannot enable progressive streaming"), t3.progressive = false) : function() {
            if (self.fetch && self.AbortController && self.ReadableStream && self.Request) try {
              return new self.ReadableStream({}), true;
            } catch (t4) {
            }
            return false;
          }() && (t3.loader = Js, t3.progressive = true, t3.enableSoftwareAES = true, w.log("[config]: Progressive streaming enabled, using FetchLoader"));
        }
        var ao = function(t3) {
          function e2(e3, r4) {
            var i4;
            return (i4 = t3.call(this, e3, "[level-controller]") || this)._levels = [], i4._firstLevel = -1, i4._maxAutoLevel = -1, i4._startLevel = void 0, i4.currentLevel = null, i4.currentLevelIndex = -1, i4.manualLevelIndex = -1, i4.steering = void 0, i4.onParsedComplete = void 0, i4.steering = r4, i4._registerListeners(), i4;
          }
          l(e2, t3);
          var r3 = e2.prototype;
          return r3._registerListeners = function() {
            var t4 = this.hls;
            t4.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(S.MANIFEST_LOADED, this.onManifestLoaded, this), t4.on(S.LEVEL_LOADED, this.onLevelLoaded, this), t4.on(S.LEVELS_UPDATED, this.onLevelsUpdated, this), t4.on(S.FRAG_BUFFERED, this.onFragBuffered, this), t4.on(S.ERROR, this.onError, this);
          }, r3._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(S.MANIFEST_LOADED, this.onManifestLoaded, this), t4.off(S.LEVEL_LOADED, this.onLevelLoaded, this), t4.off(S.LEVELS_UPDATED, this.onLevelsUpdated, this), t4.off(S.FRAG_BUFFERED, this.onFragBuffered, this), t4.off(S.ERROR, this.onError, this);
          }, r3.destroy = function() {
            this._unregisterListeners(), this.steering = null, this.resetLevels(), t3.prototype.destroy.call(this);
          }, r3.stopLoad = function() {
            this._levels.forEach(function(t4) {
              t4.loadError = 0, t4.fragmentError = 0;
            }), t3.prototype.stopLoad.call(this);
          }, r3.resetLevels = function() {
            this._startLevel = void 0, this.manualLevelIndex = -1, this.currentLevelIndex = -1, this.currentLevel = null, this._levels = [], this._maxAutoLevel = -1;
          }, r3.onManifestLoading = function(t4, e3) {
            this.resetLevels();
          }, r3.onManifestLoaded = function(t4, e3) {
            var r4 = this.hls.config.preferManagedMediaSource, i4 = [], n2 = {}, a2 = {}, s3 = false, o2 = false, l2 = false;
            e3.levels.forEach(function(t5) {
              var e4, u2, h2 = t5.attrs, d2 = t5.audioCodec, c2 = t5.videoCodec;
              -1 !== (null == (e4 = d2) ? void 0 : e4.indexOf("mp4a.40.34")) && (Zs || (Zs = /chrome|firefox/i.test(navigator.userAgent)), Zs && (t5.audioCodec = d2 = void 0)), d2 && (t5.audioCodec = d2 = ve(d2, r4)), 0 === (null == (u2 = c2) ? void 0 : u2.indexOf("avc1")) && (c2 = t5.videoCodec = function(t6) {
                for (var e5 = t6.split(","), r5 = 0; r5 < e5.length; r5++) {
                  var i5 = e5[r5].split(".");
                  if (i5.length > 2) {
                    var n3 = i5.shift() + ".";
                    n3 += parseInt(i5.shift()).toString(16), n3 += ("000" + parseInt(i5.shift()).toString(16)).slice(-4), e5[r5] = n3;
                  }
                }
                return e5.join(",");
              }(c2));
              var f3 = t5.width, g2 = t5.height, v2 = t5.unknownCodecs;
              if (s3 || (s3 = !(!f3 || !g2)), o2 || (o2 = !!c2), l2 || (l2 = !!d2), !(null != v2 && v2.length || d2 && !le(d2, "audio", r4) || c2 && !le(c2, "video", r4))) {
                var m2 = h2.CODECS, p2 = h2["FRAME-RATE"], y2 = h2["HDCP-LEVEL"], E2 = h2["PATHWAY-ID"], T2 = h2.RESOLUTION, S2 = h2["VIDEO-RANGE"], L2 = (E2 || ".") + "-" + t5.bitrate + "-" + T2 + "-" + p2 + "-" + m2 + "-" + S2 + "-" + y2;
                if (n2[L2]) if (n2[L2].uri === t5.url || t5.attrs["PATHWAY-ID"]) n2[L2].addGroupId("audio", h2.AUDIO), n2[L2].addGroupId("text", h2.SUBTITLES);
                else {
                  var A2 = a2[L2] += 1;
                  t5.attrs["PATHWAY-ID"] = new Array(A2 + 1).join(".");
                  var R2 = new or(t5);
                  n2[L2] = R2, i4.push(R2);
                }
                else {
                  var b2 = new or(t5);
                  n2[L2] = b2, a2[L2] = 1, i4.push(b2);
                }
              }
            }), this.filterAndSortMediaOptions(i4, e3, s3, o2, l2);
          }, r3.filterAndSortMediaOptions = function(t4, e3, r4, i4, n2) {
            var a2 = this, s3 = [], o2 = [], l2 = t4;
            if ((r4 || i4) && n2 && (l2 = l2.filter(function(t5) {
              var e4, r5 = t5.videoCodec, i5 = t5.videoRange, n3 = t5.width, a3 = t5.height;
              return (!!r5 || !(!n3 || !a3)) && !!(e4 = i5) && er.indexOf(e4) > -1;
            })), 0 !== l2.length) {
              if (e3.audioTracks) {
                var u2 = this.hls.config.preferManagedMediaSource;
                so(s3 = e3.audioTracks.filter(function(t5) {
                  return !t5.audioCodec || le(t5.audioCodec, "audio", u2);
                }));
              }
              e3.subtitles && so(o2 = e3.subtitles);
              var h2 = l2.slice(0);
              l2.sort(function(t5, e4) {
                if (t5.attrs["HDCP-LEVEL"] !== e4.attrs["HDCP-LEVEL"]) return (t5.attrs["HDCP-LEVEL"] || "") > (e4.attrs["HDCP-LEVEL"] || "") ? 1 : -1;
                if (r4 && t5.height !== e4.height) return t5.height - e4.height;
                if (t5.frameRate !== e4.frameRate) return t5.frameRate - e4.frameRate;
                if (t5.videoRange !== e4.videoRange) return er.indexOf(t5.videoRange) - er.indexOf(e4.videoRange);
                if (t5.videoCodec !== e4.videoCodec) {
                  var i5 = de(t5.videoCodec), n3 = de(e4.videoCodec);
                  if (i5 !== n3) return n3 - i5;
                }
                if (t5.uri === e4.uri && t5.codecSet !== e4.codecSet) {
                  var a3 = ce(t5.codecSet), s4 = ce(e4.codecSet);
                  if (a3 !== s4) return s4 - a3;
                }
                return t5.averageBitrate !== e4.averageBitrate ? t5.averageBitrate - e4.averageBitrate : 0;
              });
              var d2 = h2[0];
              if (this.steering && (l2 = this.steering.filterParsedLevels(l2)).length !== h2.length) {
                for (var c2 = 0; c2 < h2.length; c2++) if (h2[c2].pathwayId === l2[0].pathwayId) {
                  d2 = h2[c2];
                  break;
                }
              }
              this._levels = l2;
              for (var f3 = 0; f3 < l2.length; f3++) if (l2[f3] === d2) {
                var g2;
                this._firstLevel = f3;
                var v2 = d2.bitrate, m2 = this.hls.bandwidthEstimate;
                if (this.log("manifest loaded, " + l2.length + " level(s) found, first bitrate: " + v2), void 0 === (null == (g2 = this.hls.userConfig) ? void 0 : g2.abrEwmaDefaultEstimate)) {
                  var p2 = Math.min(v2, this.hls.config.abrEwmaDefaultEstimateMax);
                  p2 > m2 && m2 === ro.abrEwmaDefaultEstimate && (this.hls.bandwidthEstimate = p2);
                }
                break;
              }
              var y2 = n2 && !i4, E2 = { levels: l2, audioTracks: s3, subtitleTracks: o2, sessionData: e3.sessionData, sessionKeys: e3.sessionKeys, firstLevel: this._firstLevel, stats: e3.stats, audio: n2, video: i4, altAudio: !y2 && s3.some(function(t5) {
                return !!t5.url;
              }) };
              this.hls.trigger(S.MANIFEST_PARSED, E2), (this.hls.config.autoStartLoad || this.hls.forceStartLoad) && this.hls.startLoad(this.hls.config.startPosition);
            } else Promise.resolve().then(function() {
              if (a2.hls) {
                e3.levels.length && a2.warn("One or more CODECS in variant not supported: " + JSON.stringify(e3.levels[0].attrs));
                var t5 = new Error("no level with compatible codecs found in manifest");
                a2.hls.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.MANIFEST_INCOMPATIBLE_CODECS_ERROR, fatal: true, url: e3.url, error: t5, reason: t5.message });
              }
            });
          }, r3.onError = function(t4, e3) {
            !e3.fatal && e3.context && e3.context.type === _e && e3.context.level === this.level && this.checkRetry(e3);
          }, r3.onFragBuffered = function(t4, e3) {
            var r4 = e3.frag;
            if (void 0 !== r4 && r4.type === Fe) {
              var i4 = r4.elementaryStreams;
              if (!Object.keys(i4).some(function(t5) {
                return !!i4[t5];
              })) return;
              var n2 = this._levels[r4.level];
              null != n2 && n2.loadError && (this.log("Resetting level error count of " + n2.loadError + " on frag buffered"), n2.loadError = 0);
            }
          }, r3.onLevelLoaded = function(t4, e3) {
            var r4, i4, n2 = e3.level, a2 = e3.details, s3 = this._levels[n2];
            if (!s3) return this.warn("Invalid level index " + n2), void (null != (i4 = e3.deliveryDirectives) && i4.skip && (a2.deltaUpdateFailed = true));
            n2 === this.currentLevelIndex ? (0 === s3.fragmentError && (s3.loadError = 0), this.playlistLoaded(n2, e3, s3.details)) : null != (r4 = e3.deliveryDirectives) && r4.skip && (a2.deltaUpdateFailed = true);
          }, r3.loadPlaylist = function(e3) {
            t3.prototype.loadPlaylist.call(this);
            var r4 = this.currentLevelIndex, i4 = this.currentLevel;
            if (i4 && this.shouldLoadPlaylist(i4)) {
              var n2 = i4.uri;
              if (e3) try {
                n2 = e3.addDirectives(n2);
              } catch (t4) {
                this.warn("Could not construct new URL with HLS Delivery Directives: " + t4);
              }
              var a2 = i4.attrs["PATHWAY-ID"];
              this.log("Loading level index " + r4 + (void 0 !== (null == e3 ? void 0 : e3.msn) ? " at sn " + e3.msn + " part " + e3.part : "") + " with" + (a2 ? " Pathway " + a2 : "") + " " + n2), this.clearTimer(), this.hls.trigger(S.LEVEL_LOADING, { url: n2, level: r4, pathwayId: i4.attrs["PATHWAY-ID"], id: 0, deliveryDirectives: e3 || null });
            }
          }, r3.removeLevel = function(t4) {
            var e3, r4 = this, i4 = this._levels.filter(function(e4, i5) {
              return i5 !== t4 || (r4.steering && r4.steering.removeLevel(e4), e4 === r4.currentLevel && (r4.currentLevel = null, r4.currentLevelIndex = -1, e4.details && e4.details.fragments.forEach(function(t5) {
                return t5.level = -1;
              })), false);
            });
            mr(i4), this._levels = i4, this.currentLevelIndex > -1 && null != (e3 = this.currentLevel) && e3.details && (this.currentLevelIndex = this.currentLevel.details.fragments[0].level), this.hls.trigger(S.LEVELS_UPDATED, { levels: i4 });
          }, r3.onLevelsUpdated = function(t4, e3) {
            var r4 = e3.levels;
            this._levels = r4;
          }, r3.checkMaxAutoUpdated = function() {
            var t4 = this.hls, e3 = t4.autoLevelCapping, r4 = t4.maxAutoLevel, i4 = t4.maxHdcpLevel;
            this._maxAutoLevel !== r4 && (this._maxAutoLevel = r4, this.hls.trigger(S.MAX_AUTO_LEVEL_UPDATED, { autoLevelCapping: e3, levels: this.levels, maxAutoLevel: r4, minAutoLevel: this.hls.minAutoLevel, maxHdcpLevel: i4 }));
          }, s2(e2, [{ key: "levels", get: function() {
            return 0 === this._levels.length ? null : this._levels;
          } }, { key: "level", get: function() {
            return this.currentLevelIndex;
          }, set: function(t4) {
            var e3 = this._levels;
            if (0 !== e3.length) {
              if (t4 < 0 || t4 >= e3.length) {
                var r4 = new Error("invalid level idx"), i4 = t4 < 0;
                if (this.hls.trigger(S.ERROR, { type: L.OTHER_ERROR, details: A.LEVEL_SWITCH_ERROR, level: t4, fatal: i4, error: r4, reason: r4.message }), i4) return;
                t4 = Math.min(t4, e3.length - 1);
              }
              var n2 = this.currentLevelIndex, a2 = this.currentLevel, s3 = a2 ? a2.attrs["PATHWAY-ID"] : void 0, o2 = e3[t4], l2 = o2.attrs["PATHWAY-ID"];
              if (this.currentLevelIndex = t4, this.currentLevel = o2, n2 !== t4 || !o2.details || !a2 || s3 !== l2) {
                this.log("Switching to level " + t4 + " (" + (o2.height ? o2.height + "p " : "") + (o2.videoRange ? o2.videoRange + " " : "") + (o2.codecSet ? o2.codecSet + " " : "") + "@" + o2.bitrate + ")" + (l2 ? " with Pathway " + l2 : "") + " from level " + n2 + (s3 ? " with Pathway " + s3 : ""));
                var u2 = { level: t4, attrs: o2.attrs, details: o2.details, bitrate: o2.bitrate, averageBitrate: o2.averageBitrate, maxBitrate: o2.maxBitrate, realBitrate: o2.realBitrate, width: o2.width, height: o2.height, codecSet: o2.codecSet, audioCodec: o2.audioCodec, videoCodec: o2.videoCodec, audioGroups: o2.audioGroups, subtitleGroups: o2.subtitleGroups, loaded: o2.loaded, loadError: o2.loadError, fragmentError: o2.fragmentError, name: o2.name, id: o2.id, uri: o2.uri, url: o2.url, urlId: 0, audioGroupIds: o2.audioGroupIds, textGroupIds: o2.textGroupIds };
                this.hls.trigger(S.LEVEL_SWITCHING, u2);
                var h2 = o2.details;
                if (!h2 || h2.live) {
                  var d2 = this.switchParams(o2.uri, null == a2 ? void 0 : a2.details, h2);
                  this.loadPlaylist(d2);
                }
              }
            }
          } }, { key: "manualLevel", get: function() {
            return this.manualLevelIndex;
          }, set: function(t4) {
            this.manualLevelIndex = t4, void 0 === this._startLevel && (this._startLevel = t4), -1 !== t4 && (this.level = t4);
          } }, { key: "firstLevel", get: function() {
            return this._firstLevel;
          }, set: function(t4) {
            this._firstLevel = t4;
          } }, { key: "startLevel", get: function() {
            if (void 0 === this._startLevel) {
              var t4 = this.hls.config.startLevel;
              return void 0 !== t4 ? t4 : this.hls.firstAutoLevel;
            }
            return this._startLevel;
          }, set: function(t4) {
            this._startLevel = t4;
          } }, { key: "nextLoadLevel", get: function() {
            return -1 !== this.manualLevelIndex ? this.manualLevelIndex : this.hls.nextAutoLevel;
          }, set: function(t4) {
            this.level = t4, -1 === this.manualLevelIndex && (this.hls.nextAutoLevel = t4);
          } }]), e2;
        }(Fr);
        function so(t3) {
          var e2 = {};
          t3.forEach(function(t4) {
            var r3 = t4.groupId || "";
            t4.id = e2[r3] = e2[r3] || 0, e2[r3]++;
          });
        }
        var oo = function() {
          function t3(t4) {
            this.config = void 0, this.keyUriToKeyInfo = {}, this.emeController = null, this.config = t4;
          }
          var e2 = t3.prototype;
          return e2.abort = function(t4) {
            for (var e3 in this.keyUriToKeyInfo) {
              var r3 = this.keyUriToKeyInfo[e3].loader;
              if (r3) {
                var i4;
                if (t4 && t4 !== (null == (i4 = r3.context) ? void 0 : i4.frag.type)) return;
                r3.abort();
              }
            }
          }, e2.detach = function() {
            for (var t4 in this.keyUriToKeyInfo) {
              var e3 = this.keyUriToKeyInfo[t4];
              (e3.mediaKeySessionContext || e3.decryptdata.isCommonEncryption) && delete this.keyUriToKeyInfo[t4];
            }
          }, e2.destroy = function() {
            for (var t4 in this.detach(), this.keyUriToKeyInfo) {
              var e3 = this.keyUriToKeyInfo[t4].loader;
              e3 && e3.destroy();
            }
            this.keyUriToKeyInfo = {};
          }, e2.createKeyLoadError = function(t4, e3, r3, i4, n2) {
            return void 0 === e3 && (e3 = A.KEY_LOAD_ERROR), new fi({ type: L.NETWORK_ERROR, details: e3, fatal: false, frag: t4, response: n2, error: r3, networkDetails: i4 });
          }, e2.loadClear = function(t4, e3) {
            var r3 = this;
            if (this.emeController && this.config.emeEnabled) for (var i4 = t4.sn, n2 = t4.cc, a2 = function() {
              var t5 = e3[s3];
              if (n2 <= t5.cc && ("initSegment" === i4 || "initSegment" === t5.sn || i4 < t5.sn)) return r3.emeController.selectKeySystemFormat(t5).then(function(e4) {
                t5.setKeyFormat(e4);
              }), 1;
            }, s3 = 0; s3 < e3.length && !a2(); s3++) ;
          }, e2.load = function(t4) {
            var e3 = this;
            return !t4.decryptdata && t4.encrypted && this.emeController ? this.emeController.selectKeySystemFormat(t4).then(function(r3) {
              return e3.loadInternal(t4, r3);
            }) : this.loadInternal(t4);
          }, e2.loadInternal = function(t4, e3) {
            var r3, i4;
            e3 && t4.setKeyFormat(e3);
            var n2 = t4.decryptdata;
            if (!n2) {
              var a2 = new Error(e3 ? "Expected frag.decryptdata to be defined after setting format " + e3 : "Missing decryption data on fragment in onKeyLoading");
              return Promise.reject(this.createKeyLoadError(t4, A.KEY_LOAD_ERROR, a2));
            }
            var s3 = n2.uri;
            if (!s3) return Promise.reject(this.createKeyLoadError(t4, A.KEY_LOAD_ERROR, new Error('Invalid key URI: "' + s3 + '"')));
            var o2, l2 = this.keyUriToKeyInfo[s3];
            if (null != (r3 = l2) && r3.decryptdata.key) return n2.key = l2.decryptdata.key, Promise.resolve({ frag: t4, keyInfo: l2 });
            if (null != (i4 = l2) && i4.keyLoadPromise) switch (null == (o2 = l2.mediaKeySessionContext) ? void 0 : o2.keyStatus) {
              case void 0:
              case "status-pending":
              case "usable":
              case "usable-in-future":
                return l2.keyLoadPromise.then(function(e4) {
                  return n2.key = e4.keyInfo.decryptdata.key, { frag: t4, keyInfo: l2 };
                });
            }
            switch (l2 = this.keyUriToKeyInfo[s3] = { decryptdata: n2, keyLoadPromise: null, loader: null, mediaKeySessionContext: null }, n2.method) {
              case "ISO-23001-7":
              case "SAMPLE-AES":
              case "SAMPLE-AES-CENC":
              case "SAMPLE-AES-CTR":
                return "identity" === n2.keyFormat ? this.loadKeyHTTP(l2, t4) : this.loadKeyEME(l2, t4);
              case "AES-128":
                return this.loadKeyHTTP(l2, t4);
              default:
                return Promise.reject(this.createKeyLoadError(t4, A.KEY_LOAD_ERROR, new Error('Key supplied with unsupported METHOD: "' + n2.method + '"')));
            }
          }, e2.loadKeyEME = function(t4, e3) {
            var r3 = { frag: e3, keyInfo: t4 };
            if (this.emeController && this.config.emeEnabled) {
              var i4 = this.emeController.loadKey(r3);
              if (i4) return (t4.keyLoadPromise = i4.then(function(e4) {
                return t4.mediaKeySessionContext = e4, r3;
              })).catch(function(e4) {
                throw t4.keyLoadPromise = null, e4;
              });
            }
            return Promise.resolve(r3);
          }, e2.loadKeyHTTP = function(t4, e3) {
            var r3 = this, n2 = this.config, a2 = new n2.loader(n2);
            return e3.keyLoader = t4.loader = a2, t4.keyLoadPromise = new Promise(function(s3, o2) {
              var l2 = { keyInfo: t4, frag: e3, responseType: "arraybuffer", url: t4.decryptdata.uri }, u2 = n2.keyLoadPolicy.default, h2 = { loadPolicy: u2, timeout: u2.maxLoadTimeMs, maxRetry: 0, retryDelay: 0, maxRetryDelay: 0 }, d2 = { onSuccess: function(t5, e4, i4, n3) {
                var a3 = i4.frag, l3 = i4.keyInfo, u3 = i4.url;
                if (!a3.decryptdata || l3 !== r3.keyUriToKeyInfo[u3]) return o2(r3.createKeyLoadError(a3, A.KEY_LOAD_ERROR, new Error("after key load, decryptdata unset or changed"), n3));
                l3.decryptdata.key = a3.decryptdata.key = new Uint8Array(t5.data), a3.keyLoader = null, l3.loader = null, s3({ frag: a3, keyInfo: l3 });
              }, onError: function(t5, n3, a3, s4) {
                r3.resetLoader(n3), o2(r3.createKeyLoadError(e3, A.KEY_LOAD_ERROR, new Error("HTTP Error " + t5.code + " loading key " + t5.text), a3, i3({ url: l2.url, data: void 0 }, t5)));
              }, onTimeout: function(t5, i4, n3) {
                r3.resetLoader(i4), o2(r3.createKeyLoadError(e3, A.KEY_LOAD_TIMEOUT, new Error("key loading timed out"), n3));
              }, onAbort: function(t5, i4, n3) {
                r3.resetLoader(i4), o2(r3.createKeyLoadError(e3, A.INTERNAL_ABORTED, new Error("key loading aborted"), n3));
              } };
              a2.load(l2, h2, d2);
            });
          }, e2.resetLoader = function(t4) {
            var e3 = t4.frag, r3 = t4.keyInfo, i4 = t4.url, n2 = r3.loader;
            e3.keyLoader === n2 && (e3.keyLoader = null, r3.loader = null), delete this.keyUriToKeyInfo[i4], n2 && n2.destroy();
          }, t3;
        }();
        function lo() {
          return self.SourceBuffer || self.WebKitSourceBuffer;
        }
        function uo() {
          if (!se()) return false;
          var t3 = lo();
          return !t3 || t3.prototype && "function" == typeof t3.prototype.appendBuffer && "function" == typeof t3.prototype.remove;
        }
        var ho = function() {
          function t3(t4, e3, r3, i4) {
            this.config = void 0, this.media = null, this.fragmentTracker = void 0, this.hls = void 0, this.nudgeRetry = 0, this.stallReported = false, this.stalled = null, this.moved = false, this.seeking = false, this.config = t4, this.media = e3, this.fragmentTracker = r3, this.hls = i4;
          }
          var e2 = t3.prototype;
          return e2.destroy = function() {
            this.media = null, this.hls = this.fragmentTracker = null;
          }, e2.poll = function(t4, e3) {
            var r3 = this.config, i4 = this.media, n2 = this.stalled;
            if (null !== i4) {
              var a2 = i4.currentTime, s3 = i4.seeking, o2 = this.seeking && !s3, l2 = !this.seeking && s3;
              if (this.seeking = s3, a2 === t4) if (l2 || o2) this.stalled = null;
              else if (i4.paused && !s3 || i4.ended || 0 === i4.playbackRate || !ri.getBuffered(i4).length) this.nudgeRetry = 0;
              else {
                var u2 = ri.bufferInfo(i4, a2, 0), h2 = u2.nextStart || 0;
                if (s3) {
                  var d2 = u2.len > 2, c2 = !h2 || e3 && e3.start <= a2 || h2 - a2 > 2 && !this.fragmentTracker.getPartialFragment(a2);
                  if (d2 || c2) return;
                  this.moved = false;
                }
                if (!this.moved && null !== this.stalled) {
                  var f3;
                  if (!(u2.len > 0 || h2)) return;
                  var g2 = Math.max(h2, u2.start || 0) - a2, v2 = this.hls.levels ? this.hls.levels[this.hls.currentLevel] : null, m2 = (null == v2 || null == (f3 = v2.details) ? void 0 : f3.live) ? 2 * v2.details.targetduration : 2, p2 = this.fragmentTracker.getPartialFragment(a2);
                  if (g2 > 0 && (g2 <= m2 || p2)) return void (i4.paused || this._trySkipBufferHole(p2));
                }
                var y2 = self.performance.now();
                if (null !== n2) {
                  var E2 = y2 - n2;
                  if (s3 || !(E2 >= 250) || (this._reportStall(u2), this.media)) {
                    var T2 = ri.bufferInfo(i4, a2, r3.maxBufferHole);
                    this._tryFixBufferStall(T2, E2);
                  }
                } else this.stalled = y2;
              }
              else if (this.moved = true, s3 || (this.nudgeRetry = 0), null !== n2) {
                if (this.stallReported) {
                  var S2 = self.performance.now() - n2;
                  w.warn("playback not stuck anymore @" + a2 + ", after " + Math.round(S2) + "ms"), this.stallReported = false;
                }
                this.stalled = null;
              }
            }
          }, e2._tryFixBufferStall = function(t4, e3) {
            var r3 = this.config, i4 = this.fragmentTracker, n2 = this.media;
            if (null !== n2) {
              var a2 = n2.currentTime, s3 = i4.getPartialFragment(a2);
              if (s3 && (this._trySkipBufferHole(s3) || !this.media)) return;
              (t4.len > r3.maxBufferHole || t4.nextStart && t4.nextStart - a2 < r3.maxBufferHole) && e3 > 1e3 * r3.highBufferWatchdogPeriod && (w.warn("Trying to nudge playhead over buffer-hole"), this.stalled = null, this._tryNudgeBuffer());
            }
          }, e2._reportStall = function(t4) {
            var e3 = this.hls, r3 = this.media;
            if (!this.stallReported && r3) {
              this.stallReported = true;
              var i4 = new Error("Playback stalling at @" + r3.currentTime + " due to low buffer (" + JSON.stringify(t4) + ")");
              w.warn(i4.message), e3.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.BUFFER_STALLED_ERROR, fatal: false, error: i4, buffer: t4.len });
            }
          }, e2._trySkipBufferHole = function(t4) {
            var e3 = this.config, r3 = this.hls, i4 = this.media;
            if (null === i4) return 0;
            var n2 = i4.currentTime, a2 = ri.bufferInfo(i4, n2, 0), s3 = n2 < a2.start ? a2.start : a2.nextStart;
            if (s3) {
              var o2 = a2.len <= e3.maxBufferHole, l2 = a2.len > 0 && a2.len < 1 && i4.readyState < 3, u2 = s3 - n2;
              if (u2 > 0 && (o2 || l2)) {
                if (u2 > e3.maxBufferHole) {
                  var h2 = this.fragmentTracker, d2 = false;
                  if (0 === n2) {
                    var c2 = h2.getAppendedFrag(0, Fe);
                    c2 && s3 < c2.end && (d2 = true);
                  }
                  if (!d2) {
                    var f3 = t4 || h2.getAppendedFrag(n2, Fe);
                    if (f3) {
                      for (var g2 = false, v2 = f3.end; v2 < s3; ) {
                        var m2 = h2.getPartialFragment(v2);
                        if (!m2) {
                          g2 = true;
                          break;
                        }
                        v2 += m2.duration;
                      }
                      if (g2) return 0;
                    }
                  }
                }
                var p2 = Math.max(s3 + 0.05, n2 + 0.1);
                if (w.warn("skipping hole, adjusting currentTime from " + n2 + " to " + p2), this.moved = true, this.stalled = null, i4.currentTime = p2, t4 && !t4.gap) {
                  var y2 = new Error("fragment loaded with buffer holes, seeking from " + n2 + " to " + p2);
                  r3.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.BUFFER_SEEK_OVER_HOLE, fatal: false, error: y2, reason: y2.message, frag: t4 });
                }
                return p2;
              }
            }
            return 0;
          }, e2._tryNudgeBuffer = function() {
            var t4 = this.config, e3 = this.hls, r3 = this.media, i4 = this.nudgeRetry;
            if (null !== r3) {
              var n2 = r3.currentTime;
              if (this.nudgeRetry++, i4 < t4.nudgeMaxRetry) {
                var a2 = n2 + (i4 + 1) * t4.nudgeOffset, s3 = new Error("Nudging 'currentTime' from " + n2 + " to " + a2);
                w.warn(s3.message), r3.currentTime = a2, e3.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.BUFFER_NUDGE_ON_STALL, error: s3, fatal: false });
              } else {
                var o2 = new Error("Playhead still not moving while enough data buffered @" + n2 + " after " + t4.nudgeMaxRetry + " nudges");
                w.error(o2.message), e3.trigger(S.ERROR, { type: L.MEDIA_ERROR, details: A.BUFFER_STALLED_ERROR, error: o2, fatal: true });
              }
            }
          }, t3;
        }(), co = function(t3) {
          function e2(e3, r4, i4) {
            var n2;
            return (n2 = t3.call(this, e3, r4, i4, "[stream-controller]", Fe) || this).audioCodecSwap = false, n2.gapController = null, n2.level = -1, n2._forceStartLoad = false, n2.altAudio = false, n2.audioOnly = false, n2.fragPlaying = null, n2.onvplaying = null, n2.onvseeked = null, n2.fragLastKbps = 0, n2.couldBacktrack = false, n2.backtrackFragment = null, n2.audioCodecSwitch = false, n2.videoBuffer = null, n2._registerListeners(), n2;
          }
          l(e2, t3);
          var r3 = e2.prototype;
          return r3._registerListeners = function() {
            var t4 = this.hls;
            t4.on(S.MEDIA_ATTACHED, this.onMediaAttached, this), t4.on(S.MEDIA_DETACHING, this.onMediaDetaching, this), t4.on(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.on(S.MANIFEST_PARSED, this.onManifestParsed, this), t4.on(S.LEVEL_LOADING, this.onLevelLoading, this), t4.on(S.LEVEL_LOADED, this.onLevelLoaded, this), t4.on(S.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this), t4.on(S.ERROR, this.onError, this), t4.on(S.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t4.on(S.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), t4.on(S.BUFFER_CREATED, this.onBufferCreated, this), t4.on(S.BUFFER_FLUSHED, this.onBufferFlushed, this), t4.on(S.LEVELS_UPDATED, this.onLevelsUpdated, this), t4.on(S.FRAG_BUFFERED, this.onFragBuffered, this);
          }, r3._unregisterListeners = function() {
            var t4 = this.hls;
            t4.off(S.MEDIA_ATTACHED, this.onMediaAttached, this), t4.off(S.MEDIA_DETACHING, this.onMediaDetaching, this), t4.off(S.MANIFEST_LOADING, this.onManifestLoading, this), t4.off(S.MANIFEST_PARSED, this.onManifestParsed, this), t4.off(S.LEVEL_LOADED, this.onLevelLoaded, this), t4.off(S.FRAG_LOAD_EMERGENCY_ABORTED, this.onFragLoadEmergencyAborted, this), t4.off(S.ERROR, this.onError, this), t4.off(S.AUDIO_TRACK_SWITCHING, this.onAudioTrackSwitching, this), t4.off(S.AUDIO_TRACK_SWITCHED, this.onAudioTrackSwitched, this), t4.off(S.BUFFER_CREATED, this.onBufferCreated, this), t4.off(S.BUFFER_FLUSHED, this.onBufferFlushed, this), t4.off(S.LEVELS_UPDATED, this.onLevelsUpdated, this), t4.off(S.FRAG_BUFFERED, this.onFragBuffered, this);
          }, r3.onHandlerDestroying = function() {
            this._unregisterListeners(), t3.prototype.onHandlerDestroying.call(this);
          }, r3.startLoad = function(t4) {
            if (this.levels) {
              var e3 = this.lastCurrentTime, r4 = this.hls;
              if (this.stopLoad(), this.setInterval(100), this.level = -1, !this.startFragRequested) {
                var i4 = r4.startLevel;
                -1 === i4 && (r4.config.testBandwidth && this.levels.length > 1 ? (i4 = 0, this.bitrateTest = true) : i4 = r4.firstAutoLevel), r4.nextLoadLevel = i4, this.level = r4.loadLevel, this.loadedmetadata = false;
              }
              e3 > 0 && -1 === t4 && (this.log("Override startPosition with lastCurrentTime @" + e3.toFixed(3)), t4 = e3), this.state = Ti, this.nextLoadPosition = this.startPosition = this.lastCurrentTime = t4, this.tick();
            } else this._forceStartLoad = true, this.state = Ei;
          }, r3.stopLoad = function() {
            this._forceStartLoad = false, t3.prototype.stopLoad.call(this);
          }, r3.doTick = function() {
            switch (this.state) {
              case Ci:
                var t4 = this.levels, e3 = this.level, r4 = null == t4 ? void 0 : t4[e3], i4 = null == r4 ? void 0 : r4.details;
                if (i4 && (!i4.live || this.levelLastLoaded === r4)) {
                  if (this.waitForCdnTuneIn(i4)) break;
                  this.state = Ti;
                  break;
                }
                if (this.hls.nextLoadLevel !== this.level) {
                  this.state = Ti;
                  break;
                }
                break;
              case Ai:
                var n2, a2 = self.performance.now(), s3 = this.retryDate;
                if (!s3 || a2 >= s3 || null != (n2 = this.media) && n2.seeking) {
                  var o2 = this.levels, l2 = this.level, u2 = null == o2 ? void 0 : o2[l2];
                  this.resetStartWhenNotLoaded(u2 || null), this.state = Ti;
                }
            }
            this.state === Ti && this.doTickIdle(), this.onTickEnd();
          }, r3.onTickEnd = function() {
            t3.prototype.onTickEnd.call(this), this.checkBuffer(), this.checkFragmentChanged();
          }, r3.doTickIdle = function() {
            var t4 = this.hls, e3 = this.levelLastLoaded, r4 = this.levels, i4 = this.media;
            if (null !== e3 && (i4 || !this.startFragRequested && t4.config.startFragPrefetch) && (!this.altAudio || !this.audioOnly)) {
              var n2 = t4.nextLoadLevel;
              if (null != r4 && r4[n2]) {
                var a2 = r4[n2], s3 = this.getMainFwdBufferInfo();
                if (null !== s3) {
                  var o2 = this.getLevelDetails();
                  if (o2 && this._streamEnded(s3, o2)) {
                    var l2 = {};
                    return this.altAudio && (l2.type = "video"), this.hls.trigger(S.BUFFER_EOS, l2), void (this.state = Di);
                  }
                  t4.loadLevel !== n2 && -1 === t4.manualLevel && this.log("Adapting to level " + n2 + " from level " + this.level), this.level = t4.nextLoadLevel = n2;
                  var u2 = a2.details;
                  if (!u2 || this.state === Ci || u2.live && this.levelLastLoaded !== a2) return this.level = n2, void (this.state = Ci);
                  var h2 = s3.len, d2 = this.getMaxBufferLength(a2.maxBitrate);
                  if (!(h2 >= d2)) {
                    this.backtrackFragment && this.backtrackFragment.start > s3.end && (this.backtrackFragment = null);
                    var c2 = this.backtrackFragment ? this.backtrackFragment.start : s3.end, f3 = this.getNextFragment(c2, u2);
                    if (this.couldBacktrack && !this.fragPrevious && f3 && "initSegment" !== f3.sn && this.fragmentTracker.getState(f3) !== Jr) {
                      var g2, v2 = (null != (g2 = this.backtrackFragment) ? g2 : f3).sn - u2.startSN, m2 = u2.fragments[v2 - 1];
                      m2 && f3.cc === m2.cc && (f3 = m2, this.fragmentTracker.removeFragment(m2));
                    } else this.backtrackFragment && s3.len && (this.backtrackFragment = null);
                    if (f3 && this.isLoopLoading(f3, c2)) {
                      if (!f3.gap) {
                        var p2 = this.audioOnly && !this.altAudio ? O : N, y2 = (p2 === N ? this.videoBuffer : this.mediaBuffer) || this.media;
                        y2 && this.afterBufferFlushed(y2, p2, Fe);
                      }
                      f3 = this.getNextFragmentLoopLoading(f3, u2, s3, Fe, d2);
                    }
                    f3 && (!f3.initSegment || f3.initSegment.data || this.bitrateTest || (f3 = f3.initSegment), this.loadFragment(f3, a2, c2));
                  }
                }
              }
            }
          }, r3.loadFragment = function(e3, r4, i4) {
            var n2 = this.fragmentTracker.getState(e3);
            this.fragCurrent = e3, n2 === Xr || n2 === Qr ? "initSegment" === e3.sn ? this._loadInitSegment(e3, r4) : this.bitrateTest ? (this.log("Fragment " + e3.sn + " of level " + e3.level + " is being downloaded to test bitrate and will not be buffered"), this._loadBitrateTestFrag(e3, r4)) : (this.startFragRequested = true, t3.prototype.loadFragment.call(this, e3, r4, i4)) : this.clearTrackerIfNeeded(e3);
          }, r3.getBufferedFrag = function(t4) {
            return this.fragmentTracker.getBufferedFrag(t4, Fe);
          }, r3.followingBufferedFrag = function(t4) {
            return t4 ? this.getBufferedFrag(t4.end + 0.5) : null;
          }, r3.immediateLevelSwitch = function() {
            this.abortCurrentFrag(), this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
          }, r3.nextLevelSwitch = function() {
            var t4 = this.levels, e3 = this.media;
            if (null != e3 && e3.readyState) {
              var r4, i4 = this.getAppendedFrag(e3.currentTime);
              i4 && i4.start > 1 && this.flushMainBuffer(0, i4.start - 1);
              var n2 = this.getLevelDetails();
              if (null != n2 && n2.live) {
                var a2 = this.getMainFwdBufferInfo();
                if (!a2 || a2.len < 2 * n2.targetduration) return;
              }
              if (!e3.paused && t4) {
                var s3 = t4[this.hls.nextLoadLevel], o2 = this.fragLastKbps;
                r4 = o2 && this.fragCurrent ? this.fragCurrent.duration * s3.maxBitrate / (1e3 * o2) + 1 : 0;
              } else r4 = 0;
              var l2 = this.getBufferedFrag(e3.currentTime + r4);
              if (l2) {
                var u2 = this.followingBufferedFrag(l2);
                if (u2) {
                  this.abortCurrentFrag();
                  var h2 = u2.maxStartPTS ? u2.maxStartPTS : u2.start, d2 = u2.duration, c2 = Math.max(l2.end, h2 + Math.min(Math.max(d2 - this.config.maxFragLookUpTolerance, d2 * (this.couldBacktrack ? 0.5 : 0.125)), d2 * (this.couldBacktrack ? 0.75 : 0.25)));
                  this.flushMainBuffer(c2, Number.POSITIVE_INFINITY);
                }
              }
            }
          }, r3.abortCurrentFrag = function() {
            var t4 = this.fragCurrent;
            switch (this.fragCurrent = null, this.backtrackFragment = null, t4 && (t4.abortRequests(), this.fragmentTracker.removeFragment(t4)), this.state) {
              case Si:
              case Li:
              case Ai:
              case bi:
              case ki:
                this.state = Ti;
            }
            this.nextLoadPosition = this.getLoadPosition();
          }, r3.flushMainBuffer = function(e3, r4) {
            t3.prototype.flushMainBuffer.call(this, e3, r4, this.altAudio ? "video" : null);
          }, r3.onMediaAttached = function(e3, r4) {
            t3.prototype.onMediaAttached.call(this, e3, r4);
            var i4 = r4.media;
            this.onvplaying = this.onMediaPlaying.bind(this), this.onvseeked = this.onMediaSeeked.bind(this), i4.addEventListener("playing", this.onvplaying), i4.addEventListener("seeked", this.onvseeked), this.gapController = new ho(this.config, i4, this.fragmentTracker, this.hls);
          }, r3.onMediaDetaching = function() {
            var e3 = this.media;
            e3 && this.onvplaying && this.onvseeked && (e3.removeEventListener("playing", this.onvplaying), e3.removeEventListener("seeked", this.onvseeked), this.onvplaying = this.onvseeked = null, this.videoBuffer = null), this.fragPlaying = null, this.gapController && (this.gapController.destroy(), this.gapController = null), t3.prototype.onMediaDetaching.call(this);
          }, r3.onMediaPlaying = function() {
            this.tick();
          }, r3.onMediaSeeked = function() {
            var t4 = this.media, e3 = t4 ? t4.currentTime : null;
            y(e3) && this.log("Media seeked to " + e3.toFixed(3));
            var r4 = this.getMainFwdBufferInfo();
            null !== r4 && 0 !== r4.len ? this.tick() : this.warn('Main forward buffer length on "seeked" event ' + (r4 ? r4.len : "empty") + ")");
          }, r3.onManifestLoading = function() {
            this.log("Trigger BUFFER_RESET"), this.hls.trigger(S.BUFFER_RESET, void 0), this.fragmentTracker.removeAllFragments(), this.couldBacktrack = false, this.startPosition = this.lastCurrentTime = this.fragLastKbps = 0, this.levels = this.fragPlaying = this.backtrackFragment = this.levelLastLoaded = null, this.altAudio = this.audioOnly = this.startFragRequested = false;
          }, r3.onManifestParsed = function(t4, e3) {
            var r4, i4, n2 = false, a2 = false;
            e3.levels.forEach(function(t5) {
              var e4 = t5.audioCodec;
              e4 && (n2 = n2 || -1 !== e4.indexOf("mp4a.40.2"), a2 = a2 || -1 !== e4.indexOf("mp4a.40.5"));
            }), this.audioCodecSwitch = n2 && a2 && !("function" == typeof (null == (i4 = lo()) || null == (r4 = i4.prototype) ? void 0 : r4.changeType)), this.audioCodecSwitch && this.log("Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC"), this.levels = e3.levels, this.startFragRequested = false;
          }, r3.onLevelLoading = function(t4, e3) {
            var r4 = this.levels;
            if (r4 && this.state === Ti) {
              var i4 = r4[e3.level];
              (!i4.details || i4.details.live && this.levelLastLoaded !== i4 || this.waitForCdnTuneIn(i4.details)) && (this.state = Ci);
            }
          }, r3.onLevelLoaded = function(t4, e3) {
            var r4, i4 = this.levels, n2 = e3.level, a2 = e3.details, s3 = a2.totalduration;
            if (i4) {
              this.log("Level " + n2 + " loaded [" + a2.startSN + "," + a2.endSN + "]" + (a2.lastPartSn ? "[part-" + a2.lastPartSn + "-" + a2.lastPartIndex + "]" : "") + ", cc [" + a2.startCC + ", " + a2.endCC + "] duration:" + s3);
              var o2 = i4[n2], l2 = this.fragCurrent;
              !l2 || this.state !== Li && this.state !== Ai || l2.level !== e3.level && l2.loader && this.abortCurrentFrag();
              var u2 = 0;
              if (a2.live || null != (r4 = o2.details) && r4.live) {
                var h2;
                if (this.checkLiveUpdate(a2), a2.deltaUpdateFailed) return;
                u2 = this.alignPlaylists(a2, o2.details, null == (h2 = this.levelLastLoaded) ? void 0 : h2.details);
              }
              if (o2.details = a2, this.levelLastLoaded = o2, this.hls.trigger(S.LEVEL_UPDATED, { details: a2, level: n2 }), this.state === Ci) {
                if (this.waitForCdnTuneIn(a2)) return;
                this.state = Ti;
              }
              this.startFragRequested ? a2.live && this.synchronizeToLiveEdge(a2) : this.setStartPosition(a2, u2), this.tick();
            } else this.warn("Levels were reset while loading level " + n2);
          }, r3._handleFragmentLoadProgress = function(t4) {
            var e3, r4 = t4.frag, i4 = t4.part, n2 = t4.payload, a2 = this.levels;
            if (a2) {
              var s3 = a2[r4.level], o2 = s3.details;
              if (!o2) return this.warn("Dropping fragment " + r4.sn + " of level " + r4.level + " after level details were reset"), void this.fragmentTracker.removeFragment(r4);
              var l2 = s3.videoCodec, u2 = o2.PTSKnown || !o2.live, h2 = null == (e3 = r4.initSegment) ? void 0 : e3.data, d2 = this._getAudioCodec(s3), c2 = this.transmuxer = this.transmuxer || new qn(this.hls, Fe, this._handleTransmuxComplete.bind(this), this._handleTransmuxerFlush.bind(this)), f3 = i4 ? i4.index : -1, g2 = -1 !== f3, v2 = new ii(r4.level, r4.sn, r4.stats.chunkCount, n2.byteLength, f3, g2), m2 = this.initPTS[r4.cc];
              c2.push(n2, h2, d2, l2, r4, i4, o2.totalduration, u2, v2, m2);
            } else this.warn("Levels were reset while fragment load was in progress. Fragment " + r4.sn + " of level " + r4.level + " will not be buffered");
          }, r3.onAudioTrackSwitching = function(t4, e3) {
            var r4 = this.altAudio;
            if (!e3.url) {
              if (this.mediaBuffer !== this.media) {
                this.log("Switching on main audio, use media.buffered to schedule main fragment loading"), this.mediaBuffer = this.media;
                var i4 = this.fragCurrent;
                i4 && (this.log("Switching to main audio track, cancel main fragment load"), i4.abortRequests(), this.fragmentTracker.removeFragment(i4)), this.resetTransmuxer(), this.resetLoadingState();
              } else this.audioOnly && this.resetTransmuxer();
              var n2 = this.hls;
              r4 && (n2.trigger(S.BUFFER_FLUSHING, { startOffset: 0, endOffset: Number.POSITIVE_INFINITY, type: null }), this.fragmentTracker.removeAllFragments()), n2.trigger(S.AUDIO_TRACK_SWITCHED, e3);
            }
          }, r3.onAudioTrackSwitched = function(t4, e3) {
            var r4 = e3.id, i4 = !!this.hls.audioTracks[r4].url;
            if (i4) {
              var n2 = this.videoBuffer;
              n2 && this.mediaBuffer !== n2 && (this.log("Switching on alternate audio, use video.buffered to schedule main fragment loading"), this.mediaBuffer = n2);
            }
            this.altAudio = i4, this.tick();
          }, r3.onBufferCreated = function(t4, e3) {
            var r4, i4, n2 = e3.tracks, a2 = false;
            for (var s3 in n2) {
              var o2 = n2[s3];
              if ("main" === o2.id) {
                if (i4 = s3, r4 = o2, "video" === s3) {
                  var l2 = n2[s3];
                  l2 && (this.videoBuffer = l2.buffer);
                }
              } else a2 = true;
            }
            a2 && r4 ? (this.log("Alternate track found, use " + i4 + ".buffered to schedule main fragment loading"), this.mediaBuffer = r4.buffer) : this.mediaBuffer = this.media;
          }, r3.onFragBuffered = function(t4, e3) {
            var r4 = e3.frag, i4 = e3.part;
            if (!r4 || r4.type === Fe) {
              if (this.fragContextChanged(r4)) return this.warn("Fragment " + r4.sn + (i4 ? " p: " + i4.index : "") + " of level " + r4.level + " finished buffering, but was aborted. state: " + this.state), void (this.state === ki && (this.state = Ti));
              var n2 = i4 ? i4.stats : r4.stats;
              this.fragLastKbps = Math.round(8 * n2.total / (n2.buffering.end - n2.loading.first)), "initSegment" !== r4.sn && (this.fragPrevious = r4), this.fragBufferedComplete(r4, i4);
            }
          }, r3.onError = function(t4, e3) {
            var r4;
            if (e3.fatal) this.state = Ii;
            else switch (e3.details) {
              case A.FRAG_GAP:
              case A.FRAG_PARSING_ERROR:
              case A.FRAG_DECRYPT_ERROR:
              case A.FRAG_LOAD_ERROR:
              case A.FRAG_LOAD_TIMEOUT:
              case A.KEY_LOAD_ERROR:
              case A.KEY_LOAD_TIMEOUT:
                this.onFragmentOrKeyLoadError(Fe, e3);
                break;
              case A.LEVEL_LOAD_ERROR:
              case A.LEVEL_LOAD_TIMEOUT:
              case A.LEVEL_PARSING_ERROR:
                e3.levelRetry || this.state !== Ci || (null == (r4 = e3.context) ? void 0 : r4.type) !== _e || (this.state = Ti);
                break;
              case A.BUFFER_APPEND_ERROR:
              case A.BUFFER_FULL_ERROR:
                if (!e3.parent || "main" !== e3.parent) return;
                if (e3.details === A.BUFFER_APPEND_ERROR) return void this.resetLoadingState();
                this.reduceLengthAndFlushBuffer(e3) && this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
                break;
              case A.INTERNAL_EXCEPTION:
                this.recoverWorkerError(e3);
            }
          }, r3.checkBuffer = function() {
            var t4 = this.media, e3 = this.gapController;
            if (t4 && e3 && t4.readyState) {
              if (this.loadedmetadata || !ri.getBuffered(t4).length) {
                var r4 = this.state !== Ti ? this.fragCurrent : null;
                e3.poll(this.lastCurrentTime, r4);
              }
              this.lastCurrentTime = t4.currentTime;
            }
          }, r3.onFragLoadEmergencyAborted = function() {
            this.state = Ti, this.loadedmetadata || (this.startFragRequested = false, this.nextLoadPosition = this.startPosition), this.tickImmediate();
          }, r3.onBufferFlushed = function(t4, e3) {
            var r4 = e3.type;
            if (r4 !== O || this.audioOnly && !this.altAudio) {
              var i4 = (r4 === N ? this.videoBuffer : this.mediaBuffer) || this.media;
              this.afterBufferFlushed(i4, r4, Fe), this.tick();
            }
          }, r3.onLevelsUpdated = function(t4, e3) {
            this.level > -1 && this.fragCurrent && (this.level = this.fragCurrent.level), this.levels = e3.levels;
          }, r3.swapAudioCodec = function() {
            this.audioCodecSwap = !this.audioCodecSwap;
          }, r3.seekToStartPos = function() {
            var t4 = this.media;
            if (t4) {
              var e3 = t4.currentTime, r4 = this.startPosition;
              if (r4 >= 0 && e3 < r4) {
                if (t4.seeking) return void this.log("could not seek to " + r4 + ", already seeking at " + e3);
                var i4 = ri.getBuffered(t4), n2 = (i4.length ? i4.start(0) : 0) - r4;
                n2 > 0 && (n2 < this.config.maxBufferHole || n2 < this.config.maxFragLookUpTolerance) && (this.log("adjusting start position by " + n2 + " to match buffer start"), r4 += n2, this.startPosition = r4), this.log("seek to target start position " + r4 + " from current time " + e3), t4.currentTime = r4;
              }
            }
          }, r3._getAudioCodec = function(t4) {
            var e3 = this.config.defaultAudioCodec || t4.audioCodec;
            return this.audioCodecSwap && e3 && (this.log("Swapping audio codec"), e3 = -1 !== e3.indexOf("mp4a.40.5") ? "mp4a.40.2" : "mp4a.40.5"), e3;
          }, r3._loadBitrateTestFrag = function(t4, e3) {
            var r4 = this;
            t4.bitrateTest = true, this._doFragLoad(t4, e3).then(function(i4) {
              var n2 = r4.hls;
              if (i4 && !r4.fragContextChanged(t4)) {
                e3.fragmentError = 0, r4.state = Ti, r4.startFragRequested = false, r4.bitrateTest = false;
                var a2 = t4.stats;
                a2.parsing.start = a2.parsing.end = a2.buffering.start = a2.buffering.end = self.performance.now(), n2.trigger(S.FRAG_LOADED, i4), t4.bitrateTest = false;
              }
            });
          }, r3._handleTransmuxComplete = function(t4) {
            var e3, r4 = "main", i4 = this.hls, n2 = t4.remuxResult, a2 = t4.chunkMeta, s3 = this.getCurrentContext(a2);
            if (s3) {
              var o2 = s3.frag, l2 = s3.part, u2 = s3.level, h2 = n2.video, d2 = n2.text, c2 = n2.id3, f3 = n2.initSegment, g2 = u2.details, v2 = this.altAudio ? void 0 : n2.audio;
              if (this.fragContextChanged(o2)) this.fragmentTracker.removeFragment(o2);
              else {
                if (this.state = bi, f3) {
                  if (null != f3 && f3.tracks) {
                    var m2 = o2.initSegment || o2;
                    this._bufferInitSegment(u2, f3.tracks, m2, a2), i4.trigger(S.FRAG_PARSING_INIT_SEGMENT, { frag: m2, id: r4, tracks: f3.tracks });
                  }
                  var p2 = f3.initPTS, E2 = f3.timescale;
                  y(p2) && (this.initPTS[o2.cc] = { baseTime: p2, timescale: E2 }, i4.trigger(S.INIT_PTS_FOUND, { frag: o2, id: r4, initPTS: p2, timescale: E2 }));
                }
                if (h2 && g2 && "initSegment" !== o2.sn) {
                  var T2 = g2.fragments[o2.sn - 1 - g2.startSN], L2 = o2.sn === g2.startSN, A2 = !T2 || o2.cc > T2.cc;
                  if (false !== n2.independent) {
                    var R2 = h2.startPTS, b2 = h2.endPTS, k2 = h2.startDTS, D2 = h2.endDTS;
                    if (l2) l2.elementaryStreams[h2.type] = { startPTS: R2, endPTS: b2, startDTS: k2, endDTS: D2 };
                    else if (h2.firstKeyFrame && h2.independent && 1 === a2.id && !A2 && (this.couldBacktrack = true), h2.dropped && h2.independent) {
                      var I2 = this.getMainFwdBufferInfo(), w2 = (I2 ? I2.end : this.getLoadPosition()) + this.config.maxBufferHole, C2 = h2.firstKeyFramePTS ? h2.firstKeyFramePTS : R2;
                      if (!L2 && w2 < C2 - this.config.maxBufferHole && !A2) return void this.backtrack(o2);
                      A2 && (o2.gap = true), o2.setElementaryStreamInfo(h2.type, o2.start, b2, o2.start, D2, true);
                    } else L2 && R2 > 2 && (o2.gap = true);
                    o2.setElementaryStreamInfo(h2.type, R2, b2, k2, D2), this.backtrackFragment && (this.backtrackFragment = o2), this.bufferFragmentData(h2, o2, l2, a2, L2 || A2);
                  } else {
                    if (!L2 && !A2) return void this.backtrack(o2);
                    o2.gap = true;
                  }
                }
                if (v2) {
                  var _2 = v2.startPTS, x2 = v2.endPTS, P2 = v2.startDTS, F2 = v2.endDTS;
                  l2 && (l2.elementaryStreams[O] = { startPTS: _2, endPTS: x2, startDTS: P2, endDTS: F2 }), o2.setElementaryStreamInfo(O, _2, x2, P2, F2), this.bufferFragmentData(v2, o2, l2, a2);
                }
                if (g2 && null != c2 && null != (e3 = c2.samples) && e3.length) {
                  var M2 = { id: r4, frag: o2, details: g2, samples: c2.samples };
                  i4.trigger(S.FRAG_PARSING_METADATA, M2);
                }
                if (g2 && d2) {
                  var N2 = { id: r4, frag: o2, details: g2, samples: d2.samples };
                  i4.trigger(S.FRAG_PARSING_USERDATA, N2);
                }
              }
            } else this.resetWhenMissingContext(a2);
          }, r3._bufferInitSegment = function(t4, e3, r4, i4) {
            var n2 = this;
            if (this.state === bi) {
              this.audioOnly = !!e3.audio && !e3.video, this.altAudio && !this.audioOnly && delete e3.audio;
              var a2 = e3.audio, s3 = e3.video, o2 = e3.audiovideo;
              if (a2) {
                var l2 = t4.audioCodec, u2 = navigator.userAgent.toLowerCase();
                if (this.audioCodecSwitch) {
                  l2 && (l2 = -1 !== l2.indexOf("mp4a.40.5") ? "mp4a.40.2" : "mp4a.40.5");
                  var h2 = a2.metadata;
                  h2 && "channelCount" in h2 && 1 !== (h2.channelCount || 1) && -1 === u2.indexOf("firefox") && (l2 = "mp4a.40.5");
                }
                l2 && -1 !== l2.indexOf("mp4a.40.5") && -1 !== u2.indexOf("android") && "audio/mpeg" !== a2.container && (l2 = "mp4a.40.2", this.log("Android: force audio codec to " + l2)), t4.audioCodec && t4.audioCodec !== l2 && this.log('Swapping manifest audio codec "' + t4.audioCodec + '" for "' + l2 + '"'), a2.levelCodec = l2, a2.id = "main", this.log("Init audio buffer, container:" + a2.container + ", codecs[selected/level/parsed]=[" + (l2 || "") + "/" + (t4.audioCodec || "") + "/" + a2.codec + "]");
              }
              s3 && (s3.levelCodec = t4.videoCodec, s3.id = "main", this.log("Init video buffer, container:" + s3.container + ", codecs[level/parsed]=[" + (t4.videoCodec || "") + "/" + s3.codec + "]")), o2 && this.log("Init audiovideo buffer, container:" + o2.container + ", codecs[level/parsed]=[" + t4.codecs + "/" + o2.codec + "]"), this.hls.trigger(S.BUFFER_CODECS, e3), Object.keys(e3).forEach(function(t5) {
                var a3 = e3[t5].initSegment;
                null != a3 && a3.byteLength && n2.hls.trigger(S.BUFFER_APPENDING, { type: t5, data: a3, frag: r4, part: null, chunkMeta: i4, parent: r4.type });
              }), this.tickImmediate();
            }
          }, r3.getMainFwdBufferInfo = function() {
            return this.getFwdBufferInfo(this.mediaBuffer ? this.mediaBuffer : this.media, Fe);
          }, r3.backtrack = function(t4) {
            this.couldBacktrack = true, this.backtrackFragment = t4, this.resetTransmuxer(), this.flushBufferGap(t4), this.fragmentTracker.removeFragment(t4), this.fragPrevious = null, this.nextLoadPosition = t4.start, this.state = Ti;
          }, r3.checkFragmentChanged = function() {
            var t4 = this.media, e3 = null;
            if (t4 && t4.readyState > 1 && false === t4.seeking) {
              var r4 = t4.currentTime;
              if (ri.isBuffered(t4, r4) ? e3 = this.getAppendedFrag(r4) : ri.isBuffered(t4, r4 + 0.1) && (e3 = this.getAppendedFrag(r4 + 0.1)), e3) {
                this.backtrackFragment = null;
                var i4 = this.fragPlaying, n2 = e3.level;
                i4 && e3.sn === i4.sn && i4.level === n2 || (this.fragPlaying = e3, this.hls.trigger(S.FRAG_CHANGED, { frag: e3 }), i4 && i4.level === n2 || this.hls.trigger(S.LEVEL_SWITCHED, { level: n2 }));
              }
            }
          }, s2(e2, [{ key: "nextLevel", get: function() {
            var t4 = this.nextBufferedFrag;
            return t4 ? t4.level : -1;
          } }, { key: "currentFrag", get: function() {
            var t4 = this.media;
            return t4 ? this.fragPlaying || this.getAppendedFrag(t4.currentTime) : null;
          } }, { key: "currentProgramDateTime", get: function() {
            var t4 = this.media;
            if (t4) {
              var e3 = t4.currentTime, r4 = this.currentFrag;
              if (r4 && y(e3) && y(r4.programDateTime)) {
                var i4 = r4.programDateTime + 1e3 * (e3 - r4.start);
                return new Date(i4);
              }
            }
            return null;
          } }, { key: "currentLevel", get: function() {
            var t4 = this.currentFrag;
            return t4 ? t4.level : -1;
          } }, { key: "nextBufferedFrag", get: function() {
            var t4 = this.currentFrag;
            return t4 ? this.followingBufferedFrag(t4) : null;
          } }, { key: "forceStartLoad", get: function() {
            return this._forceStartLoad;
          } }]), e2;
        }(_i), fo = function() {
          function t3(e3) {
            void 0 === e3 && (e3 = {}), this.config = void 0, this.userConfig = void 0, this.coreComponents = void 0, this.networkControllers = void 0, this.started = false, this._emitter = new Vn(), this._autoLevelCapping = -1, this._maxHdcpLevel = null, this.abrController = void 0, this.bufferController = void 0, this.capLevelController = void 0, this.latencyController = void 0, this.levelController = void 0, this.streamController = void 0, this.audioTrackController = void 0, this.subtitleTrackController = void 0, this.emeController = void 0, this.cmcdController = void 0, this._media = null, this.url = null, this.triggeringException = void 0, I(e3.debug || false, "Hls instance");
            var r3 = this.config = function(t4, e4) {
              if ((e4.liveSyncDurationCount || e4.liveMaxLatencyDurationCount) && (e4.liveSyncDuration || e4.liveMaxLatencyDuration)) throw new Error("Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration");
              if (void 0 !== e4.liveMaxLatencyDurationCount && (void 0 === e4.liveSyncDurationCount || e4.liveMaxLatencyDurationCount <= e4.liveSyncDurationCount)) throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be greater than "liveSyncDurationCount"');
              if (void 0 !== e4.liveMaxLatencyDuration && (void 0 === e4.liveSyncDuration || e4.liveMaxLatencyDuration <= e4.liveSyncDuration)) throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be greater than "liveSyncDuration"');
              var r4 = io(t4), n3 = ["TimeOut", "MaxRetry", "RetryDelay", "MaxRetryTimeout"];
              return ["manifest", "level", "frag"].forEach(function(t5) {
                var i4 = ("level" === t5 ? "playlist" : t5) + "LoadPolicy", a3 = void 0 === e4[i4], s4 = [];
                n3.forEach(function(n4) {
                  var o3 = t5 + "Loading" + n4, l3 = e4[o3];
                  if (void 0 !== l3 && a3) {
                    s4.push(o3);
                    var u3 = r4[i4].default;
                    switch (e4[i4] = { default: u3 }, n4) {
                      case "TimeOut":
                        u3.maxLoadTimeMs = l3, u3.maxTimeToFirstByteMs = l3;
                        break;
                      case "MaxRetry":
                        u3.errorRetry.maxNumRetry = l3, u3.timeoutRetry.maxNumRetry = l3;
                        break;
                      case "RetryDelay":
                        u3.errorRetry.retryDelayMs = l3, u3.timeoutRetry.retryDelayMs = l3;
                        break;
                      case "MaxRetryTimeout":
                        u3.errorRetry.maxRetryDelayMs = l3, u3.timeoutRetry.maxRetryDelayMs = l3;
                    }
                  }
                }), s4.length && w.warn('hls.js config: "' + s4.join('", "') + '" setting(s) are deprecated, use "' + i4 + '": ' + JSON.stringify(e4[i4]));
              }), i3(i3({}, r4), e4);
            }(t3.DefaultConfig, e3);
            this.userConfig = e3, r3.progressive && no(r3);
            var n2 = r3.abrController, a2 = r3.bufferController, s3 = r3.capLevelController, o2 = r3.errorController, l2 = r3.fpsController, u2 = new o2(this), h2 = this.abrController = new n2(this), d2 = this.bufferController = new a2(this), c2 = this.capLevelController = new s3(this), f3 = new l2(this), g2 = new Be(this), v2 = new $e(this), m2 = r3.contentSteeringController, p2 = m2 ? new m2(this) : null, y2 = this.levelController = new ao(this, p2), E2 = new $r(this), T2 = new oo(this.config), L2 = this.streamController = new co(this, E2, T2);
            c2.setStreamController(L2), f3.setStreamController(L2);
            var A2 = [g2, y2, L2];
            p2 && A2.splice(1, 0, p2), this.networkControllers = A2;
            var R2 = [h2, d2, c2, f3, v2, E2];
            this.audioTrackController = this.createController(r3.audioTrackController, A2);
            var b2 = r3.audioStreamController;
            b2 && A2.push(new b2(this, E2, T2)), this.subtitleTrackController = this.createController(r3.subtitleTrackController, A2);
            var k2 = r3.subtitleStreamController;
            k2 && A2.push(new k2(this, E2, T2)), this.createController(r3.timelineController, R2), T2.emeController = this.emeController = this.createController(r3.emeController, R2), this.cmcdController = this.createController(r3.cmcdController, R2), this.latencyController = this.createController(Ze, R2), this.coreComponents = R2, A2.push(u2);
            var D2 = u2.onErrorOut;
            "function" == typeof D2 && this.on(S.ERROR, D2, u2);
          }
          t3.isMSESupported = function() {
            return uo();
          }, t3.isSupported = function() {
            return function() {
              if (!uo()) return false;
              var t4 = se();
              return "function" == typeof (null == t4 ? void 0 : t4.isTypeSupported) && (["avc1.42E01E,mp4a.40.2", "av01.0.01M.08", "vp09.00.50.08"].some(function(e3) {
                return t4.isTypeSupported(he(e3, "video"));
              }) || ["mp4a.40.2", "fLaC"].some(function(e3) {
                return t4.isTypeSupported(he(e3, "audio"));
              }));
            }();
          }, t3.getMediaSource = function() {
            return se();
          };
          var e2 = t3.prototype;
          return e2.createController = function(t4, e3) {
            if (t4) {
              var r3 = new t4(this);
              return e3 && e3.push(r3), r3;
            }
            return null;
          }, e2.on = function(t4, e3, r3) {
            void 0 === r3 && (r3 = this), this._emitter.on(t4, e3, r3);
          }, e2.once = function(t4, e3, r3) {
            void 0 === r3 && (r3 = this), this._emitter.once(t4, e3, r3);
          }, e2.removeAllListeners = function(t4) {
            this._emitter.removeAllListeners(t4);
          }, e2.off = function(t4, e3, r3, i4) {
            void 0 === r3 && (r3 = this), this._emitter.off(t4, e3, r3, i4);
          }, e2.listeners = function(t4) {
            return this._emitter.listeners(t4);
          }, e2.emit = function(t4, e3, r3) {
            return this._emitter.emit(t4, e3, r3);
          }, e2.trigger = function(t4, e3) {
            if (this.config.debug) return this.emit(t4, t4, e3);
            try {
              return this.emit(t4, t4, e3);
            } catch (e4) {
              if (w.error("An internal error happened while handling event " + t4 + '. Error message: "' + e4.message + '". Here is a stacktrace:', e4), !this.triggeringException) {
                this.triggeringException = true;
                var r3 = t4 === S.ERROR;
                this.trigger(S.ERROR, { type: L.OTHER_ERROR, details: A.INTERNAL_EXCEPTION, fatal: r3, event: t4, error: e4 }), this.triggeringException = false;
              }
            }
            return false;
          }, e2.listenerCount = function(t4) {
            return this._emitter.listenerCount(t4);
          }, e2.destroy = function() {
            w.log("destroy"), this.trigger(S.DESTROYING, void 0), this.detachMedia(), this.removeAllListeners(), this._autoLevelCapping = -1, this.url = null, this.networkControllers.forEach(function(t5) {
              return t5.destroy();
            }), this.networkControllers.length = 0, this.coreComponents.forEach(function(t5) {
              return t5.destroy();
            }), this.coreComponents.length = 0;
            var t4 = this.config;
            t4.xhrSetup = t4.fetchSetup = void 0, this.userConfig = null;
          }, e2.attachMedia = function(t4) {
            w.log("attachMedia"), this._media = t4, this.trigger(S.MEDIA_ATTACHING, { media: t4 });
          }, e2.detachMedia = function() {
            w.log("detachMedia"), this.trigger(S.MEDIA_DETACHING, void 0), this._media = null;
          }, e2.loadSource = function(t4) {
            this.stopLoad();
            var e3 = this.media, r3 = this.url, i4 = this.url = p.buildAbsoluteURL(self.location.href, t4, { alwaysNormalize: true });
            this._autoLevelCapping = -1, this._maxHdcpLevel = null, w.log("loadSource:" + i4), e3 && r3 && (r3 !== i4 || this.bufferController.hasSourceTypes()) && (this.detachMedia(), this.attachMedia(e3)), this.trigger(S.MANIFEST_LOADING, { url: t4 });
          }, e2.startLoad = function(t4) {
            void 0 === t4 && (t4 = -1), w.log("startLoad(" + t4 + ")"), this.started = true, this.networkControllers.forEach(function(e3) {
              e3.startLoad(t4);
            });
          }, e2.stopLoad = function() {
            w.log("stopLoad"), this.started = false, this.networkControllers.forEach(function(t4) {
              t4.stopLoad();
            });
          }, e2.resumeBuffering = function() {
            this.started && this.networkControllers.forEach(function(t4) {
              "fragmentLoader" in t4 && t4.startLoad(-1);
            });
          }, e2.pauseBuffering = function() {
            this.networkControllers.forEach(function(t4) {
              "fragmentLoader" in t4 && t4.stopLoad();
            });
          }, e2.swapAudioCodec = function() {
            w.log("swapAudioCodec"), this.streamController.swapAudioCodec();
          }, e2.recoverMediaError = function() {
            w.log("recoverMediaError");
            var t4 = this._media;
            this.detachMedia(), t4 && this.attachMedia(t4);
          }, e2.removeLevel = function(t4) {
            this.levelController.removeLevel(t4);
          }, e2.setAudioOption = function(t4) {
            var e3;
            return null == (e3 = this.audioTrackController) ? void 0 : e3.setAudioOption(t4);
          }, e2.setSubtitleOption = function(t4) {
            var e3;
            return null == (e3 = this.subtitleTrackController) || e3.setSubtitleOption(t4), null;
          }, s2(t3, [{ key: "levels", get: function() {
            var t4 = this.levelController.levels;
            return t4 || [];
          } }, { key: "currentLevel", get: function() {
            return this.streamController.currentLevel;
          }, set: function(t4) {
            w.log("set currentLevel:" + t4), this.levelController.manualLevel = t4, this.streamController.immediateLevelSwitch();
          } }, { key: "nextLevel", get: function() {
            return this.streamController.nextLevel;
          }, set: function(t4) {
            w.log("set nextLevel:" + t4), this.levelController.manualLevel = t4, this.streamController.nextLevelSwitch();
          } }, { key: "loadLevel", get: function() {
            return this.levelController.level;
          }, set: function(t4) {
            w.log("set loadLevel:" + t4), this.levelController.manualLevel = t4;
          } }, { key: "nextLoadLevel", get: function() {
            return this.levelController.nextLoadLevel;
          }, set: function(t4) {
            this.levelController.nextLoadLevel = t4;
          } }, { key: "firstLevel", get: function() {
            return Math.max(this.levelController.firstLevel, this.minAutoLevel);
          }, set: function(t4) {
            w.log("set firstLevel:" + t4), this.levelController.firstLevel = t4;
          } }, { key: "startLevel", get: function() {
            var t4 = this.levelController.startLevel;
            return -1 === t4 && this.abrController.forcedAutoLevel > -1 ? this.abrController.forcedAutoLevel : t4;
          }, set: function(t4) {
            w.log("set startLevel:" + t4), -1 !== t4 && (t4 = Math.max(t4, this.minAutoLevel)), this.levelController.startLevel = t4;
          } }, { key: "capLevelToPlayerSize", get: function() {
            return this.config.capLevelToPlayerSize;
          }, set: function(t4) {
            var e3 = !!t4;
            e3 !== this.config.capLevelToPlayerSize && (e3 ? this.capLevelController.startCapping() : (this.capLevelController.stopCapping(), this.autoLevelCapping = -1, this.streamController.nextLevelSwitch()), this.config.capLevelToPlayerSize = e3);
          } }, { key: "autoLevelCapping", get: function() {
            return this._autoLevelCapping;
          }, set: function(t4) {
            this._autoLevelCapping !== t4 && (w.log("set autoLevelCapping:" + t4), this._autoLevelCapping = t4, this.levelController.checkMaxAutoUpdated());
          } }, { key: "bandwidthEstimate", get: function() {
            var t4 = this.abrController.bwEstimator;
            return t4 ? t4.getEstimate() : NaN;
          }, set: function(t4) {
            this.abrController.resetEstimator(t4);
          } }, { key: "ttfbEstimate", get: function() {
            var t4 = this.abrController.bwEstimator;
            return t4 ? t4.getEstimateTTFB() : NaN;
          } }, { key: "maxHdcpLevel", get: function() {
            return this._maxHdcpLevel;
          }, set: function(t4) {
            (function(t5) {
              return tr.indexOf(t5) > -1;
            })(t4) && this._maxHdcpLevel !== t4 && (this._maxHdcpLevel = t4, this.levelController.checkMaxAutoUpdated());
          } }, { key: "autoLevelEnabled", get: function() {
            return -1 === this.levelController.manualLevel;
          } }, { key: "manualLevel", get: function() {
            return this.levelController.manualLevel;
          } }, { key: "minAutoLevel", get: function() {
            var t4 = this.levels, e3 = this.config.minAutoBitrate;
            if (!t4) return 0;
            for (var r3 = t4.length, i4 = 0; i4 < r3; i4++) if (t4[i4].maxBitrate >= e3) return i4;
            return 0;
          } }, { key: "maxAutoLevel", get: function() {
            var t4, e3 = this.levels, r3 = this.autoLevelCapping, i4 = this.maxHdcpLevel;
            if (t4 = -1 === r3 && null != e3 && e3.length ? e3.length - 1 : r3, i4) for (var n2 = t4; n2--; ) {
              var a2 = e3[n2].attrs["HDCP-LEVEL"];
              if (a2 && a2 <= i4) return n2;
            }
            return t4;
          } }, { key: "firstAutoLevel", get: function() {
            return this.abrController.firstAutoLevel;
          } }, { key: "nextAutoLevel", get: function() {
            return this.abrController.nextAutoLevel;
          }, set: function(t4) {
            this.abrController.nextAutoLevel = t4;
          } }, { key: "playingDate", get: function() {
            return this.streamController.currentProgramDateTime;
          } }, { key: "mainForwardBufferInfo", get: function() {
            return this.streamController.getMainFwdBufferInfo();
          } }, { key: "allAudioTracks", get: function() {
            var t4 = this.audioTrackController;
            return t4 ? t4.allAudioTracks : [];
          } }, { key: "audioTracks", get: function() {
            var t4 = this.audioTrackController;
            return t4 ? t4.audioTracks : [];
          } }, { key: "audioTrack", get: function() {
            var t4 = this.audioTrackController;
            return t4 ? t4.audioTrack : -1;
          }, set: function(t4) {
            var e3 = this.audioTrackController;
            e3 && (e3.audioTrack = t4);
          } }, { key: "allSubtitleTracks", get: function() {
            var t4 = this.subtitleTrackController;
            return t4 ? t4.allSubtitleTracks : [];
          } }, { key: "subtitleTracks", get: function() {
            var t4 = this.subtitleTrackController;
            return t4 ? t4.subtitleTracks : [];
          } }, { key: "subtitleTrack", get: function() {
            var t4 = this.subtitleTrackController;
            return t4 ? t4.subtitleTrack : -1;
          }, set: function(t4) {
            var e3 = this.subtitleTrackController;
            e3 && (e3.subtitleTrack = t4);
          } }, { key: "media", get: function() {
            return this._media;
          } }, { key: "subtitleDisplay", get: function() {
            var t4 = this.subtitleTrackController;
            return !!t4 && t4.subtitleDisplay;
          }, set: function(t4) {
            var e3 = this.subtitleTrackController;
            e3 && (e3.subtitleDisplay = t4);
          } }, { key: "lowLatencyMode", get: function() {
            return this.config.lowLatencyMode;
          }, set: function(t4) {
            this.config.lowLatencyMode = t4;
          } }, { key: "liveSyncPosition", get: function() {
            return this.latencyController.liveSyncPosition;
          } }, { key: "latency", get: function() {
            return this.latencyController.latency;
          } }, { key: "maxLatency", get: function() {
            return this.latencyController.maxLatency;
          } }, { key: "targetLatency", get: function() {
            return this.latencyController.targetLatency;
          } }, { key: "drift", get: function() {
            return this.latencyController.drift;
          } }, { key: "forceStartLoad", get: function() {
            return this.streamController.forceStartLoad;
          } }], [{ key: "version", get: function() {
            return "1.5.15";
          } }, { key: "Events", get: function() {
            return S;
          } }, { key: "ErrorTypes", get: function() {
            return L;
          } }, { key: "ErrorDetails", get: function() {
            return A;
          } }, { key: "DefaultConfig", get: function() {
            return t3.defaultConfig ? t3.defaultConfig : ro;
          }, set: function(e3) {
            t3.defaultConfig = e3;
          } }]), t3;
        }();
        return fo.defaultConfig = void 0, fo;
      }, module.exports = i2();
    }(false);
  })(hls_min);
  var hls_minExports = hls_min.exports;
  const Hls = /* @__PURE__ */ getDefaultExportFromCjs(hls_minExports);
  function title(html2) {
    let name2 = html2.split(" ")[1];
    let css2 = "display:flex;flex-direction:row;align-items:center;";
    let htmlDiv = `<div style='${css2}padding-left:10px;padding-right:10px'>
        <p>${name2}</p>
    </div>`;
    return htmlDiv;
  }
  function getVideoSrc(call) {
    let videoPage = user.getVideoPage();
    let showDnload;
    if (!user.home()) {
      let token = user.getShareToken();
      if (token == "") {
        showError$1("当前登录凭证失效，请刷新或重新登录");
        return "";
      }
      showDnload = shareLinkDownloadUrl({
        file_id: videoPage.id,
        share_id: token.share_id
      }, token.share_token).then((response) => {
        call && call(response.data.download_url);
      });
    } else {
      let token = user.getToken();
      if (token == "") {
        showError$1("当前登录凭证获取为空，请刷新或重新登录");
        return "";
      }
      showDnload = getDownloadUrl({
        expire_sec: 14400,
        drive_id: token.default_drive_id,
        file_id: videoPage.id
      }).then((response) => {
        call && call(response.data.url);
      });
    }
    showDnload.catch((e) => {
      if (e && e + "" == "AxiosError: Request failed with status code 429") {
        showError$1("接口请求频繁");
      } else {
        showError$1("刷新失败，错误异常:" + e);
      }
    }).finally(() => {
      call && call();
    });
  }
  function getOptionUrl(option) {
    console.log(option);
    return new Promise((resolve, reject) => {
      if (option.html != " 原画") {
        resolve(option.url);
      } else {
        getVideoSrc((url) => {
          if (url != "") {
            resolve(url);
          } else {
            reject("获取地址视频错误");
          }
        });
      }
    });
  }
  function artplayPluginQuality(option) {
    return async (art) => {
      let def = option[option.length - 1];
      let loc = user.getVideoPlayerSet().qualityHtml;
      var storageQuality;
      if (loc) {
        let quality2 = option.find((item) => item.html === loc);
        if (quality2) {
          quality2["default"] = true;
          storageQuality = quality2.html;
        }
      }
      if (!storageQuality) {
        storageQuality = def.html;
        def["default"] = true;
      }
      let index = option.findIndex(function(item, index2) {
        return item.html === storageQuality;
      });
      var quality = {
        name: "quality",
        position: "right",
        html: title(storageQuality) || "Quality",
        selector: option,
        index: 2,
        onSelect: async function(item) {
          let url = await getOptionUrl(item);
          console.log(item.html);
          console.log(url);
          art.qualityHtml = item.html;
          art.switchQuality(url, item.html);
          return title(item.html);
        }
      };
      art.quality_ = quality;
      art.controls.add(quality);
      const quality1 = option[index];
      if (quality1) {
        art.url = await getOptionUrl(quality1);
        art.qualityHtml = quality1.html;
      } else {
        art.url = await getOptionUrl(option[0]);
        art.qualityHtml = option[0].html;
      }
    };
  }
  var cur = `<span  data-role="icon"data-render-as="svg"data-icon-type="PDSPlayCircle"class="icon--2AFV7 icon--d-ejA ">
<svg viewBox="0 0 1024 1024"><use xlink:href="#PDSPlayCircle"></use></svg>
</span>`;
  function html(item, def) {
    let htmlDiv = `<div style='display:flex;flex-direction:row;align-items:center;'  title="${item.name}">
    <p class="title--2vewu " >
        ${def ? cur : ""}
    </p>
        <span class="filename--3hcxw filename_luogen" style="font-size:14px">${item.name}</span>
    </div>
    `;
    return htmlDiv;
  }
  function selector(call) {
    let items = user.getPage().items;
    if (items.length == 0 || $2("#videoHistory").length > 0) {
      return (art) => {
      };
    }
    let fileList3 = items;
    let id = user.getVideoPage().id;
    var videoList = fileList3.filter(function(item, index) {
      return item.category === "video";
    }), fileIndex = videoList.findIndex(function(item, index) {
      return item.file_id === id;
    });
    if (!(fileIndex > -1 && videoList.length > 1)) return () => {
    };
    console.log("视频数量为：：" + videoList.length);
    return (art) => {
      let option = [];
      videoList.forEach((it, index) => {
        option.push({
          default: index == fileIndex,
          index,
          file: it,
          html: html(it, index == fileIndex)
        });
      });
      let svg = '<svg t="1677915128666" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2048" width="24" height="24"><path d="M665.47 417.65l-345.03-244.3c-69.8-49.42-166.29 0.49-166.29 86.01v502.27c0 85.52 96.49 135.43 166.29 86.01l345.03-244.31c64.02-45.34 64.02-140.34 0-185.68zM811.82 868.52c-30.38 0-55-24.62-55-55V207.46c0-30.38 24.62-55 55-55s55 24.62 55 55v606.07c0 30.37-24.62 54.99-55 54.99z" p-id="2049" fill="#ffffff"></path></svg>';
      if (fileIndex + 1 < videoList.length) {
        art.controls.add({
          name: "next_selector",
          position: "left",
          html: `<i class="art-icon"  title="${videoList[fileIndex + 1].name}">` + svg + "</i>",
          tooltip: videoList[fileIndex + 1].name,
          style: {
            marginRight: "10px"
          },
          click: function() {
            let item = videoList[fileIndex + 1];
            call && call(item);
          }
        });
      }
      art.videoList = option;
      art.controls.add({
        name: "selector",
        position: "right",
        index: 1,
        html: "选集",
        click: function() {
          if (art.fullscreen) {
            art.fullscreen = false;
          } else if (art.fullscreenWeb) {
            art.fullscreen = false;
          }
          call && call();
        }
      });
    };
  }
  function subtitle(click) {
    return (art) => {
      art.controls.add({
        name: "subtitle",
        position: "right",
        html: "字幕",
        index: 2,
        style: {
          marginLeft: "10px"
        },
        click: function() {
          if (art.fullscreen) {
            art.fullscreen = false;
          } else if (art.fullscreenWeb) {
            art.fullscreen = false;
          }
          click && click();
        }
      });
    };
  }
  var doubleSpeed = function(art) {
    art.notice.show = "倍速播放 x3";
    art.playbackRate = 3;
  };
  function hotkey() {
    return (art) => {
      var rightCount = 0;
      var playbackRate = null;
      var rightInterval = null;
      var logKey = false;
      document.onkeyup = function(event) {
        if (event.code === "ArrowRight") {
          if (rightCount === 1) {
            art.currentTime = art.currentTime + 5;
          }
          logKey = false;
          if (rightInterval) {
            window.clearInterval(rightInterval);
          }
          rightInterval = null;
          rightCount = 0;
          if (playbackRate) {
            art.playbackRate = playbackRate;
            playbackRate = null;
          }
        }
      };
      document.onkeydown = function(event) {
        if (event.code === "ArrowRight") {
          rightCount += 1;
          if (!playbackRate) {
            playbackRate = art.playbackRate;
          }
          if (!rightInterval) {
            rightInterval = setInterval(function() {
              if (rightCount > 100) {
                rightCount = 2;
              }
              if (rightCount > 1 && !logKey) {
                doubleSpeed(art);
                logKey = true;
              }
            }, 100);
          }
        } else if (event.code === "ArrowLeft") {
          art.currentTime = art.currentTime - 5;
        } else if (event.code === "ArrowUp") {
          art.volume = art.volume + 0.01;
        } else if (event.code === "ArrowDown") {
          art.volume = art.volume - 0.01;
        } else if (event.code === "Space") {
          art.toggle();
        } else if (event.code === "Enter") {
          art.fullscreen = !art.fullscreen;
        }
      };
    };
  }
  function saveCloud(art) {
    let token = user.getToken();
    if (token == null) {
      return;
    }
    let v = user.getVideoPage();
    videoUpdate({
      drive_id: token.default_drive_id,
      duration: art.duration,
      file_id: v.id,
      play_cursor: art.currentTime
    }).then((res) => {
    });
  }
  function saveExit() {
    return (art) => {
      art.on("ready", () => {
        let v = user.getVideoPage();
        if (v.play_cursor) {
          art.seek = v.play_cursor;
        } else {
          let list = user.getVideoLookList();
          let index = list.findIndex((item) => {
            return item.id == v.id;
          });
          if (index != -1) {
            art.seek = list[index].play_cursor;
          }
        }
        let plset = user.getVideoPlayerSet();
        if (plset.fullscreen) {
          art.fullscreen = true;
        }
        if (plset.fullscreenWeb) {
          art.fullscreenWeb = true;
        }
        if (plset.playbackRate) {
          art.playbackRate = plset.playbackRate;
        }
        if (plset.subtitleSize && plset.subtitleSize != 0) {
          $2(".art-subtitle").css("font-size", plset.subtitleSize + "px");
          art.subtitleSize = plset.subtitleSize;
        }
        if (plset.subtitleMargin && plset.subtitleSize != 0) {
          $2(".art-subtitle").css("margin-bottom", plset.subtitleMargin + "px");
          art.subtitleMargin = plset.subtitleMargin;
        }
        if (plset.subtitleOffset) {
          art.subtitleOffset = plset.subtitleOffset;
          art.subtitleOffset = plset.subtitleOffset;
        }
        if (plset.subtitleColor && plset.subtitleColor.indexOf("#") != -1) {
          $2(".art-subtitle").css("color", plset.subtitleColor);
          art.subtitleColor = plset.subtitleColor;
        }
      });
      art.on("destroy", () => {
        let v = user.getVideoPage();
        if (v.type == 0) {
          saveCloud(art);
        }
        user.saveVideoPlayerSet(art);
        let currentTime = art.currentTime;
        let progress = parseInt(currentTime / art.duration * 100);
        try {
          art.hls.destroy();
          art.video.dispose();
        } catch (error) {
        }
        let items = user.getPage().items;
        let index = items.findIndex((it) => {
          return it.file_id == v.id;
        });
        if (index != -1) {
          if (!items[index].user_meta) {
            items[index].user_meta = "{}";
          }
          let meta = JSON.parse(items[index].user_meta);
          meta.play_cursor = currentTime;
          items[index].user_meta = JSON.stringify(meta);
        }
        let folderName;
        let href = v.href;
        if (v.type == 1) {
          folderName = "来自分享";
        } else {
          folderName = v.folderName;
        }
        user.saveVideoInfo(v.id, v.name, progress, folderName, href, v.type == 1, currentTime, v.drive_id);
      });
    };
  }
  const _hoisted_1$4 = { style: { "margin-bottom": "20px" } };
  const _hoisted_2$2 = { class: "bread-container--xuGOj" };
  const _hoisted_3$2 = {
    class: "breadcrumb-wrap--Uq5Lb",
    "data-align": "left",
    style: { "overflow-x": "auto" }
  };
  const _hoisted_4$1 = {
    class: "breadcrumb--gnRPG",
    "data-calc": "true"
  };
  const _hoisted_5$1 = ["data-label", "onClick", "data-key"];
  const _hoisted_6$1 = {
    class: "breadcrumb-item-link--9zcQY",
    style: { "color": "#409eff" },
    "data-spm-anchor-id": "0.0.0.i5.54a06c75zaT9h6"
  };
  const _hoisted_7$1 = { key: 0 };
  const _hoisted_8$1 = { id: "_fileList" };
  const _hoisted_9$1 = {
    class: "td--SGrZj td---v-kp",
    "data-col-key": "name",
    style: { "flex": "1 1 0%", "min-width": "160px" }
  };
  const _hoisted_10$1 = ["title"];
  const _hoisted_11$1 = {
    class: "td--SGrZj td---v-kp",
    "data-col-key": "name",
    style: { "flex": "1 1 0%", "min-width": "160px" }
  };
  const _hoisted_12$1 = ["title"];
  const _sfc_main$5 = {
    __name: "SubTitle",
    emits: ["selectSubTitle"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const emit = __emit;
      const data = vue.ref([]);
      const path = vue.ref([]);
      const url = vue.ref();
      vue.onMounted(() => {
        getFileList("root", "全部文件");
      });
      function selectFile(fileInfo) {
        elementPlus.ElMessageBox.confirm(
          `确认加载《${fileInfo.name}》字幕文件吗？`,
          "字幕选择",
          {
            confirmButtonText: "确认",
            cancelButtonText: "取消"
          }
        ).then(() => {
          emit("selectSubTitle", fileInfo);
        });
      }
      function getFileList(parent_file_id, name2) {
        let loadingInstance = elementPlus.ElLoading.service({
          target: "#_fileList",
          text: "加载中"
        });
        try {
          if (path.value.length != 0) {
            let last = path.value[path.value.length - 1];
            if (last.id == parent_file_id) {
              return;
            }
            let index = path.value.findIndex((item, index2) => {
              return item.id === parent_file_id;
            });
            if (index != -1) {
              path.value = path.value.splice(0, index);
            }
          }
          path.value.push({
            id: parent_file_id,
            name: name2
          });
          let token = user.getToken();
          if (token == "" || token == null) {
            showError$1("登录凭证失效，请重新登录重试");
            return;
          }
          if (token.default_drive_id == null || token.default_drive_id == "") {
            showError$1("设备id为空,请刷新重试");
            console.log(token.default_drive_id);
            return;
          }
          search({
            "drive_id": token.default_drive_id,
            "query": `parent_file_id = "${parent_file_id}" and (type = "folder" or file_extension in ["srt", "ass", "vtt"])`,
            "order_by": "type ASC,updated_at DESC",
            "limit": 20,
            "image_thumbnail_process": "image/resize,w_256/format,jpeg",
            "image_url_process": "image/resize,w_1920/format,jpeg/interlace,1",
            "video_thumbnail_process": "video/snapshot,t_1000,f_jpg,ar_auto,w_256"
          }).then((res) => {
            data.value.length = 0;
            data.value = res.data.items;
            if (parent_file_id == "root") {
              url.value = "https://www.aliyundrive.com/drive/file/backup";
            } else {
              url.value = "https://www.aliyundrive.com/drive/file/backup/" + parent_file_id;
            }
          }).catch((e) => {
            console.log(e);
            if (e && e + "" == "AxiosError: Request failed with status code 429") {
              showError$1("您操作的太快了! 请稍候点击下方按钮，刷新尝试");
            } else {
              showError$1(e + "");
            }
            path.value.pop();
          });
        } finally {
          loadingInstance.close();
        }
      }
      function toUrlFile() {
        var link = url.value;
        if (link == "https://www.aliyundrive.com/drive") {
          showError$1("如需跳首页，请点下方全部文件");
          return;
        }
        var regex = /(backup|resource)\/(.+?)(?:\/|\?|$)/;
        var match = link.match(regex);
        if (match) {
          var value = match[1];
          getFileList(value, "搜索结果");
        } else {
          showError$1("错误的链接");
        }
      }
      function toCurrentPage() {
        url.value = location.href;
        toUrlFile();
      }
      __expose({
        getFileList
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", null, [
          _cache[7] || (_cache[7] = vue.createElementVNode("div", { style: { "margin-top": "-20px" } }, [
            vue.createElementVNode("p", { class: "notice1" }, "页面链接就是先去找到字幕位置，然后再把当前页面的链接拷贝复制到下面输入框中，再点击跳转即可")
          ], -1)),
          vue.createElementVNode("div", _hoisted_1$4, [
            vue.createVNode(vue.unref(elementPlus.ElInput), {
              modelValue: url.value,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => url.value = $event),
              placeholder: "Please input"
            }, {
              prepend: vue.withCtx(() => _cache[1] || (_cache[1] = [
                vue.createTextVNode("链接")
              ])),
              append: vue.withCtx(() => [
                vue.createVNode(vue.unref(elementPlus.ElButton), {
                  type: "primary",
                  onClick: toUrlFile
                }, {
                  default: vue.withCtx(() => _cache[2] || (_cache[2] = [
                    vue.createTextVNode("跳转")
                  ])),
                  _: 1
                })
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          vue.createVNode(vue.unref(elementPlus.ElButton), {
            type: "primary",
            link: "",
            onClick: toCurrentPage
          }, {
            default: vue.withCtx(() => _cache[3] || (_cache[3] = [
              vue.createTextVNode("跳转到当前页面")
            ])),
            _: 1
          }),
          vue.createElementVNode("div", _hoisted_2$2, [
            vue.createElementVNode("div", _hoisted_3$2, [
              vue.createElementVNode("div", _hoisted_4$1, [
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(path.value, (item, index) => {
                  return vue.openBlock(), vue.createElementBlock("div", {
                    key: index,
                    class: "breadcrumb-item--j8J5H",
                    "data-label": item.name,
                    onClick: vue.withModifiers(($event) => getFileList(item.id, item.name), ["stop"]),
                    "data-key": item.id,
                    "data-hide": "false",
                    "data-more": "false"
                  }, [
                    vue.createElementVNode("div", _hoisted_6$1, vue.toDisplayString(item.name), 1),
                    _cache[4] || (_cache[4] = vue.createElementVNode("div", {
                      class: "breadcrumb-item-separator--MnbFV",
                      style: { "color": "#409eff" }
                    }, "›", -1))
                  ], 8, _hoisted_5$1);
                }), 128))
              ])
            ])
          ]),
          data.value.length == 0 ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_7$1, [
            vue.createVNode(vue.unref(elementPlus.ElEmpty), { description: "文件夹为空" })
          ])) : vue.createCommentVNode("", true),
          vue.createElementVNode("div", _hoisted_8$1, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(data.value, (item, index) => {
              return vue.openBlock(), vue.createElementBlock("div", {
                key: index,
                style: { "margin-top": "4px" }
              }, [
                item.type == "folder" ? (vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElCard), {
                  key: 0,
                  "body-style": { "padding": "5px", "margin": "0px" },
                  shadow: "hover",
                  onClick: vue.withModifiers(($event) => getFileList(item.file_id, item.name), ["stop"])
                }, {
                  default: vue.withCtx(() => [
                    vue.createElementVNode("div", _hoisted_9$1, [
                      _cache[5] || (_cache[5] = vue.createElementVNode("div", {
                        class: "cover--Mn1Bt folder-cover--ExDmp",
                        "data-size": "XXS"
                      }, [
                        vue.createElementVNode("img", {
                          alt: "folder",
                          class: "fileicon--Ob-Oj fileicon---webs",
                          draggable: "false",
                          src: "https://img.alicdn.com/imgextra/i3/O1CN01qSxjg71RMTCxOfTdi_!!6000000002097-2-tps-80-80.png"
                        })
                      ], -1)),
                      vue.createElementVNode("p", {
                        title: item.name
                      }, vue.toDisplayString(item.name), 9, _hoisted_10$1)
                    ])
                  ]),
                  _: 2
                }, 1032, ["onClick"])) : vue.createCommentVNode("", true),
                item.type == "file" ? (vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElCard), {
                  key: 1,
                  "body-style": { "padding": "5px", "margin": "0px" },
                  shadow: "hover",
                  onClick: vue.withModifiers(($event) => selectFile(item), ["stop"])
                }, {
                  default: vue.withCtx(() => [
                    vue.createElementVNode("div", _hoisted_11$1, [
                      _cache[6] || (_cache[6] = vue.createElementVNode("div", {
                        class: "cover--Mn1Bt folder-cover--ExDmp",
                        "data-size": "XXS"
                      }, [
                        vue.createElementVNode("img", {
                          alt: "others",
                          class: "fileicon--Ob-Oj fileicon---webs",
                          draggable: "false",
                          src: "https://img.alicdn.com/imgextra/i2/O1CN01ROG7du1aV18hZukHC_!!6000000003334-2-tps-140-140.png"
                        })
                      ], -1)),
                      vue.createElementVNode("p", {
                        title: item.name
                      }, vue.toDisplayString(item.name), 9, _hoisted_12$1)
                    ])
                  ]),
                  _: 2
                }, 1032, ["onClick"])) : vue.createCommentVNode("", true)
              ]);
            }), 128))
          ])
        ]);
      };
    }
  };
  const SubTitle = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["__scopeId", "data-v-8cb6b90e"]]);
  const indicator = "data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%2022%2022'%3e%3cpath%20d='M16.118%203.667h.382a3.667%203.667%200%20013.667%203.667v7.333a3.667%203.667%200%2001-3.667%203.667h-11a3.667%203.667%200%2001-3.667-3.667V7.333A3.667%203.667%200%20015.5%203.666h.382L4.95%202.053a1.1%201.1%200%20011.906-1.1l1.567%202.714h5.156L15.146.953a1.101%201.101%200%20011.906%201.1l-.934%201.614z'%20fill='%23333'%3e%3c/path%3e%3cpath%20d='M5.561%205.194h10.878a2.2%202.2%200%20012.2%202.2v7.211a2.2%202.2%200%2001-2.2%202.2H5.561a2.2%202.2%200%2001-2.2-2.2V7.394a2.2%202.2%200%20012.2-2.2z'%20fill='%23fff'%3e%3c/path%3e%3cpath%20d='M6.967%208.556a1.1%201.1%200%20011.1%201.1v2.689a1.1%201.1%200%2011-2.2%200V9.656a1.1%201.1%200%20011.1-1.1zM15.033%208.556a1.1%201.1%200%20011.1%201.1v2.689a1.1%201.1%200%2011-2.2%200V9.656a1.1%201.1%200%20011.1-1.1z'%20fill='%23333'%3e%3c/path%3e%3c/svg%3e";
  const state = "data:image/svg+xml,%3csvg%20viewBox='0%200%2080%2080'%20xmlns='http://www.w3.org/2000/svg'%20xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cpath%20id='pid-64-svgo-a'%20d='M0%200h80v80H0z'%3e%3c/path%3e%3cpath%20d='M52.546%208.014a3.998%203.998%200%20014.222%203.077c.104.446.093.808.039%201.138a2.74%202.74%200%2001-.312.881c-.073.132-.16.254-.246.376l-.257.366-.521.73c-.7.969-1.415%201.926-2.154%202.866l-.015.02a240.945%20240.945%200%20015.986.341l1.643.123.822.066.41.034.206.018.103.008.115.012c1.266.116%202.516.45%203.677.975a11.663%2011.663%200%20013.166%202.114c.931.87%201.719%201.895%202.321%203.022a11.595%2011.595%200%20011.224%203.613c.03.157.046.316.068.474l.015.119.013.112.022.206.085.822.159%201.646c.1%201.098.19%202.198.27%203.298.315%204.4.463%208.829.36%2013.255a166.489%20166.489%200%2001-.843%2013.213c-.012.127-.034.297-.053.454a7.589%207.589%200%2001-.072.475l-.04.237-.05.236a11.762%2011.762%200%2001-.74%202.287%2011.755%2011.755%200%2001-5.118%205.57%2011.705%2011.705%200%2001-3.623%201.263c-.158.024-.316.052-.475.072l-.477.053-.821.071-1.644.134c-1.096.086-2.192.16-3.288.23a260.08%20260.08%200%2001-6.578.325c-8.772.324-17.546.22-26.313-.302a242.458%20242.458%200%2001-3.287-.22l-1.643-.129-.822-.069-.41-.035-.206-.018c-.068-.006-.133-.01-.218-.02a11.566%2011.566%200%2001-3.7-.992%2011.732%2011.732%200%2001-5.497-5.178%2011.73%2011.73%200%2001-1.215-3.627c-.024-.158-.051-.316-.067-.475l-.026-.238-.013-.119-.01-.103-.07-.823-.132-1.648a190.637%20190.637%200%2001-.22-3.298c-.256-4.399-.358-8.817-.258-13.233.099-4.412.372-8.811.788-13.197a11.65%2011.65%200%20013.039-6.835%2011.585%2011.585%200%20016.572-3.563c.157-.023.312-.051.47-.07l.47-.05.82-.07%201.643-.13a228.493%20228.493%200%20016.647-.405l-.041-.05a88.145%2088.145%200%2001-2.154-2.867l-.52-.73-.258-.366c-.086-.122-.173-.244-.246-.376a2.74%202.74%200%2001-.312-.881%202.808%202.808%200%2001.04-1.138%203.998%203.998%200%20014.22-3.077%202.8%202.8%200%20011.093.313c.294.155.538.347.742.568.102.11.19.23.28.35l.27.359.532.72a88.059%2088.059%200%20012.06%202.936%2073.036%2073.036%200%20011.929%203.03c.187.313.373.628.556.945%202.724-.047%205.447-.056%208.17-.038.748.006%201.496.015%202.244.026.18-.313.364-.624.549-.934a73.281%2073.281%200%20011.93-3.03%2088.737%2088.737%200%20012.059-2.935l.533-.72.268-.359c.09-.12.179-.24.281-.35a2.8%202.8%200%20011.834-.881zM30.13%2034.631a4%204%200%2000-.418%201.42%2091.157%2091.157%200%2000-.446%209.128c0%202.828.121%205.656.364%208.483l.11%201.212a4%204%200%20005.858%203.143c2.82-1.498%205.55-3.033%208.193-4.606a177.41%20177.41%200%20005.896-3.666l1.434-.942a4%204%200%2000.047-6.632%20137.703%20137.703%200%2000-7.377-4.708%20146.88%20146.88%200%2000-6.879-3.849l-1.4-.725a4%204%200%2000-5.382%201.742z'%20id='pid-64-svgo-d'%3e%3c/path%3e%3cfilter%20x='-15.4%25'%20y='-16.3%25'%20width='130.9%25'%20height='132.5%25'%20filterUnits='objectBoundingBox'%20id='pid-64-svgo-c'%3e%3cfeOffset%20dy='2'%20in='SourceAlpha'%20result='shadowOffsetOuter1'%3e%3c/feOffset%3e%3cfeGaussianBlur%20stdDeviation='1'%20in='shadowOffsetOuter1'%20result='shadowBlurOuter1'%3e%3c/feGaussianBlur%3e%3cfeColorMatrix%20values='0%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200.3%200'%20in='shadowBlurOuter1'%20result='shadowMatrixOuter1'%3e%3c/feColorMatrix%3e%3cfeOffset%20in='SourceAlpha'%20result='shadowOffsetOuter2'%3e%3c/feOffset%3e%3cfeGaussianBlur%20stdDeviation='3.5'%20in='shadowOffsetOuter2'%20result='shadowBlurOuter2'%3e%3c/feGaussianBlur%3e%3cfeColorMatrix%20values='0%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200%200.2%200'%20in='shadowBlurOuter2'%20result='shadowMatrixOuter2'%3e%3c/feColorMatrix%3e%3cfeMerge%3e%3cfeMergeNode%20in='shadowMatrixOuter1'%3e%3c/feMergeNode%3e%3cfeMergeNode%20in='shadowMatrixOuter2'%3e%3c/feMergeNode%3e%3c/feMerge%3e%3c/filter%3e%3c/defs%3e%3cg%20fill='none'%20fill-rule='evenodd'%20opacity='.8'%3e%3cmask%20id='pid-64-svgo-b'%20fill='%23fff'%3e%3cuse%20xlink:href='%23pid-64-svgo-a'%3e%3c/use%3e%3c/mask%3e%3cg%20mask='url(%23pid-64-svgo-b)'%3e%3cuse%20fill='%23000'%20filter='url(%23pid-64-svgo-c)'%20xlink:href='%23pid-64-svgo-d'%3e%3c/use%3e%3cuse%20fill='%23FFF'%20xlink:href='%23pid-64-svgo-d'%3e%3c/use%3e%3c/g%3e%3c/g%3e%3c/svg%3e";
  const _hoisted_1$3 = ["data-def"];
  const _sfc_main$4 = {
    __name: "Selector",
    emits: ["next"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const videoList = vue.ref([]);
      const emit = __emit;
      const card = vue.ref();
      vue.onMounted(() => {
      });
      function nextVideo(index) {
        videoList.value.forEach((it, ix) => {
          if (ix == index) {
            it.default = true;
          } else {
            it.default = false;
          }
        });
        emit("next", videoList.value[index]);
      }
      function loadingList(vList) {
        console.log(vList);
        videoList.value = vList;
        scrollToData();
      }
      function scrollToData() {
        let target = $2('div[data-def="true"]');
        if (target.length == 0) {
          setTimeout(scrollToData, 200);
          return;
        }
        card.value.setScrollTop(target[0].offsetTop);
      }
      __expose({
        loadingList
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElScrollbar), {
          class: "GoodList",
          ref_key: "card",
          ref: card
        }, {
          default: vue.withCtx(() => [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(videoList.value, (item, index) => {
              return vue.openBlock(), vue.createElementBlock("div", {
                "data-def": item.default,
                class: "card",
                key: index
              }, [
                vue.createVNode(vue.unref(elementPlus.ElTooltip), {
                  content: item.file.name,
                  placement: "left-start",
                  effect: "light",
                  "hide-after": "10",
                  "show-after": "100"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(elementPlus.ElCard), {
                      shadow: item.default ? "always" : "hover",
                      onClick: vue.withModifiers(($event) => nextVideo(index), ["stop"])
                    }, {
                      default: vue.withCtx(() => [
                        vue.createElementVNode("p", {
                          style: vue.normalizeStyle(item.default ? "color:#23ade5" : "")
                        }, vue.toDisplayString(item.file.name), 5)
                      ]),
                      _: 2
                    }, 1032, ["shadow", "onClick"])
                  ]),
                  _: 2
                }, 1032, ["content"])
              ], 8, _hoisted_1$3);
            }), 128))
          ]),
          _: 1
        }, 512);
      };
    }
  };
  const Selector = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["__scopeId", "data-v-152c05f8"]]);
  const _sfc_main$3 = {
    __name: "VideoPage",
    setup(__props) {
      const artRef = vue.ref();
      const subtitleRef = vue.ref();
      const selectorRef = vue.ref();
      const color = vue.ref("#fff");
      const table = vue.ref(false);
      const showSelector = vue.ref(false);
      const retry = vue.reactive({
        error: false,
        text: "",
        title: "",
        loading: false
      });
      const transcoding = {
        UHD: "4K 超清",
        QHD: "2K 超清",
        FHD: "1080 全高清",
        HD: "720 高清",
        SD: "540 标清",
        LD: "360 流畅"
      };
      var options = {};
      var retries = 3;
      let instance;
      vue.onMounted(() => {
        getVideoInfo(artp);
      });
      function getOption(video) {
        let vInfo = user.getVideoPage();
        let yh = vInfo.name && getExt(vInfo.name) == "mp4" && false;
        let play_info = video.video_preview_play_info;
        let task_list = play_info.live_transcoding_task_list;
        var option = [];
        if (yh) {
          option.push({
            html: " 原画",
            url: ""
          });
        }
        task_list.forEach(function(item, index) {
          let name2 = transcoding[item.template_id];
          if (!name2) {
            return;
          }
          if (item.url != "") {
            option.push({
              html: name2,
              url: item.url || item.preview_url
            });
          }
        });
        return option;
      }
      function nextVideo(item) {
        showSelector.value = false;
        if (item.file) {
          item = item.file;
        }
        instance.destroy(false);
        let vInfo = user.getVideoPage();
        vInfo.id = item.file_id;
        if (!item.user_meta) {
          item.user_meta = "{}";
        }
        let meta = JSON.parse(item.user_meta);
        vInfo.duration = meta.duration;
        vInfo.play_cursor = meta.play_cursor;
        vInfo.name = item.name;
        vInfo.thumbnail = item.thumbnail;
        getVideoInfo(artp);
      }
      function artp(video) {
        var option = getOption(video);
        var plset = user.getVideoPlayerSet();
        color.value = plset.subtitleColor || "#FFF";
        instance = new Artplayer2({
          container: artRef.value,
          settings: [
            {
              html: "画中画",
              icon: '<i class="art-icon art-icon-pip"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 36 36" height="32" width="32"><path d="M25 17h-8v6h8v-6Zm4 8V10.98C29 9.88 28.1 9 27 9H9c-1.1 0-2 .88-2 1.98V25c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2Zm-2 .02H9V10.97h18v14.05Z"></path></svg></i>',
              switch: false,
              tooltip: "Close",
              onSwitch: function(item, $dom, event) {
                console.info(item, $dom, event);
                const nextState = !item.switch;
                instance.pip = nextState;
                item.tooltip = nextState ? "Open" : "Close";
                return nextState;
              }
            },
            {
              html: "字幕设置",
              selector: [
                {
                  html: "字体大小",
                  range: [plset.subtitleSize || 20, 10, 45, 5],
                  tooltip: (plset.subtitleSize || 20) + "px",
                  onChange: function(item, $dom, event) {
                    $2(".art-subtitle").css("font-size", item.range + "px");
                    instance.subtitleSize = item.range;
                    return item.range + "px";
                  }
                },
                {
                  html: "上下移动",
                  range: [plset.subtitleMargin || 0, 0, 150, 10],
                  tooltip: (plset.subtitleMargin || 0) + "px",
                  onChange: function(item, $dom, event) {
                    $2(".art-subtitle").css("margin-bottom", item.range + "px");
                    instance.subtitleMargin = item.range;
                    return item.range + "px";
                  }
                },
                {
                  html: "偏移",
                  tooltip: (plset.subtitleOffset || 0) + "s",
                  range: [plset.subtitleOffset || 0, -5, 5, 0.1],
                  onChange(item) {
                    instance.subtitleOffset = item.range;
                    return item.range + "s";
                  }
                },
                {
                  html: `<div style="display:flex;justify-content:center; align-items:center ">颜色<div style='background-color:${color.value};width:15px;height:15px;' /></div>`,
                  switch: false,
                  onSwitch: function(item, $dom, event) {
                    var subtitle2 = $2(".art-subtitle");
                    elementPlus.ElMessageBox({
                      title: "颜色面板",
                      message: () => vue.h("p", null, [
                        vue.h("span", null, "请选择颜色"),
                        vue.h(elementPlus.ElColorPicker, {
                          model: color,
                          modelValue: color.value,
                          "onUpdate:modelValue": (val) => {
                            color.value = val;
                          }
                        })
                      ]),
                      confirmButtonText: "确定",
                      cancelButtonText: "取消",
                      closeOnClickModal: false
                    }).then(() => {
                      subtitle2.css("color", color.value);
                      item.html = `<div style="display:flex;justify-content:center; align-items:center ">颜色<div style='background-color:${color.value};width:15px;height:15px;' /></div>`;
                      item.switch = true;
                      instance.subtitleColor = color.value;
                    }).catch(() => {
                    });
                    return false;
                  }
                }
              ]
            }
          ],
          plugins: [
            // 清晰度
            artplayPluginQuality(option),
            // 上下集
            selector(function(item) {
              if (item == null) {
                instance.pause();
                showSelector.value = true;
                return;
              }
              nextVideo(item);
            }),
            //快捷键
            hotkey(),
            // 字幕插件
            subtitle(openSubTitle),
            // 偏好设置
            saveExit()
          ],
          ...options
        });
        instance.on("error", function(e) {
          console.log(e);
        });
        instance.on("ready", () => {
          let subtitle2 = video && video.video_preview_play_info && video.video_preview_play_info.live_transcoding_subtitle_task_list;
          if (subtitle2 != null && subtitle2.length > 0) {
            let subtitleType = getExt(subtitle2[0].url);
            instance.subtitle.switch(subtitle2[0].url, {
              type: subtitleType.length > 3 ? "srt" : subtitleType
            });
          }
          instance.play();
        });
        instance.on("destroy", () => {
          console.info("destroy");
        });
      }
      function getExt(url) {
        if (url.includes("?")) {
          return getExt(url.split("?")[0]);
        }
        if (url.includes("#")) {
          return getExt(url.split("#")[0]);
        }
        return url.trim().toLowerCase().split(".").pop();
      }
      function selectSubTitle(fileInfo) {
        console.log(fileInfo.url);
        table.value = false;
        instance.subtitle.switch(fileInfo.url, {
          type: getExt(fileInfo.name)
        });
        instance.play();
      }
      function openSubTitle() {
        instance.pause();
        table.value = true;
      }
      function retryClick() {
        retries = 3;
        retry.loading = true;
        getVideoInfo(artp);
      }
      var hlsErrorHandler = function(event, data, art) {
        if (art.hls.error == -1) {
          console.log("在处理了");
          return;
        }
        var errorType = data.type;
        var errorDetails = data.details;
        var errorFatal = data.fatal;
        console.log(errorType);
        console.log(errorDetails);
        console.log(errorFatal);
        if (art.hls.error) {
          art.hls.error += 1;
        } else {
          art.hls.error = 1;
        }
        if (data.details == "fragLoadError" && (errorFatal || art.hls.error >= 4)) {
          art.hls.error = -1;
          retry403(art);
        } else if (errorType == "networkError" && errorFatal) {
          elementPlus.ElNotification({
            title: "网络错误",
            message: "请检查网络配置后，刷新页面",
            type: "error"
          });
        }
      };
      function m3u8Hls(video, url, art) {
        if (art.qualityHtml == " 原画") {
          video.src = url;
          return;
        }
        art.hls = new Hls();
        art.hls.loadSource(url);
        art.hls.attachMedia(video);
        video.addEventListener("loadstart", function(e) {
          console.log("提示视频的元数据已加载" + video.src);
          if (art.hlsCurrentTime403) {
            video.currentTime = art.hlsCurrentTime403;
          }
        });
        art.hls.on(Hls.Events.ERROR, function(e, d) {
          hlsErrorHandler(e, d, art);
        });
      }
      function retry403(art) {
        getVideoInfo(function(data) {
          let option = getOption(data);
          let index = option.findIndex(function(item2, index2) {
            return item2.html === art.qualityHtml;
          });
          if (index == -1) {
            index = option.length - 1;
          }
          let item = option[index];
          item["default"] = true;
          art.quality_.selector = option;
          art.hlsCurrentTime403 = art.currentTime;
          art.hls.destroy();
          art.hls.error = 0;
          art.hls = new Hls();
          art.hls.loadSource(item.url);
          art.hls.attachMedia(art.video);
          art.hls.on(Hls.Events.ERROR, function(e, d) {
            hlsErrorHandler(e, d, art);
          });
        });
      }
      function showSelectorOpen() {
        selectorRef.value.loadingList(instance.videoList);
      }
      function closeSelector() {
        instance.play();
      }
      function getVideoInfo(call) {
        let token = user.getToken();
        if (token == null) {
          elementPlus.ElMessageBox.alert("当前登录凭证获取为空，请刷新或重新登录", {
            confirmButtonText: "获取凭证失败",
            callback: (action) => {
              location.href = location.href;
            }
          });
          return;
        }
        let videoInfo = user.getVideoPage();
        let req;
        if (videoInfo.type == 0) {
          req = videoPreviewPlayInfo({
            category: "live_transcoding",
            drive_id: videoInfo.drive_id,
            file_id: videoInfo.id,
            template_id: "FHD|HD|SD|LD",
            url_expire_sec: 14400,
            get_subtitle_info: true
          });
        } else if (videoInfo.type == 1) {
          let shareToken = user.getShareToken();
          if (!user.isExpires(shareToken)) {
            elementPlus.ElMessageBox.alert("很抱歉，当前页面太久没活动了，请点击刷新后再来观看吧", "分享凭证失效", {
              confirmButtonText: "刷新",
              callback: (action) => {
                location.href = location.href;
              }
            });
          }
          req = shareVideoInfo(videoInfo.id, shareToken.share_id, shareToken.share_token);
        }
        req.then((res) => {
          retry.error = false;
          Artplayer2.ASPECT_RATIO = ["default", "1:1", "2:1", "4:3", "16:9", "21:9"];
          options = {
            id: videoInfo.id,
            poster: videoInfo.thumbnail,
            title: videoInfo.name,
            type: "m3u8",
            customType: {
              m3u8: m3u8Hls
            },
            flip: true,
            setting: true,
            playbackRate: true,
            aspectRatio: true,
            fullscreen: true,
            fullscreenWeb: true,
            miniProgressBar: true,
            autoplay: true,
            screenshot: true,
            hotkey: false,
            airplay: true,
            theme: "#23ade5",
            volume: 1,
            contextmenu: [],
            icons: {
              state: `<img width="150" heigth="150" src="${state}">`,
              indicator: `<img width="16" heigth="16" src="${indicator}">`
            }
          };
          if (videoInfo.type == 0) {
            $2(".text--KBVB3").text(videoInfo.name);
          } else if (videoInfo.type == 1) {
            $2(".header-file-name--CN_fq").text(videoInfo.name);
          }
          call && call(res.data);
        }).catch((e) => {
          if (instance) {
            instance.pause();
            instance.destroy(false);
          }
          if (e.skip) {
            return;
          }
          console.log(e);
          if (retries != 0) {
            retries = retries - 1;
            getVideoInfo(call);
          }
          if (e && e + "" == "AxiosError: Request failed with status code 429") {
            retry.text = "请稍候点击下方按钮，刷新尝试";
            retry.title = "您操作的太快了";
          } else {
            retry.title = "接口问题";
            retry.text = e + "";
          }
          retry.error = true;
        }).finally(() => {
          retry.loading = false;
        });
      }
      vue.onUnmounted(() => {
        if (instance) {
          instance.destroy(false);
        }
        console.log("视频页面销毁");
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock(vue.Fragment, null, [
          vue.createVNode(vue.unref(elementPlus.ElDrawer), {
            modelValue: table.value,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => table.value = $event),
            title: "请选择字幕文件",
            direction: "rtl",
            size: "25%"
          }, {
            default: vue.withCtx(() => [
              vue.createVNode(SubTitle, {
                onSelectSubTitle: selectSubTitle,
                ref_key: "subtitleRef",
                ref: subtitleRef
              }, null, 512)
            ]),
            _: 1
          }, 8, ["modelValue"]),
          vue.createVNode(vue.unref(elementPlus.ElDrawer), {
            modelValue: showSelector.value,
            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => showSelector.value = $event),
            title: "选集",
            direction: "rtl",
            size: "20%",
            onOpen: showSelectorOpen,
            onClose: closeSelector
          }, {
            default: vue.withCtx(() => [
              vue.createVNode(Selector, {
                videoList: _ctx.videoList,
                ref_key: "selectorRef",
                ref: selectorRef,
                onNext: nextVideo
              }, null, 8, ["videoList"])
            ]),
            _: 1
          }, 8, ["modelValue"]),
          vue.withDirectives(vue.createElementVNode("div", {
            class: "player",
            ref_key: "artRef",
            ref: artRef
          }, null, 512), [
            [vue.vShow, !retry.error]
          ]),
          vue.withDirectives(vue.createVNode(vue.unref(elementPlus.ElResult), {
            title: retry.title,
            "sub-title": retry.text
          }, {
            extra: vue.withCtx(() => [
              vue.createVNode(vue.unref(elementPlus.ElButton), {
                type: "primary",
                loading: retry.loading,
                onClick: vue.withModifiers(retryClick, ["stop"])
              }, {
                default: vue.withCtx(() => _cache[2] || (_cache[2] = [
                  vue.createTextVNode("刷新")
                ])),
                _: 1
              }, 8, ["loading"])
            ]),
            _: 1
          }, 8, ["title", "sub-title"]), [
            [vue.vShow, retry.error]
          ])
        ], 64);
      };
    }
  };
  const VideoPage = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["__scopeId", "data-v-d648fbfe"]]);
  const _hoisted_1$2 = { style: { "height": "410px", "overflow-y": "auto" } };
  const _hoisted_2$1 = {
    key: 0,
    align: "center",
    width: "100%",
    color: "#1890ff",
    size: "1/"
  };
  const _hoisted_3$1 = {
    "data-index": "0",
    class: "tr-wrapper--RxoAI",
    style: { "height": "52px", "width": "100%" }
  };
  const _hoisted_4 = {
    class: "drop-wrapper--T27s",
    "data-drop-target": "false"
  };
  const _hoisted_5 = {
    "data-is-dragging": "false",
    class: "drag-wrapper---smTQ",
    draggable: "true"
  };
  const _hoisted_6 = {
    class: "tr--Ogi-3 tr--97U9T",
    "data-is-selected": "false",
    "data-clickable": "true",
    "data-has-checkbox": "true",
    style: { "cursor": "pointer" }
  };
  const _hoisted_7 = ["onClick"];
  const _hoisted_8 = ["onClick"];
  const _hoisted_9 = ["title"];
  const _hoisted_10 = ["onClick"];
  const _hoisted_11 = { class: "text-secondary--kiARj" };
  const _hoisted_12 = {
    class: "td--SGrZj td---v-kp",
    "data-col-key": "size",
    style: { "width": "160px", "flex": "0 0 auto" }
  };
  const _hoisted_13 = { class: "text-secondary--kiARj" };
  const _hoisted_14 = ["href"];
  const _sfc_main$2 = {
    __name: "VideoHistoryPage",
    setup(__props) {
      let locList = vue.ref(user.getVideoLookList());
      let clodList = vue.ref([]);
      let listData = vue.ref([
        {
          key: "本地历史",
          list: locList
        },
        {
          key: "云端历史",
          list: clodList
        }
      ]);
      vue.onMounted(() => {
        videoHistoryList(listFuction);
      });
      function listFuction(data) {
        if (data.length != 0) {
          clodList.value = data;
        }
      }
      function clearHistory() {
        user.clearVideoHistory();
        locList.value = [];
      }
      function playInfo(videoItem) {
        if (videoItem.share) {
          location.href = videoItem.href;
          return;
        }
        let vInfo = user.getVideoPage();
        vInfo.id = videoItem.id;
        vInfo.drive_id = videoItem.drive_id;
        vInfo.play_cursor = videoItem.play_cursor;
        vInfo.name = videoItem.name;
        vInfo.thumbnail = "";
        vInfo.folderName = videoItem.folderName;
        vInfo.type = 0;
        vInfo.href = videoItem.href;
        let html2 = `<div class="modal--nw7G9" id="videoHistory">
    <div class="web--sYiY- container--5Stu-">
      <div class="content--9N3Eh">
        <div class="header--u7XR-" data-layout-sider-open="true">
        <div class="header-right--jsds3">
          <div class="nav-actions--hGPM3">
          <span class="nav-action--McoQC nav-prev--f5MXf">
                    <span data-role="icon" data-render-as="svg" data-icon-type="PDSLeftNormal" class="nav-icon--0dKs7 icon--D3kMk "  style="color:#1890ff">
                  <svg viewBox="0 0 1024 1024">
                    <use xlink:href="#PDSRightNormal">
                    </use>
                  </svg>
                </span>
                <span class="nav-text--gdQi6">
                  <a href="${vInfo.href}">进入到当前目录</a>
                </span>
              </span>
            </div>
          <div class="separator--cn-Xf">
            </div>
          </div>
        <div class="header-center--CexZ2">
          <div class="filename--cpLKM">
              <span class="text--KBVB3">${vInfo.name}</span>
            </div>
          </div>
          <div style="padding:10px" id="header-close">
            <span data-role="icon" data-render-as="svg" data-icon-type="PDSClose"  class="icon--BObaC icon--D3kMk ">
              <svg viewBox="0 0 1024 1024" data-spm-anchor-id="0.0.0.i4.54a06c75hUkxKw">
                <use xlink:href="#PDSClose">
                </use>
              </svg>
            </span>
          </div>
        </div>
        <div class="previewer--g6qCF">
          <div class="video-previewer--6slx7">
 		<div class="video-previewer-container--43gy-"  tabindex="-1" data-fullscreen="false">
               <div class="video-stage---5FXB">
                <video class="video--26SLZ" preload="metadata" src="">
                </video>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>`;
        $2("#root").append(html2);
        var app = vue.createApp(VideoPage);
        app.mount(
          (() => {
            const app2 = $2(`<div id="videoPage" class='video-previewer--6slx7'></div>`)[0];
            $2(".previewer--g6qCF").replaceWith(app2);
            $2(".ant-modal-Link .icon-wrapper--TbIdu").click();
            return app2;
          })()
        );
        $2("#header-close").one("click", function() {
          app.unmount();
          $2("#videoHistory").remove();
        });
      }
      let videoHistoryList = function(callback) {
        homeWidgets().then((res) => {
          let site = location.protocol + "//" + location.host + "/drive/file/backup/";
          if (res.data && res.data.recentUsed) {
            let videoList = res.data.recentUsed.items.filter(function(item, index) {
              return item.category === "video";
            });
            videoList = videoList.map((item) => {
              let href = site;
              if (item.compilationId) {
                let i2 = item.compilationId.indexOf("_");
                let compilationId = item.compilationId.substring(i2 + 1, item.compilationId.length);
                href += compilationId;
              }
              return {
                "category": "video",
                "name": item.name,
                "progress": item.progressPercentage,
                "id": item.fileId,
                "folderName": item.fromSourceDescription,
                "href": href,
                "share": false,
                "drive_id": item.driveId,
                "play_cursor": item.playCursor
              };
            });
            callback && callback(videoList);
            return;
          }
          callback && callback([]);
        }).catch((err) => {
          callback && callback([]);
        });
      };
      vue.onUnmounted(() => {
        console.log("历史页面销毁");
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("div", null, [
          vue.createElementVNode("p", {
            style: { "padding-bottom": "10px" },
            class: vue.normalizeClass(vue.unref(CLASS_NAMES).textPrimary)
          }, " 最近观看了" + vue.toDisplayString(vue.unref(locList).length + vue.unref(clodList).length) + "个视频", 3),
          vue.createElementVNode("div", _hoisted_1$2, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(listData), (data, i1) => {
              return vue.openBlock(), vue.createElementBlock("div", { key: i1 }, [
                data.key == "云端历史" ? (vue.openBlock(), vue.createElementBlock("hr", _hoisted_2$1)) : vue.createCommentVNode("", true),
                vue.createElementVNode("h1", {
                  style: { "padding-bottom": "13px" },
                  class: vue.normalizeClass(vue.unref(CLASS_NAMES).textPrimary)
                }, vue.toDisplayString(data.key), 3),
                data.key == "本地历史" ? (vue.openBlock(), vue.createElementBlock("p", {
                  key: 1,
                  class: "text-secondary--38-Of clearHistory",
                  style: { "padding-bottom": "13px" },
                  onClick: vue.withModifiers(clearHistory, ["stop"])
                }, _cache[0] || (_cache[0] = [
                  vue.createElementVNode("a", null, "清空本地历史", -1)
                ]))) : vue.createCommentVNode("", true),
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(data.list, (item, index) => {
                  return vue.openBlock(), vue.createElementBlock("div", {
                    style: { "height": "52px", "width": "100%" },
                    key: index
                  }, [
                    vue.createElementVNode("div", _hoisted_3$1, [
                      _cache[3] || (_cache[3] = vue.createElementVNode("div", {
                        class: "padding-element-horizontal--pMTS6",
                        style: { "width": "32px" }
                      }, null, -1)),
                      vue.createElementVNode("div", _hoisted_4, [
                        vue.createElementVNode("div", _hoisted_5, [
                          vue.createElementVNode("div", _hoisted_6, [
                            vue.createElementVNode("div", {
                              onClick: ($event) => playInfo(item),
                              class: "checkbox--P-zHa checkbox-container--t0ALJ",
                              role: "checkbox",
                              "aria-checked": "false",
                              "data-checked": "false",
                              "data-partial": "false",
                              "data-disabled": "false",
                              "data-no-padding": "false"
                            }, _cache[1] || (_cache[1] = [
                              vue.createElementVNode("span", {
                                "data-role": "icon",
                                "data-render-as": "svg",
                                "data-icon-type": "PDSMore",
                                class: "ant-dropdown-trigger icon--d-ejA"
                              }, [
                                vue.createElementVNode("svg", {
                                  t: "1676180557921",
                                  class: "icon",
                                  viewBox: "0 0 1024 1024",
                                  version: "1.1",
                                  xmlns: "http://www.w3.org/2000/svg",
                                  "p-id": "3478",
                                  width: "16",
                                  height: "16"
                                }, [
                                  vue.createElementVNode("path", {
                                    d: "M374.6 636.5c4.4 0 8.5-1.2 12.1-3.3l171.7-100c8-3.6 13.6-11.9 13.6-21.5 0-8.8-4.8-16.6-11.9-20.7l-167.8-97.8c-4.3-5-10.7-8.1-17.7-8.1-13.1 0-23.6 10.7-23.6 23.8v1.3l-0.3 0.2 0.4 199.8c-0.1 0.8-0.1 1.6-0.1 2.5 0 13.2 10.6 23.8 23.6 23.8z",
                                    fill: "#4D4D4D",
                                    "p-id": "3479"
                                  }),
                                  vue.createElementVNode("path", {
                                    d: "M64.7 586.3a32.2 32.1 0 1 0 64.4 0 32.2 32.1 0 1 0-64.4 0Z",
                                    fill: "#4D4D4D",
                                    "p-id": "3480"
                                  }),
                                  vue.createElementVNode("path", {
                                    d: "M960 398.3c0.1-1.6 0.2-3.2 0.2-4.8 0-35-28.5-63.3-63.6-63.3-11.7 0-22.7 3.2-32.2 8.7l-0.5-0.3-31.5 18.2v-64.7c-0.1-73.1-59.9-133-133.1-133H197.4c-73.1 0-133 59.8-133 133v165.8h0.2c0 17.7 14.4 32.1 32.2 32.1s32.2-14.4 32.2-32.1h0.2V287c0-35.2 28.8-64 64-64h510.2c35.2 0 64 28.8 64 64v448.9c0 35.2-28.8 64-64 64H193.3c-35.2 0-64-28.8-64-64v-21.4c0-17.7-14.4-32.1-32.2-32.1-17.8 0-32.2 14.4-32.2 32.1h-0.4v15.3c0 73.2 59.9 133 133 133h501.9c73.2 0 133-59.8 133-133v-64.1l33.1 19.1 0.1-0.1c9.2 5.1 19.8 8 31 8 35.1 0 63.6-28.4 63.6-63.3 0-1.6-0.1-3.2-0.2-4.8V398.3z m-63.6 205.1c-0.3 7.8-6.9 14.1-15 14.1-2.7 0-5.3-0.7-7.5-2l-41.5-23.7V430.1l40.9-23.2c2.3-1.5 5.1-2.3 8.1-2.3 8.3 0 15 6.6 15 14.6v184.2z",
                                    fill: "#4D4D4D",
                                    "p-id": "3481"
                                  })
                                ])
                              ], -1)
                            ]), 8, _hoisted_7),
                            vue.createElementVNode("div", {
                              class: "td--SGrZj td---v-kp history_video",
                              compilationid: "",
                              "data-col-key": "name",
                              style: { "flex": "1 1 0%", "min-width": "160px" },
                              onClick: ($event) => playInfo(item)
                            }, [
                              _cache[2] || (_cache[2] = vue.createElementVNode("div", {
                                class: "cover--Mn1Bt file-cover--tJG-H",
                                "data-size": "XXS",
                                "data-thumbnail": "normal"
                              }, [
                                vue.createElementVNode("div", { class: "is-loaded--otXtL thumbnail-wrapper--aGcWv" }, [
                                  vue.createElementVNode("div", { class: "thumbnail--skb-6 fill-mode-cover--VWUJo size-xxs--oSITU" }, [
                                    vue.createElementVNode("img", {
                                      alt: "video",
                                      class: "fileicon--38wQG fileicon---webs",
                                      draggable: "false",
                                      src: "https://img.alicdn.com/imgextra/i2/O1CN01H7FCkb1P6mPJxDEFa_!!6000000001792-2-tps-80-80.png"
                                    })
                                  ])
                                ])
                              ], -1)),
                              vue.createElementVNode("p", {
                                class: vue.normalizeClass(vue.unref(CLASS_NAMES).textPrimary),
                                title: item.name
                              }, vue.toDisplayString(item.name), 11, _hoisted_9)
                            ], 8, _hoisted_8),
                            vue.createElementVNode("div", {
                              compilationid: "",
                              class: "history_video td--SGrZj td---v-kp",
                              "data-col-key": "updated_at",
                              style: { "width": "200px", "flex": "0 0 auto" },
                              onClick: ($event) => playInfo(item)
                            }, [
                              vue.createElementVNode("p", _hoisted_11, "已观看" + vue.toDisplayString(item.progress) + "%", 1)
                            ], 8, _hoisted_10),
                            vue.createElementVNode("div", _hoisted_12, [
                              vue.createElementVNode("p", _hoisted_13, [
                                vue.createElementVNode("a", {
                                  href: item.href
                                }, vue.toDisplayString(item.folderName), 9, _hoisted_14)
                              ])
                            ])
                          ])
                        ])
                      ]),
                      _cache[4] || (_cache[4] = vue.createElementVNode("div", {
                        class: "padding-element-horizontal--39l8Q",
                        style: { "width": "32px" }
                      }, null, -1))
                    ])
                  ]);
                }), 128))
              ]);
            }), 128))
          ])
        ]);
      };
    }
  };
  let showDownloadHomePage = function() {
    let app = vue.createApp(DwoloadPage);
    showDiv("文件下载", app);
  };
  function initMenuButton(menuName) {
    if ($2(".button-download-aliyun").length !== 0) {
      return;
    }
    var css2 = "#root header:eq(0)";
    if ($2(css2).length > 0) {
      var html2 = "";
      html2 += `<div style="margin:1px 8px;"></div><div class="${CLASS_NAMES.button} small--e7LRt history-video"><span style="margin-right:2px" data-role="icon"data-render-as="svg"data-icon-type="PDSAddS"class="icon--D3kMk"><svg t="1676170067530"class="icon"viewBox="0 0 1024 1024"version="1.1"xmlns="http://www.w3.org/2000/svg"p-id="2764"width="200"height="200"><path d="M512 1024C229.248 1024 0 794.752 0 512S229.248 0 512 0s512 229.248 512 512-229.248 512-512 512z m42.666667-486.869333V298.538667C554.666667 275.328 535.552 256 512 256c-23.722667 0-42.666667 19.029333-42.666667 42.538667v256.256a41.984 41.984 0 0 0 12.202667 29.866666l121.258667 121.258667a42.368 42.368 0 0 0 60.032-0.298667 42.666667 42.666667 0 0 0 0.298666-60.032L554.666667 537.130667z"fill="#ffffff"p-id="2765"></path></svg></span><p style="color: white;">最近在看<p></div>`;
      html2 += `<div style="margin:1px 8px;"></div><div class="${CLASS_NAMES.button} small--e7LRt button-download-aliyun"><p style="color: white;">显示链接<p></div>`;
      $2(".history-video").remove();
      $2(".button-download-aliyun").remove();
      $2(css2).append(html2);
      $2(".button-download-aliyun").on("click", showDownloadHomePage);
      $2(".history-video").on("click", () => {
        let app = vue.createApp(_sfc_main$2);
        showDiv(`<div style="display:flex; justify-content:center;  align-items:center;">
                    <span data-role="icon" data-render-as="svg" data-icon-type="PDSRecent" class="icon--d-ejA " style="color: white;">
                        <svg viewBox="0 0 1024 1024"><use xlink:href="#PDSRecent"></use></svg>
                        </span>最近在看</div>`, app);
      });
    } else {
      setTimeout(function() {
        initMenuButton();
      }, 1e3);
    }
  }
  const home = (menuName) => {
    initMenuButton();
  };
  function handler$3(res) {
    let data = res.data;
    let response = res.response;
    let page = user.getPage();
    let items = [];
    if (page.id === data.parent_file_id && page.order === data.order_direction && page.order_by === data.order_by && page.drive_id === data.drive_id) {
      items = response.items;
    } else {
      page.id = data.parent_file_id;
      page.order = data.order_direction;
      page.drive_id = data.drive_id;
      page.order_by = data.order_by;
      page.items = response.items;
    }
    let folderName = $2(".breadcrumb-item-link--9zcQY:last").text();
    page.folderName = folderName;
    if (items.length > 0) {
      if (!page.items) {
        page.items = [];
      }
      items.forEach(function(newItem) {
        var existingItemIndex = page.items.findIndex(function(oldItem) {
          return oldItem.file_id === newItem.file_id;
        });
        if (existingItemIndex !== -1) {
          page.items[existingItemIndex] = newItem;
        } else {
          page.items.push(newItem);
        }
      });
    }
    console.log(`已加载${page.items.length}个文件`);
    showSuccess(`已加载${page.items.length}个文件`);
    if ($2(".button-download-aliyun").length <= 0 && user.home()) {
      home();
    }
  }
  const fileList = () => {
    http.onResponse(function(res, url) {
      let config = res.config;
      try {
        config.data = JSON.parse(config.data);
      } catch (error) {
        config.data = {};
      }
      let response = {
        response: res.response,
        data: config.data
      };
      if (url.indexOf("/file/list") > 0 || url.indexOf("/file/search") > 0 || url.indexOf("/adrive/v1/intelligent/movie") > 0 || url.indexOf("/adrive/v1/intelligent/tv") > 0) {
        handler$3(response);
      }
    });
  };
  var interval;
  function initVideoPlayer(videoFile) {
    let node = $2(".video-previewer--6slx7");
    if (node.length <= 0) {
      if (interval == null) {
        interval = setInterval(function() {
          initVideoPlayer(videoFile);
        }, 200);
      }
      return;
    } else {
      clearInterval(interval);
      interval = null;
    }
    let vInfo = user.getVideoPage();
    vInfo.id = videoFile.file_id;
    if (videoFile.user_meta) {
      try {
        let meta = JSON.parse(videoFile.user_meta);
        if (meta.duration) {
          vInfo.duration = meta.duration;
        }
        if (meta.play_cursor) {
          vInfo.play_cursor = meta.play_cursor;
        }
      } catch (error) {
        console.error(error);
      }
    }
    vInfo.name = videoFile.name;
    vInfo.drive_id = videoFile.drive_id;
    vInfo.thumbnail = videoFile.thumbnail;
    vInfo.folderName = user.getPage().folderName;
    vInfo.type = 0;
    vInfo.href = location.href;
    var app = vue.createApp(VideoPage);
    app.mount(
      (() => {
        const app2 = $2(`<div id="videoPage" class='video-previewer--6slx7'></div>`)[0];
        node.replaceWith(app2);
        return app2;
      })()
    );
    $2(".header-left--Kobd9").on("click", function() {
      app.unmount();
    });
  }
  function homeVideo(videoFile) {
    if (interval != null) {
      clearInterval(interval);
    }
    initVideoPlayer(videoFile);
  }
  function shareVideo$1(videoFile) {
    let node = $2(".video-previewer--Rg9fI");
    if (node.length <= 0) {
      if (interval == null) {
        interval = setInterval(function() {
          shareVideo$1(videoFile);
        }, 200);
      }
      return;
    } else {
      clearInterval(interval);
      interval = null;
    }
    let it = user.getPage().items;
    let index = it.findIndex((item) => {
      return item.file_id == videoFile.file_id;
    });
    console.log(index);
    if (index == -1) {
      elementPlus.ElMessageBox.alert("手速太快啦，请回到文件列表中，随便点击排序，看到已加载多少文件时,在进来吧", "操作页面过快", {
        confirmButtonText: "去排序",
        callback: (action) => {
          location.href = location.href;
        }
      });
      return;
    }
    let v = it[index];
    v.user_meta = "{}";
    let vInfo = user.getVideoPage();
    let list = user.getVideoLookList();
    index = list.findIndex((item) => {
      return item.id == videoFile.file_id;
    });
    if (index != -1) {
      vInfo.play_cursor = list[index].play_cursor;
    }
    vInfo.id = v.file_id;
    vInfo.name = v.name;
    vInfo.thumbnail = v.thumbnail;
    vInfo.type = 1;
    vInfo.folderName = "来自分享";
    vInfo.href = location.href;
    var app = vue.createApp(VideoPage);
    app.mount(
      (() => {
        const app2 = $2(`<div id="videoPage" class='video-previewer--Rg9fI'></div>`)[0];
        node.replaceWith(app2);
        return app2;
      })()
    );
    $2(".header-icon--bJn--").on("click", function() {
      app.unmount();
    });
  }
  function handler$2(res) {
    let response = res.response;
    if (response.category && response.category === "video") {
      homeVideo(response);
    }
  }
  const fileGet = () => {
    http.onResponse(function(res, url) {
      let config = res.config;
      try {
        config.data = JSON.parse(config.data);
      } catch (error) {
        config.data = {};
      }
      let response = {
        response: res.response,
        data: config.data
      };
      if (url.endsWith("/file/get")) {
        handler$2(response);
      }
    });
  };
  function handler$1(res) {
    let response = res.response;
    let shareToken = user.getShareToken();
    if (!user.isExpires(shareToken) || shareToken.share_id != response.share_id) {
      showError("当前页面已过期，请刷新重试");
      return;
    }
    shareVideo$1(response);
  }
  const shareVideo = () => {
    http.onResponse(function(res, url) {
      let config = res.config;
      try {
        config.data = JSON.parse(config.data);
      } catch (error) {
        config.data = {};
      }
      let response = {
        response: res.response,
        data: config.data
      };
      if (url.indexOf("get_video_preview_play_info_by_share") > 0) {
        handler$1(response);
      }
    });
  };
  const fileUpdate = () => {
    http.onRequest(function(req) {
      if (req.url.endsWith("v3/file/update")) {
        let reqbody = JSON.parse(req.data[0]);
        let name2 = reqbody.name;
        let i2 = name2.lastIndexOf(".");
        if (i2 === -1) {
          return;
        }
        let newName = name2.substring(0, i2);
        if (newName.lastIndexOf(".") !== -1) {
          reqbody.name = newName;
          req.data[0] = JSON.stringify(reqbody);
        }
      }
    });
  };
  const logout = () => {
    http.onRequest(function(req) {
      if (req.url.endsWith("/users/v1/users/device_logout")) {
        deviceLogout().then((response) => {
          console.log("用户退出");
        });
      }
    });
  };
  function handler(headers) {
    user.sessionSet(headers["Authorization"], headers["x-device-id"], headers["x-signature"]);
  }
  const session$2 = () => {
    http.onRequest(function(req) {
      let fileId = req.headers["fileId"];
      if (fileId == null && req.headers["x-device-id"] != null) {
        handler(req.headers);
      }
    });
  };
  const xhrHandler = () => {
    fileList();
    fileGet();
    shareVideo();
    fileUpdate();
    logout();
    session$2();
  };
  class XMLHttp {
    constructor() {
      __publicField(this, "request", function(param) {
      });
      __publicField(this, "response", function(param) {
      });
      __publicField(this, "onRequest", function(cal) {
        this.requestListen.push(cal);
      });
      __publicField(this, "onResponse", function(cal) {
        this.responseListen.push(cal);
      });
      this.responseListen = [];
      this.requestListen = [];
    }
  }
  function initXMLHttpRequest(http2) {
    let open = XMLHttpRequest.prototype.open;
    XMLHttpRequest.prototype.open = function(...args) {
      let send = this.send;
      let _this = this;
      let post_data = [];
      this.send = function(...data) {
        post_data = data;
        let dataBody = {
          url: args[1],
          method: args[0],
          headers: {},
          data
        };
        if (_this._header_) {
          dataBody.headers = _this._header_;
        }
        if (_this._header_ && _this._header_["fileId"]) {
          return send.apply(_this, data);
        }
        http2.request(dataBody);
        return send.apply(_this, data);
      };
      this.addEventListener("readystatechange", function() {
        if (this.readyState === 4) {
          let config = {
            url: args[1],
            status: this.status,
            method: args[0],
            data: post_data
          };
          let res = this.response;
          if (_this._header_ && _this._header_["fileId"]) {
            return;
          }
          if (typeof res == "string") {
            try {
              res = JSON.parse(this.response);
            } catch (e) {
            }
          }
          http2.response({ config, response: res, header: _this._header_ });
        }
      }, false);
      return open.apply(this, args);
    };
  }
  const http = new XMLHttp();
  function listen() {
    xhrHandler();
    http.request = function(req) {
      if (this.requestListen.length > 0) {
        this.requestListen.forEach((i2) => {
          i2(req);
        });
      }
    };
    http.response = function(res) {
      if (this.responseListen.length > 0) {
        let config = res.config;
        this.responseListen.forEach((i2) => {
          i2(res, config.url);
        });
      }
    };
    initXMLHttpRequest(http);
  }
  let showDownloadSharePage = function() {
    elementPlus.ElMessageBox.alert("很抱歉，当前官方暂时已下线该功能，如需下载，请先保存后在自己的网盘中获取直链。", {
      confirmButtonText: "确定"
    });
  };
  function initShareButton() {
    if ($2(".button-download-aliyun").length !== 0) {
      $2(".button-download-aliyun").remove();
    }
    if ($2("#root [class^=banner] [class^=right]").length !== 0 && $2(".button--fep7l").length == 0) {
      var html2 = "";
      html2 += `<div style="margin:1px 7px;"></div><button class="${CLASS_NAMES.button}  medium--Pt0UL button-download-aliyun"><p style="color: white;">显示链接<p></button>`;
      $2("#root [class^=banner] [class^=right]").prepend(html2);
      $2(".button-download-aliyun").on("click", showDownloadSharePage);
    } else {
      setTimeout(initShareButton, 1e3);
    }
  }
  const share = () => {
    initShareButton();
  };
  const _hoisted_1$1 = {
    key: 0,
    class: "notice"
  };
  const _hoisted_2 = {
    key: 1,
    class: "notice2"
  };
  const _hoisted_3 = {
    key: 2,
    class: "notice"
  };
  const _sfc_main$1 = {
    __name: "SignInPage",
    setup(__props) {
      const signInSwitch = vue.ref(false);
      const signInSet = vue.ref({
        goods_info: {
          name: "",
          description: "",
          notice: ""
        }
      });
      const isSigIn = vue.computed(() => {
        return isSignIn();
      });
      async function signIn() {
        const data = await signInList();
        if (data.status !== 200) {
          showError$1("签到失败，服务器响应：" + data.status);
          return;
        }
        let signin_count = data.data["result"]["signInCount"];
        console.log(signin_count);
        var reward = await signInReward(signin_count);
        if (data.status !== 200) {
          showError$1("领取奖励失败，服务器响应：" + reward.status);
          return;
        }
        const res = reward.data;
        let rewardName = res["result"]["name"];
        let rewardDescription = res["result"]["description"];
        let rewardNotice = res["result"]["notice"];
        signInSet.value["last_siginIn"] = getNowDate();
        signInSet.value["goods_info"] = {
          name: rewardName,
          description: rewardDescription,
          notice: rewardNotice
        };
        showSuccess(rewardNotice);
        user.setSignInSet(signInSet.value);
      }
      const changeEvent = () => {
        signInSet.value["status"] = signInSwitch.value;
        if (!isSignIn() && signInSwitch.value) {
          signIn();
        }
        user.setSignInSet(signInSet.value);
      };
      function getNowDate() {
        var currentDate = /* @__PURE__ */ new Date();
        var year = currentDate.getFullYear();
        var month = currentDate.getMonth() + 1;
        var day = currentDate.getDate();
        return year + "" + month + day;
      }
      function isSignIn() {
        const now = getNowDate();
        return signInSet.value["last_siginIn"] == now;
      }
      vue.onMounted(async () => {
        let _signInSet = user.getSignInSet();
        if (Object.keys(_signInSet).length > 0) {
          signInSet.value = _signInSet;
        }
        signInSwitch.value = _signInSet["status"] == true;
        if (!isSignIn() && signInSwitch.value) {
          signIn();
        }
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock(vue.Fragment, null, [
          vue.createElementVNode("p", null, [
            isSigIn.value ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_1$1, "今日：已签到")) : vue.createCommentVNode("", true),
            _cache[3] || (_cache[3] = vue.createTextVNode()),
            _cache[4] || (_cache[4] = vue.createElementVNode("br", null, null, -1)),
            !isSigIn.value ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_2, "今日：末签到")) : vue.createCommentVNode("", true),
            isSigIn.value ? (vue.openBlock(), vue.createElementBlock("p", _hoisted_3, [
              vue.createTextVNode(vue.toDisplayString(signInSet.value.goods_info.name), 1),
              _cache[1] || (_cache[1] = vue.createElementVNode("br", null, null, -1)),
              vue.createTextVNode(" " + vue.toDisplayString(signInSet.value.goods_info.description), 1),
              _cache[2] || (_cache[2] = vue.createElementVNode("br", null, null, -1))
            ])) : vue.createCommentVNode("", true)
          ]),
          vue.createVNode(vue.unref(elementPlus.ElForm), { style: { "max-width": "100%" } }, {
            default: vue.withCtx(() => [
              vue.createVNode(vue.unref(elementPlus.ElFormItem), { label: "自动签到" }, {
                default: vue.withCtx(() => [
                  vue.createVNode(vue.unref(elementPlus.ElSwitch), {
                    modelValue: signInSwitch.value,
                    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => signInSwitch.value = $event),
                    "inline-prompt": "",
                    "active-text": "是",
                    "inactive-text": "否",
                    onChange: changeEvent
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
              })
            ]),
            _: 1
          })
        ], 64);
      };
    }
  };
  const SignIn = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["__scopeId", "data-v-f4968c85"]]);
  var globalMenuName;
  function showHomeUi(menuName) {
    globalMenuName = menuName;
    console.log(globalMenuName);
    if (menuName === "文件" || menuName === "收藏夹" || menuName === "密码箱") {
      setTimeout(function() {
        home();
      }, 200);
    }
  }
  function initHomeUi() {
    let menu = $2(".nav-menu--Lm1q6");
    if (menu.length !== 0) {
      $2(".nav-tab-item--WhAQf").on("click", function(e) {
        showHomeUi(e.currentTarget.textContent);
      });
      setTimeout(function() {
        let node = $2(".is-active--8atYr:eq(0)");
        if (node.length > 0) {
          showHomeUi(node.text());
        }
      }, 300);
    } else {
      setTimeout(initHomeUi, 500);
    }
  }
  function signInUi() {
    let storage = $2(".storage-wrapper--h-rcS");
    if (storage.length !== 0) {
      let app = vue.createApp(SignIn);
      app.mount(
        (() => {
          const app2 = document.createElement("div");
          storage.prepend(app2);
          return app2;
        })()
      );
    } else {
      setTimeout(signInUi, 500);
    }
  }
  const ui = () => {
    if (user.home()) {
      initHomeUi();
      signInUi();
    } else {
      share();
    }
  };
  var sessionLoadding = false;
  var listenArray = new Array();
  function retryRequestWithNewCode(originalRequest) {
    let session2 = user.GetSesion();
    originalRequest.headers["Authorization"] = session2.authorization;
    originalRequest.headers["X-Device-Id"] = session2.deviceId;
    originalRequest.headers["X-Signature"] = session2.signature;
    originalRequest.retry = true;
    return axios2(originalRequest);
  }
  let interceptRequest = function() {
    axios2.interceptors.request.use(async function(config) {
      if (config.retry) {
        return config;
      }
      let token = user.getToken();
      if (token == null) {
        showError$1("当前登录凭证获取为空，请刷新或重新登录");
        throw "token 为空了";
      } else if (!user.isExpires(token)) {
        showError$1("Token已失效,请刷新或重新登录");
        throw "Token已失效,请刷新或重新登录";
      }
      let isToken = config.headers._token;
      config.headers["authorization"] = "".concat(token.token_type || "", " ").concat(token.access_token || "");
      config.headers["fileId"] = token.user_id;
      if (isToken != null && isToken == false) {
        delete config.headers._token;
        return config;
      }
      let session_ref = store.getItem("LG_session_Ref");
      if (session_ref != "" && session_ref == "true") {
        await new Promise((resolve, reject) => {
          function check() {
            if (store.getItem("LG_session_Ref") == "") {
              resolve();
            } else {
              setTimeout(check, 200);
            }
          }
          check();
        });
      }
      if (sessionLoadding) {
        await new Promise((resolve, reject) => {
          listenArray.push(function() {
            resolve();
          });
        });
      }
      let d = user.getDeviceId();
      let s2 = user.getSignature();
      if (d == "" || s2 == "") {
        sessionLoadding = true;
        let rest = await user.session(token, function() {
        });
        if (rest.deviceId) {
          d = rest.deviceId;
        }
        if (rest.signature) {
          s2 = rest.signature;
        }
      }
      sessionLoadding = false;
      if (listenArray.length > 0) {
        listenArray.forEach((i2) => {
          i2 && i2();
        });
        listenArray = new Array();
      }
      config.headers["x-device-id"] = d;
      config.headers["x-signature"] = s2;
      return config;
    }, function(error) {
      console.log("出现异常", error);
      return Promise.reject(error);
    });
    axios2.interceptors.response.use(function(response) {
      return response;
    }, function(error) {
      let repsonse = error.response;
      if (repsonse && (repsonse.status == 401 || repsonse.status == 400)) {
        if (user.GetSesion().deviceId != "") {
          user.removeSession();
          return retryRequestWithNewCode(error.config);
        }
      }
      if (repsonse && repsonse.status == 401 && repsonse.data.code == "UserDeviceOffline") {
        user.clearSession();
        showError$1("当前设备已失效，请刷新重试");
        elementPlus.ElMessageBox.alert("请确认是否有下线设备操作，当前设备已失效", "刷新session失败", {
          confirmButtonText: "刷新试一试",
          callback: (action) => {
            location.href = location.href;
          }
        });
      }
      if (repsonse && repsonse.status == 400 && repsonse.data.code == "DeviceSessionSignatureInvalid") {
        user.removeSession();
        elementPlus.ElMessageBox.alert("当前设备session过期,点击刷新session", "session过期", {
          confirmButtonText: "刷新",
          callback: (action) => {
            location.href = location.href;
          }
        });
        error.skip = true;
      }
      if (repsonse && repsonse.status == 400 && repsonse.data.message == "not found device info") {
        user.clearSession();
        showError$1("当前设备已失效，请刷新重试");
        elementPlus.ElMessageBox.alert("请确认是否有下线设备操作，当前设备已失效", "设备失效", {
          confirmButtonText: "刷新试一试",
          callback: (action) => {
            location.href = location.href;
          }
        });
      }
      console.error("错误信息：", error);
      return Promise.reject(error);
    });
  };
  const apiConfig = () => {
    axios2.defaults.baseURL = "https://api.aliyundrive.com";
    interceptRequest();
  };
  var exports$2 = {};
  function isSurrogatePair$1(msg, i2) {
    if ((msg.charCodeAt(i2) & 64512) !== 55296) {
      return false;
    }
    if (i2 < 0 || i2 + 1 >= msg.length) {
      return false;
    }
    return (msg.charCodeAt(i2 + 1) & 64512) === 56320;
  }
  function toArray$1(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === "string") {
      if (!enc) {
        var p = 0;
        for (var i2 = 0; i2 < msg.length; i2++) {
          var c = msg.charCodeAt(i2);
          if (c < 128) {
            res[p++] = c;
          } else if (c < 2048) {
            res[p++] = c >> 6 | 192;
            res[p++] = c & 63 | 128;
          } else if (isSurrogatePair$1(msg, i2)) {
            c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i2) & 1023);
            res[p++] = c >> 18 | 240;
            res[p++] = c >> 12 & 63 | 128;
            res[p++] = c >> 6 & 63 | 128;
            res[p++] = c & 63 | 128;
          } else {
            res[p++] = c >> 12 | 224;
            res[p++] = c >> 6 & 63 | 128;
            res[p++] = c & 63 | 128;
          }
        }
      } else if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (i2 = 0; i2 < msg.length; i2 += 2)
          res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
      }
    } else {
      for (i2 = 0; i2 < msg.length; i2++)
        res[i2] = msg[i2] | 0;
    }
    return res;
  }
  exports$2.toArray = toArray$1;
  function toHex$2(msg) {
    var res = "";
    for (var i2 = 0; i2 < msg.length; i2++)
      res += zero2$1(msg[i2].toString(16));
    return res;
  }
  exports$2.toHex = toHex$2;
  function htonl$1(w) {
    var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
    return res >>> 0;
  }
  exports$2.htonl = htonl$1;
  function toHex32$1(msg, endian) {
    var res = "";
    for (var i2 = 0; i2 < msg.length; i2++) {
      var w = msg[i2];
      if (endian === "little")
        w = htonl$1(w);
      res += zero8$1(w.toString(16));
    }
    return res;
  }
  exports$2.toHex32 = toHex32$1;
  function zero2$1(word) {
    if (word.length === 1)
      return "0" + word;
    else
      return word;
  }
  exports$2.zero2 = zero2$1;
  function zero8$1(word) {
    if (word.length === 7)
      return "0" + word;
    else if (word.length === 6)
      return "00" + word;
    else if (word.length === 5)
      return "000" + word;
    else if (word.length === 4)
      return "0000" + word;
    else if (word.length === 3)
      return "00000" + word;
    else if (word.length === 2)
      return "000000" + word;
    else if (word.length === 1)
      return "0000000" + word;
    else
      return word;
  }
  exports$2.zero8 = zero8$1;
  function join32$1(msg, start2, end, endian) {
    var len2 = end - start2;
    var res = new Array(len2 / 4);
    for (var i2 = 0, k = start2; i2 < res.length; i2++, k += 4) {
      var w;
      if (endian === "big")
        w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
      else
        w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
      res[i2] = w >>> 0;
    }
    return res;
  }
  exports$2.join32 = join32$1;
  function split32$1(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i2 = 0, k = 0; i2 < msg.length; i2++, k += 4) {
      var m = msg[i2];
      if (endian === "big") {
        res[k] = m >>> 24;
        res[k + 1] = m >>> 16 & 255;
        res[k + 2] = m >>> 8 & 255;
        res[k + 3] = m & 255;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = m >>> 16 & 255;
        res[k + 1] = m >>> 8 & 255;
        res[k] = m & 255;
      }
    }
    return res;
  }
  exports$2.split32 = split32$1;
  function rotr32$3(w, b) {
    return w >>> b | w << 32 - b;
  }
  exports$2.rotr32 = rotr32$3;
  function rotl32$3(w, b) {
    return w << b | w >>> 32 - b;
  }
  exports$2.rotl32 = rotl32$3;
  function sum32$5(a, b) {
    return a + b >>> 0;
  }
  exports$2.sum32 = sum32$5;
  function sum32_3$2(a, b, c) {
    return a + b + c >>> 0;
  }
  exports$2.sum32_3 = sum32_3$2;
  function sum32_4$4(a, b, c, d) {
    return a + b + c + d >>> 0;
  }
  exports$2.sum32_4 = sum32_4$4;
  function sum32_5$4(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
  }
  exports$2.sum32_5 = sum32_5$4;
  function sum64$2(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  exports$2.sum64 = sum64$2;
  function sum64_hi$2(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  exports$2.sum64_hi = sum64_hi$2;
  function sum64_lo$2(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  exports$2.sum64_lo = sum64_lo$2;
  function sum64_4_hi$2(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }
  exports$2.sum64_4_hi = sum64_4_hi$2;
  function sum64_4_lo$2(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  exports$2.sum64_4_lo = sum64_4_lo$2;
  function sum64_5_hi$2(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }
  exports$2.sum64_5_hi = sum64_5_hi$2;
  function sum64_5_lo$2(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
  }
  exports$2.sum64_5_lo = sum64_5_lo$2;
  function rotr64_hi$2(ah, al, num) {
    var r2 = al << 32 - num | ah >>> num;
    return r2 >>> 0;
  }
  exports$2.rotr64_hi = rotr64_hi$2;
  function rotr64_lo$2(ah, al, num) {
    var r2 = ah << 32 - num | al >>> num;
    return r2 >>> 0;
  }
  exports$2.rotr64_lo = rotr64_lo$2;
  function shr64_hi$2(ah, al, num) {
    return ah >>> num;
  }
  exports$2.shr64_hi = shr64_hi$2;
  function shr64_lo$2(ah, al, num) {
    var r2 = ah << 32 - num | al >>> num;
    return r2 >>> 0;
  }
  exports$2.shr64_lo = shr64_lo$2;
  exports$2.inherits = function(subClass, superClass) {
    var F = function() {
    };
    F.prototype = superClass.prototype;
    subClass.prototype = new F();
    subClass.prototype.constructor = subClass;
  };
  const utils$n = {
    ...exports$2
  };
  function BlockHash$5() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  BlockHash$5.prototype.update = function update(msg, enc) {
    msg = utils$n.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    if (this.pending.length >= this._delta8) {
      msg = this.pending;
      var r2 = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r2, msg.length);
      if (this.pending.length === 0)
        this.pending = null;
      msg = utils$n.join32(msg, 0, msg.length - r2, this.endian);
      for (var i2 = 0; i2 < msg.length; i2 += this._delta32)
        this._update(msg, i2, i2 + this._delta32);
    }
    return this;
  };
  BlockHash$5.prototype.digest = function digest(enc) {
    this.update(this._pad());
    return this._digest(enc);
  };
  BlockHash$5.prototype._pad = function pad() {
    var len2 = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len2 + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 128;
    for (var i2 = 1; i2 < k; i2++)
      res[i2] = 0;
    len2 <<= 3;
    if (this.endian === "big") {
      for (var t2 = 8; t2 < this.padLength; t2++)
        res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = len2 >>> 24 & 255;
      res[i2++] = len2 >>> 16 & 255;
      res[i2++] = len2 >>> 8 & 255;
      res[i2++] = len2 & 255;
    } else {
      res[i2++] = len2 & 255;
      res[i2++] = len2 >>> 8 & 255;
      res[i2++] = len2 >>> 16 & 255;
      res[i2++] = len2 >>> 24 & 255;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      for (t2 = 8; t2 < this.padLength; t2++)
        res[i2++] = 0;
    }
    return res;
  };
  var rotr32$2 = utils$n.rotr32;
  var exports$1 = {};
  function ft_1$2(s2, x, y, z) {
    if (s2 === 0)
      return ch32$3(x, y, z);
    if (s2 === 1 || s2 === 3)
      return p32$1(x, y, z);
    if (s2 === 2)
      return maj32$3(x, y, z);
  }
  exports$1.ft_1 = ft_1$2;
  function ch32$3(x, y, z) {
    return x & y ^ ~x & z;
  }
  exports$1.ch32 = ch32$3;
  function maj32$3(x, y, z) {
    return x & y ^ x & z ^ y & z;
  }
  exports$1.maj32 = maj32$3;
  function p32$1(x, y, z) {
    return x ^ y ^ z;
  }
  exports$1.p32 = p32$1;
  function s0_256$3(x) {
    return rotr32$2(x, 2) ^ rotr32$2(x, 13) ^ rotr32$2(x, 22);
  }
  exports$1.s0_256 = s0_256$3;
  function s1_256$3(x) {
    return rotr32$2(x, 6) ^ rotr32$2(x, 11) ^ rotr32$2(x, 25);
  }
  exports$1.s1_256 = s1_256$3;
  function g0_256$3(x) {
    return rotr32$2(x, 7) ^ rotr32$2(x, 18) ^ x >>> 3;
  }
  exports$1.g0_256 = g0_256$3;
  function g1_256$3(x) {
    return rotr32$2(x, 17) ^ rotr32$2(x, 19) ^ x >>> 10;
  }
  exports$1.g1_256 = g1_256$3;
  const shaCommon$2 = {
    ...exports$1
  };
  var sum32$4 = utils$n.sum32;
  var sum32_4$3 = utils$n.sum32_4;
  var sum32_5$3 = utils$n.sum32_5;
  var ch32$2 = shaCommon$2.ch32;
  var maj32$2 = shaCommon$2.maj32;
  var s0_256$2 = shaCommon$2.s0_256;
  var s1_256$2 = shaCommon$2.s1_256;
  var g0_256$2 = shaCommon$2.g0_256;
  var g1_256$2 = shaCommon$2.g1_256;
  var sha256_K$1 = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ];
  function SHA256$2() {
    if (!(this instanceof SHA256$2))
      return new SHA256$2();
    BlockHash$5.call(this);
    this.h = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    this.k = sha256_K$1;
    this.W = new Array(64);
  }
  utils$n.inherits(SHA256$2, BlockHash$5);
  SHA256$2.blockSize = 512;
  SHA256$2.outSize = 256;
  SHA256$2.hmacStrength = 192;
  SHA256$2.padLength = 64;
  SHA256$2.prototype._update = function _update(msg, start2) {
    var W = this.W;
    for (var i2 = 0; i2 < 16; i2++)
      W[i2] = msg[start2 + i2];
    for (; i2 < W.length; i2++)
      W[i2] = sum32_4$3(g1_256$2(W[i2 - 2]), W[i2 - 7], g0_256$2(W[i2 - 15]), W[i2 - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f2 = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    for (i2 = 0; i2 < W.length; i2++) {
      var T1 = sum32_5$3(h, s1_256$2(e), ch32$2(e, f2, g), this.k[i2], W[i2]);
      var T2 = sum32$4(s0_256$2(a), maj32$2(a, b, c));
      h = g;
      g = f2;
      f2 = e;
      e = sum32$4(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32$4(T1, T2);
    }
    this.h[0] = sum32$4(this.h[0], a);
    this.h[1] = sum32$4(this.h[1], b);
    this.h[2] = sum32$4(this.h[2], c);
    this.h[3] = sum32$4(this.h[3], d);
    this.h[4] = sum32$4(this.h[4], e);
    this.h[5] = sum32$4(this.h[5], f2);
    this.h[6] = sum32$4(this.h[6], g);
    this.h[7] = sum32$4(this.h[7], h);
  };
  SHA256$2.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$n.toHex32(this.h, "big");
    else
      return utils$n.split32(this.h, "big");
  };
  function safeAdd(x, y) {
    var lsw = (x & 65535) + (y & 65535);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return msw << 16 | lsw & 65535;
  }
  function bitRotateLeft(num, cnt) {
    return num << cnt | num >>> 32 - cnt;
  }
  function md5cmn(q, a, b, x, s2, t2) {
    return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t2)), s2), b);
  }
  function md5ff(a, b, c, d, x, s2, t2) {
    return md5cmn(b & c | ~b & d, a, b, x, s2, t2);
  }
  function md5gg(a, b, c, d, x, s2, t2) {
    return md5cmn(b & d | c & ~d, a, b, x, s2, t2);
  }
  function md5hh(a, b, c, d, x, s2, t2) {
    return md5cmn(b ^ c ^ d, a, b, x, s2, t2);
  }
  function md5ii(a, b, c, d, x, s2, t2) {
    return md5cmn(c ^ (b | ~d), a, b, x, s2, t2);
  }
  function binlMD5(x, len2) {
    x[len2 >> 5] |= 128 << len2 % 32;
    x[(len2 + 64 >>> 9 << 4) + 14] = len2;
    var i2;
    var olda;
    var oldb;
    var oldc;
    var oldd;
    var a = 1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d = 271733878;
    for (i2 = 0; i2 < x.length; i2 += 16) {
      olda = a;
      oldb = b;
      oldc = c;
      oldd = d;
      a = md5ff(a, b, c, d, x[i2], 7, -680876936);
      d = md5ff(d, a, b, c, x[i2 + 1], 12, -389564586);
      c = md5ff(c, d, a, b, x[i2 + 2], 17, 606105819);
      b = md5ff(b, c, d, a, x[i2 + 3], 22, -1044525330);
      a = md5ff(a, b, c, d, x[i2 + 4], 7, -176418897);
      d = md5ff(d, a, b, c, x[i2 + 5], 12, 1200080426);
      c = md5ff(c, d, a, b, x[i2 + 6], 17, -1473231341);
      b = md5ff(b, c, d, a, x[i2 + 7], 22, -45705983);
      a = md5ff(a, b, c, d, x[i2 + 8], 7, 1770035416);
      d = md5ff(d, a, b, c, x[i2 + 9], 12, -1958414417);
      c = md5ff(c, d, a, b, x[i2 + 10], 17, -42063);
      b = md5ff(b, c, d, a, x[i2 + 11], 22, -1990404162);
      a = md5ff(a, b, c, d, x[i2 + 12], 7, 1804603682);
      d = md5ff(d, a, b, c, x[i2 + 13], 12, -40341101);
      c = md5ff(c, d, a, b, x[i2 + 14], 17, -1502002290);
      b = md5ff(b, c, d, a, x[i2 + 15], 22, 1236535329);
      a = md5gg(a, b, c, d, x[i2 + 1], 5, -165796510);
      d = md5gg(d, a, b, c, x[i2 + 6], 9, -1069501632);
      c = md5gg(c, d, a, b, x[i2 + 11], 14, 643717713);
      b = md5gg(b, c, d, a, x[i2], 20, -373897302);
      a = md5gg(a, b, c, d, x[i2 + 5], 5, -701558691);
      d = md5gg(d, a, b, c, x[i2 + 10], 9, 38016083);
      c = md5gg(c, d, a, b, x[i2 + 15], 14, -660478335);
      b = md5gg(b, c, d, a, x[i2 + 4], 20, -405537848);
      a = md5gg(a, b, c, d, x[i2 + 9], 5, 568446438);
      d = md5gg(d, a, b, c, x[i2 + 14], 9, -1019803690);
      c = md5gg(c, d, a, b, x[i2 + 3], 14, -187363961);
      b = md5gg(b, c, d, a, x[i2 + 8], 20, 1163531501);
      a = md5gg(a, b, c, d, x[i2 + 13], 5, -1444681467);
      d = md5gg(d, a, b, c, x[i2 + 2], 9, -51403784);
      c = md5gg(c, d, a, b, x[i2 + 7], 14, 1735328473);
      b = md5gg(b, c, d, a, x[i2 + 12], 20, -1926607734);
      a = md5hh(a, b, c, d, x[i2 + 5], 4, -378558);
      d = md5hh(d, a, b, c, x[i2 + 8], 11, -2022574463);
      c = md5hh(c, d, a, b, x[i2 + 11], 16, 1839030562);
      b = md5hh(b, c, d, a, x[i2 + 14], 23, -35309556);
      a = md5hh(a, b, c, d, x[i2 + 1], 4, -1530992060);
      d = md5hh(d, a, b, c, x[i2 + 4], 11, 1272893353);
      c = md5hh(c, d, a, b, x[i2 + 7], 16, -155497632);
      b = md5hh(b, c, d, a, x[i2 + 10], 23, -1094730640);
      a = md5hh(a, b, c, d, x[i2 + 13], 4, 681279174);
      d = md5hh(d, a, b, c, x[i2], 11, -358537222);
      c = md5hh(c, d, a, b, x[i2 + 3], 16, -722521979);
      b = md5hh(b, c, d, a, x[i2 + 6], 23, 76029189);
      a = md5hh(a, b, c, d, x[i2 + 9], 4, -640364487);
      d = md5hh(d, a, b, c, x[i2 + 12], 11, -421815835);
      c = md5hh(c, d, a, b, x[i2 + 15], 16, 530742520);
      b = md5hh(b, c, d, a, x[i2 + 2], 23, -995338651);
      a = md5ii(a, b, c, d, x[i2], 6, -198630844);
      d = md5ii(d, a, b, c, x[i2 + 7], 10, 1126891415);
      c = md5ii(c, d, a, b, x[i2 + 14], 15, -1416354905);
      b = md5ii(b, c, d, a, x[i2 + 5], 21, -57434055);
      a = md5ii(a, b, c, d, x[i2 + 12], 6, 1700485571);
      d = md5ii(d, a, b, c, x[i2 + 3], 10, -1894986606);
      c = md5ii(c, d, a, b, x[i2 + 10], 15, -1051523);
      b = md5ii(b, c, d, a, x[i2 + 1], 21, -2054922799);
      a = md5ii(a, b, c, d, x[i2 + 8], 6, 1873313359);
      d = md5ii(d, a, b, c, x[i2 + 15], 10, -30611744);
      c = md5ii(c, d, a, b, x[i2 + 6], 15, -1560198380);
      b = md5ii(b, c, d, a, x[i2 + 13], 21, 1309151649);
      a = md5ii(a, b, c, d, x[i2 + 4], 6, -145523070);
      d = md5ii(d, a, b, c, x[i2 + 11], 10, -1120210379);
      c = md5ii(c, d, a, b, x[i2 + 2], 15, 718787259);
      b = md5ii(b, c, d, a, x[i2 + 9], 21, -343485551);
      a = safeAdd(a, olda);
      b = safeAdd(b, oldb);
      c = safeAdd(c, oldc);
      d = safeAdd(d, oldd);
    }
    return [a, b, c, d];
  }
  function binl2rstr(input) {
    var i2;
    var output = "";
    var length32 = input.length * 32;
    for (i2 = 0; i2 < length32; i2 += 8) {
      output += String.fromCharCode(input[i2 >> 5] >>> i2 % 32 & 255);
    }
    return output;
  }
  function rstr2binl(input) {
    var i2;
    var output = [];
    output[(input.length >> 2) - 1] = void 0;
    for (i2 = 0; i2 < output.length; i2 += 1) {
      output[i2] = 0;
    }
    var length8 = input.length * 8;
    for (i2 = 0; i2 < length8; i2 += 8) {
      output[i2 >> 5] |= (input.charCodeAt(i2 / 8) & 255) << i2 % 32;
    }
    return output;
  }
  function rstrMD5(s2) {
    return binl2rstr(binlMD5(rstr2binl(s2), s2.length * 8));
  }
  function rstr2hex(input) {
    var hexTab = "0123456789abcdef";
    var output = "";
    var x;
    var i2;
    for (i2 = 0; i2 < input.length; i2 += 1) {
      x = input.charCodeAt(i2);
      output += hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15);
    }
    return output;
  }
  function str2rstrUTF8(input) {
    return unescape(encodeURIComponent(input));
  }
  function rawMD5(s2) {
    return rstrMD5(str2rstrUTF8(s2));
  }
  function hexMD5(s2) {
    return rstr2hex(rawMD5(s2));
  }
  function md5(string, key2, raw) {
    {
      {
        return hexMD5(string);
      }
    }
  }
  const errors = {
    IMPOSSIBLE_CASE: "Impossible case. Please create issue.",
    TWEAK_ADD: "The tweak was out of range or the resulted private key is invalid",
    TWEAK_MUL: "The tweak was out of range or equal to zero",
    CONTEXT_RANDOMIZE_UNKNOW: "Unknow error on context randomization",
    SECKEY_INVALID: "Private Key is invalid",
    PUBKEY_PARSE: "Public Key could not be parsed",
    PUBKEY_SERIALIZE: "Public Key serialization error",
    PUBKEY_COMBINE: "The sum of the public keys is not valid",
    SIG_PARSE: "Signature could not be parsed",
    SIGN: "The nonce generation function failed, or the private key was invalid",
    RECOVER: "Public key could not be recover",
    ECDH: "Scalar was invalid (zero or overflow)"
  };
  function assert$g(cond, msg) {
    if (!cond) throw new Error(msg);
  }
  function isUint8Array(name2, value, length) {
    assert$g(value instanceof Uint8Array, `Expected ${name2} to be an Uint8Array`);
    if (length !== void 0) {
      if (Array.isArray(length)) {
        const numbers = length.join(", ");
        const msg = `Expected ${name2} to be an Uint8Array with length [${numbers}]`;
        assert$g(length.includes(value.length), msg);
      } else {
        const msg = `Expected ${name2} to be an Uint8Array with length ${length}`;
        assert$g(value.length === length, msg);
      }
    }
  }
  function isCompressed(value) {
    assert$g(toTypeString(value) === "Boolean", "Expected compressed to be a Boolean");
  }
  function getAssertedOutput(output = (len2) => new Uint8Array(len2), length) {
    if (typeof output === "function") output = output(length);
    isUint8Array("output", output, length);
    return output;
  }
  function toTypeString(value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  }
  var lib = (secp256k12) => {
    return {
      contextRandomize(seed) {
        assert$g(
          seed === null || seed instanceof Uint8Array,
          "Expected seed to be an Uint8Array or null"
        );
        if (seed !== null) isUint8Array("seed", seed, 32);
        switch (secp256k12.contextRandomize(seed)) {
          case 1:
            throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW);
        }
      },
      privateKeyVerify(seckey) {
        isUint8Array("private key", seckey, 32);
        return secp256k12.privateKeyVerify(seckey) === 0;
      },
      privateKeyNegate(seckey) {
        isUint8Array("private key", seckey, 32);
        switch (secp256k12.privateKeyNegate(seckey)) {
          case 0:
            return seckey;
          case 1:
            throw new Error(errors.IMPOSSIBLE_CASE);
        }
      },
      privateKeyTweakAdd(seckey, tweak) {
        isUint8Array("private key", seckey, 32);
        isUint8Array("tweak", tweak, 32);
        switch (secp256k12.privateKeyTweakAdd(seckey, tweak)) {
          case 0:
            return seckey;
          case 1:
            throw new Error(errors.TWEAK_ADD);
        }
      },
      privateKeyTweakMul(seckey, tweak) {
        isUint8Array("private key", seckey, 32);
        isUint8Array("tweak", tweak, 32);
        switch (secp256k12.privateKeyTweakMul(seckey, tweak)) {
          case 0:
            return seckey;
          case 1:
            throw new Error(errors.TWEAK_MUL);
        }
      },
      publicKeyVerify(pubkey) {
        isUint8Array("public key", pubkey, [33, 65]);
        return secp256k12.publicKeyVerify(pubkey) === 0;
      },
      publicKeyCreate(seckey, compressed = true, output) {
        isUint8Array("private key", seckey, 32);
        isCompressed(compressed);
        output = getAssertedOutput(output, compressed ? 33 : 65);
        switch (secp256k12.publicKeyCreate(output, seckey)) {
          case 0:
            return output;
          case 1:
            throw new Error(errors.SECKEY_INVALID);
          case 2:
            throw new Error(errors.PUBKEY_SERIALIZE);
        }
      },
      publicKeyConvert(pubkey, compressed = true, output) {
        isUint8Array("public key", pubkey, [33, 65]);
        isCompressed(compressed);
        output = getAssertedOutput(output, compressed ? 33 : 65);
        switch (secp256k12.publicKeyConvert(output, pubkey)) {
          case 0:
            return output;
          case 1:
            throw new Error(errors.PUBKEY_PARSE);
          case 2:
            throw new Error(errors.PUBKEY_SERIALIZE);
        }
      },
      publicKeyNegate(pubkey, compressed = true, output) {
        isUint8Array("public key", pubkey, [33, 65]);
        isCompressed(compressed);
        output = getAssertedOutput(output, compressed ? 33 : 65);
        switch (secp256k12.publicKeyNegate(output, pubkey)) {
          case 0:
            return output;
          case 1:
            throw new Error(errors.PUBKEY_PARSE);
          case 2:
            throw new Error(errors.IMPOSSIBLE_CASE);
          case 3:
            throw new Error(errors.PUBKEY_SERIALIZE);
        }
      },
      publicKeyCombine(pubkeys, compressed = true, output) {
        assert$g(Array.isArray(pubkeys), "Expected public keys to be an Array");
        assert$g(pubkeys.length > 0, "Expected public keys array will have more than zero items");
        for (const pubkey of pubkeys) {
          isUint8Array("public key", pubkey, [33, 65]);
        }
        isCompressed(compressed);
        output = getAssertedOutput(output, compressed ? 33 : 65);
        switch (secp256k12.publicKeyCombine(output, pubkeys)) {
          case 0:
            return output;
          case 1:
            throw new Error(errors.PUBKEY_PARSE);
          case 2:
            throw new Error(errors.PUBKEY_COMBINE);
          case 3:
            throw new Error(errors.PUBKEY_SERIALIZE);
        }
      },
      publicKeyTweakAdd(pubkey, tweak, compressed = true, output) {
        isUint8Array("public key", pubkey, [33, 65]);
        isUint8Array("tweak", tweak, 32);
        isCompressed(compressed);
        output = getAssertedOutput(output, compressed ? 33 : 65);
        switch (secp256k12.publicKeyTweakAdd(output, pubkey, tweak)) {
          case 0:
            return output;
          case 1:
            throw new Error(errors.PUBKEY_PARSE);
          case 2:
            throw new Error(errors.TWEAK_ADD);
        }
      },
      publicKeyTweakMul(pubkey, tweak, compressed = true, output) {
        isUint8Array("public key", pubkey, [33, 65]);
        isUint8Array("tweak", tweak, 32);
        isCompressed(compressed);
        output = getAssertedOutput(output, compressed ? 33 : 65);
        switch (secp256k12.publicKeyTweakMul(output, pubkey, tweak)) {
          case 0:
            return output;
          case 1:
            throw new Error(errors.PUBKEY_PARSE);
          case 2:
            throw new Error(errors.TWEAK_MUL);
        }
      },
      signatureNormalize(sig) {
        isUint8Array("signature", sig, 64);
        switch (secp256k12.signatureNormalize(sig)) {
          case 0:
            return sig;
          case 1:
            throw new Error(errors.SIG_PARSE);
        }
      },
      signatureExport(sig, output) {
        isUint8Array("signature", sig, 64);
        output = getAssertedOutput(output, 72);
        const obj = { output, outputlen: 72 };
        switch (secp256k12.signatureExport(obj, sig)) {
          case 0:
            return output.slice(0, obj.outputlen);
          case 1:
            throw new Error(errors.SIG_PARSE);
          case 2:
            throw new Error(errors.IMPOSSIBLE_CASE);
        }
      },
      signatureImport(sig, output) {
        isUint8Array("signature", sig);
        output = getAssertedOutput(output, 64);
        switch (secp256k12.signatureImport(output, sig)) {
          case 0:
            return output;
          case 1:
            throw new Error(errors.SIG_PARSE);
          case 2:
            throw new Error(errors.IMPOSSIBLE_CASE);
        }
      },
      ecdsaSign(msg32, seckey, options = {}, output) {
        isUint8Array("message", msg32, 32);
        isUint8Array("private key", seckey, 32);
        assert$g(toTypeString(options) === "Object", "Expected options to be an Object");
        if (options.data !== void 0) isUint8Array("options.data", options.data);
        if (options.noncefn !== void 0) assert$g(toTypeString(options.noncefn) === "Function", "Expected options.noncefn to be a Function");
        output = getAssertedOutput(output, 64);
        const obj = { signature: output, recid: null };
        switch (secp256k12.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
          case 0:
            return obj;
          case 1:
            throw new Error(errors.SIGN);
          case 2:
            throw new Error(errors.IMPOSSIBLE_CASE);
        }
      },
      ecdsaVerify(sig, msg32, pubkey) {
        isUint8Array("signature", sig, 64);
        isUint8Array("message", msg32, 32);
        isUint8Array("public key", pubkey, [33, 65]);
        switch (secp256k12.ecdsaVerify(sig, msg32, pubkey)) {
          case 0:
            return true;
          case 3:
            return false;
          case 1:
            throw new Error(errors.SIG_PARSE);
          case 2:
            throw new Error(errors.PUBKEY_PARSE);
        }
      },
      ecdsaRecover(sig, recid, msg32, compressed = true, output) {
        isUint8Array("signature", sig, 64);
        assert$g(
          toTypeString(recid) === "Number" && recid >= 0 && recid <= 3,
          "Expected recovery id to be a Number within interval [0, 3]"
        );
        isUint8Array("message", msg32, 32);
        isCompressed(compressed);
        output = getAssertedOutput(output, compressed ? 33 : 65);
        switch (secp256k12.ecdsaRecover(output, sig, recid, msg32)) {
          case 0:
            return output;
          case 1:
            throw new Error(errors.SIG_PARSE);
          case 2:
            throw new Error(errors.RECOVER);
          case 3:
            throw new Error(errors.IMPOSSIBLE_CASE);
        }
      },
      ecdh(pubkey, seckey, options = {}, output) {
        isUint8Array("public key", pubkey, [33, 65]);
        isUint8Array("private key", seckey, 32);
        assert$g(toTypeString(options) === "Object", "Expected options to be an Object");
        if (options.data !== void 0) isUint8Array("options.data", options.data);
        if (options.hashfn !== void 0) {
          assert$g(toTypeString(options.hashfn) === "Function", "Expected options.hashfn to be a Function");
          if (options.xbuf !== void 0) isUint8Array("options.xbuf", options.xbuf, 32);
          if (options.ybuf !== void 0) isUint8Array("options.ybuf", options.ybuf, 32);
          isUint8Array("output", output);
        } else {
          output = getAssertedOutput(output, 32);
        }
        switch (secp256k12.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
          case 0:
            return output;
          case 1:
            throw new Error(errors.PUBKEY_PARSE);
          case 2:
            throw new Error(errors.ECDH);
        }
      }
    };
  };
  var elliptic$2 = {};
  const name = "elliptic";
  const version = "6.5.7";
  const description = "EC cryptography";
  const main = "lib/elliptic.js";
  const files = [
    "lib"
  ];
  const scripts = {
    lint: "eslint lib test",
    "lint:fix": "npm run lint -- --fix",
    unit: "istanbul test _mocha --reporter=spec test/index.js",
    test: "npm run lint && npm run unit",
    version: "grunt dist && git add dist/"
  };
  const repository = {
    type: "git",
    url: "git@github.com:indutny/elliptic"
  };
  const keywords = [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ];
  const author = "Fedor Indutny <fedor@indutny.com>";
  const license = "MIT";
  const bugs = {
    url: "https://github.com/indutny/elliptic/issues"
  };
  const homepage = "https://github.com/indutny/elliptic";
  const devDependencies = {
    brfs: "^2.0.2",
    coveralls: "^3.1.0",
    eslint: "^7.6.0",
    grunt: "^1.2.1",
    "grunt-browserify": "^5.3.0",
    "grunt-cli": "^1.3.2",
    "grunt-contrib-connect": "^3.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^5.0.0",
    "grunt-mocha-istanbul": "^5.0.2",
    "grunt-saucelabs": "^9.0.1",
    istanbul: "^0.4.5",
    mocha: "^8.0.1"
  };
  const dependencies = {
    "bn.js": "^4.11.9",
    brorand: "^1.1.0",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.1",
    inherits: "^2.0.4",
    "minimalistic-assert": "^1.0.1",
    "minimalistic-crypto-utils": "^1.0.1"
  };
  const require$$0$1 = {
    name,
    version,
    description,
    main,
    files,
    scripts,
    repository,
    keywords,
    author,
    license,
    bugs,
    homepage,
    devDependencies,
    dependencies
  };
  var utils$m = {};
  var bn = { exports: {} };
  const __viteBrowserExternal = {};
  const __viteBrowserExternal$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
    __proto__: null,
    default: __viteBrowserExternal
  }, Symbol.toStringTag, { value: "Module" }));
  const require$$0 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal$1);
  bn.exports;
  (function(module) {
    (function(module2, exports) {
      function assert2(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits2(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN2(number, base2, endian) {
        if (BN2.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base2 === "le" || base2 === "be") {
            endian = base2;
            base2 = 10;
          }
          this._init(number || 0, base2 || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN2;
      } else {
        exports.BN = BN2;
      }
      BN2.BN = BN2;
      BN2.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require$$0.Buffer;
        }
      } catch (e) {
      }
      BN2.isBN = function isBN(num) {
        if (num instanceof BN2) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
      };
      BN2.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN2.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN2.prototype._init = function init(number, base2, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base2, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base2, endian);
        }
        if (base2 === "hex") {
          base2 = 16;
        }
        assert2(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start2 = 0;
        if (number[0] === "-") {
          start2++;
          this.negative = 1;
        }
        if (start2 < number.length) {
          if (base2 === 16) {
            this._parseHex(number, start2, endian);
          } else {
            this._parseBase(number, base2, start2);
            if (endian === "le") {
              this._initArray(this.toArray(), base2, endian);
            }
          }
        }
      };
      BN2.prototype._initNumber = function _initNumber(number, base2, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert2(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base2, endian);
      };
      BN2.prototype._initArray = function _initArray(number, base2, endian) {
        assert2(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i2 = number.length - 1, j = 0; i2 >= 0; i2 -= 3) {
            w = number[i2] | number[i2 - 1] << 8 | number[i2 - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i2 = 0, j = 0; i2 < number.length; i2 += 3) {
            w = number[i2] | number[i2 + 1] << 8 | number[i2 + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          return c - 48 & 15;
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN2.prototype._parseHex = function _parseHex(number, start2, endian) {
        this.length = Math.ceil((number.length - start2) / 6);
        this.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          this.words[i2] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i2 = number.length - 1; i2 >= start2; i2 -= 2) {
            w = parseHexByte(number, start2, i2) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start2;
          for (i2 = parseLength % 2 === 0 ? start2 + 1 : start2; i2 < number.length; i2 += 2) {
            w = parseHexByte(number, start2, i2) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this.strip();
      };
      function parseBase(str, start2, end, mul) {
        var r2 = 0;
        var len2 = Math.min(str.length, end);
        for (var i2 = start2; i2 < len2; i2++) {
          var c = str.charCodeAt(i2) - 48;
          r2 *= mul;
          if (c >= 49) {
            r2 += c - 49 + 10;
          } else if (c >= 17) {
            r2 += c - 17 + 10;
          } else {
            r2 += c;
          }
        }
        return r2;
      }
      BN2.prototype._parseBase = function _parseBase(number, base2, start2) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base2 | 0;
        var total = number.length - start2;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start2;
        var word = 0;
        for (var i2 = start2; i2 < end; i2 += limbLen) {
          word = parseBase(number, i2, i2 + limbLen, base2);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i2, number.length, base2);
          for (i2 = 0; i2 < mod; i2++) {
            pow *= base2;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this.strip();
      };
      BN2.prototype.copy = function copy2(dest) {
        dest.words = new Array(this.length);
        for (var i2 = 0; i2 < this.length; i2++) {
          dest.words[i2] = this.words[i2];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN2.prototype.clone = function clone() {
        var r2 = new BN2(null);
        this.copy(r2);
        return r2;
      };
      BN2.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN2.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN2.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN2.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN2.prototype.toString = function toString2(base2, padding) {
        base2 = base2 || 10;
        padding = padding | 0 || 1;
        var out;
        if (base2 === 16 || base2 === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i2 = 0; i2 < this.length; i2++) {
            var w = this.words[i2];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i2 !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i2--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
          var groupSize = groupSizes[base2];
          var groupBase = groupBases[base2];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modn(groupBase).toString(base2);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert2(false, "Base should be between 2 and 36");
      };
      BN2.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert2(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN2.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN2.prototype.toBuffer = function toBuffer(endian, length) {
        assert2(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN2.prototype.toArray = function toArray2(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength2 = this.byteLength();
        var reqLength = length || Math.max(1, byteLength2);
        assert2(byteLength2 <= reqLength, "byte array longer than desired length");
        assert2(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i2;
        var q = this.clone();
        if (!littleEndian) {
          for (i2 = 0; i2 < reqLength - byteLength2; i2++) {
            res[i2] = 0;
          }
          for (i2 = 0; !q.isZero(); i2++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i2 - 1] = b;
          }
        } else {
          for (i2 = 0; !q.isZero(); i2++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i2] = b;
          }
          for (; i2 < reqLength; i2++) {
            res[i2] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN2.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN2.prototype._countBits = function _countBits(w) {
          var t2 = w;
          var r2 = 0;
          if (t2 >= 4096) {
            r2 += 13;
            t2 >>>= 13;
          }
          if (t2 >= 64) {
            r2 += 7;
            t2 >>>= 7;
          }
          if (t2 >= 8) {
            r2 += 4;
            t2 >>>= 4;
          }
          if (t2 >= 2) {
            r2 += 2;
            t2 >>>= 2;
          }
          return r2 + t2;
        };
      }
      BN2.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t2 = w;
        var r2 = 0;
        if ((t2 & 8191) === 0) {
          r2 += 13;
          t2 >>>= 13;
        }
        if ((t2 & 127) === 0) {
          r2 += 7;
          t2 >>>= 7;
        }
        if ((t2 & 15) === 0) {
          r2 += 4;
          t2 >>>= 4;
        }
        if ((t2 & 3) === 0) {
          r2 += 2;
          t2 >>>= 2;
        }
        if ((t2 & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN2.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN2.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r2 = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var b = this._zeroBits(this.words[i2]);
          r2 += b;
          if (b !== 26) break;
        }
        return r2;
      };
      BN2.prototype.byteLength = function byteLength2() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN2.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN2.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN2.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN2.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN2.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN2.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i2 = 0; i2 < num.length; i2++) {
          this.words[i2] = this.words[i2] | num.words[i2];
        }
        return this.strip();
      };
      BN2.prototype.ior = function ior(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN2.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN2.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN2.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = this.words[i2] & num.words[i2];
        }
        this.length = b.length;
        return this.strip();
      };
      BN2.prototype.iand = function iand(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN2.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN2.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN2.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i2 = 0; i2 < b.length; i2++) {
          this.words[i2] = a.words[i2] ^ b.words[i2];
        }
        if (this !== a) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN2.prototype.ixor = function ixor(num) {
        assert2((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN2.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN2.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN2.prototype.inotn = function inotn(width) {
        assert2(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i2 = 0; i2 < bytesNeeded; i2++) {
          this.words[i2] = ~this.words[i2] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i2] = ~this.words[i2] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN2.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN2.prototype.setn = function setn(bit, val) {
        assert2(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN2.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r2 = (a.words[i2] | 0) + (b.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r2 = (a.words[i2] | 0) + carry;
          this.words[i2] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        return this;
      };
      BN2.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN2.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i2 = 0; i2 < b.length; i2++) {
          r2 = (a.words[i2] | 0) - (b.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        for (; carry !== 0 && i2 < a.length; i2++) {
          r2 = (a.words[i2] | 0) + carry;
          carry = r2 >> 26;
          this.words[i2] = r2 & 67108863;
        }
        if (carry === 0 && i2 < a.length && a !== this) {
          for (; i2 < a.length; i2++) {
            this.words[i2] = a.words[i2];
          }
        }
        this.length = Math.max(this.length, i2);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN2.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len2 = self2.length + num.length | 0;
        out.length = len2;
        len2 = len2 - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r2 = a * b;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len2; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i2 = k - j | 0;
            a = self2.words[i2] | 0;
            b = num.words[j] | 0;
            r2 = a * b + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i2 = k - j;
            var a = self2.words[i2] | 0;
            var b = num.words[j] | 0;
            var r2 = a * b;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN2.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len2 = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len2 < 63) {
          res = smallMulTo(this, num, out);
        } else if (len2 < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t2 = new Array(N);
        var l = BN2.prototype._countBits(N) - 1;
        for (var i2 = 0; i2 < N; i2++) {
          t2[i2] = this.revBin(i2, l, N);
        }
        return t2;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for (var i2 = 0; i2 < l; i2++) {
          rb |= (x & 1) << l - i2 - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i2 = 0; i2 < N; i2++) {
          rtws[i2] = rws[rbt[i2]];
          itws[i2] = iws[rbt[i2]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s2 = 1; s2 < N; s2 <<= 1) {
          var l = s2 << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s2; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s2];
              var io = itws[p + j + s2];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s2] = re - ro;
              itws[p + j + s2] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i2 = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i2++;
        }
        return 1 << i2 + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for (var i2 = 0; i2 < N / 2; i2++) {
          var t2 = rws[i2];
          rws[i2] = rws[N - i2 - 1];
          rws[N - i2 - 1] = t2;
          t2 = iws[i2];
          iws[i2] = -iws[N - i2 - 1];
          iws[N - i2 - 1] = -t2;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i2 = 0; i2 < N / 2; i2++) {
          var w = Math.round(ws[2 * i2 + 1] / N) * 8192 + Math.round(ws[2 * i2] / N) + carry;
          ws[i2] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len2, rws, N) {
        var carry = 0;
        for (var i2 = 0; i2 < len2; i2++) {
          carry = carry + (ws[i2] | 0);
          rws[2 * i2] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i2 + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i2 = 2 * len2; i2 < N; ++i2) {
          rws[i2] = 0;
        }
        assert2(carry === 0);
        assert2((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i2 = 0; i2 < N; i2++) {
          ph[i2] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i2 = 0; i2 < N; i2++) {
          var rx = rwst[i2] * nrwst[i2] - iwst[i2] * niwst[i2];
          iwst[i2] = rwst[i2] * niwst[i2] + iwst[i2] * nrwst[i2];
          rwst[i2] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN2.prototype.mul = function mul(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN2.prototype.mulf = function mulf(num) {
        var out = new BN2(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN2.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN2.prototype.imuln = function imuln(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        var carry = 0;
        for (var i2 = 0; i2 < this.length; i2++) {
          var w = (this.words[i2] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i2] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN2.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN2.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN2.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN2.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN2(1);
        var res = this;
        for (var i2 = 0; i2 < w.length; i2++, res = res.sqr()) {
          if (w[i2] !== 0) break;
        }
        if (++i2 < w.length) {
          for (var q = res.sqr(); i2 < w.length; i2++, q = q.sqr()) {
            if (w[i2] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN2.prototype.iushln = function iushln(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i2;
        if (r2 !== 0) {
          var carry = 0;
          for (i2 = 0; i2 < this.length; i2++) {
            var newCarry = this.words[i2] & carryMask;
            var c = (this.words[i2] | 0) - newCarry << r2;
            this.words[i2] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i2] = carry;
            this.length++;
          }
        }
        if (s2 !== 0) {
          for (i2 = this.length - 1; i2 >= 0; i2--) {
            this.words[i2 + s2] = this.words[i2];
          }
          for (i2 = 0; i2 < s2; i2++) {
            this.words[i2] = 0;
          }
          this.length += s2;
        }
        return this.strip();
      };
      BN2.prototype.ishln = function ishln(bits) {
        assert2(this.negative === 0);
        return this.iushln(bits);
      };
      BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert2(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s2 = Math.min((bits - r2) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s2;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i2 = 0; i2 < s2; i2++) {
            maskedWords.words[i2] = this.words[i2];
          }
          maskedWords.length = s2;
        }
        if (s2 === 0) ;
        else if (this.length > s2) {
          this.length -= s2;
          for (i2 = 0; i2 < this.length; i2++) {
            this.words[i2] = this.words[i2 + s2];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i2 = this.length - 1; i2 >= 0 && (carry !== 0 || i2 >= h); i2--) {
          var word = this.words[i2] | 0;
          this.words[i2] = carry << 26 - r2 | word >>> r2;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert2(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN2.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN2.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN2.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN2.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN2.prototype.testn = function testn(bit) {
        assert2(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s2) return false;
        var w = this.words[s2];
        return !!(w & q);
      };
      BN2.prototype.imaskn = function imaskn(bits) {
        assert2(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s2 = (bits - r2) / 26;
        assert2(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s2) {
          return this;
        }
        if (r2 !== 0) {
          s2++;
        }
        this.length = Math.min(s2, this.length);
        if (r2 !== 0) {
          var mask = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN2.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN2.prototype.iaddn = function iaddn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN2.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i2 = 0; i2 < this.length && this.words[i2] >= 67108864; i2++) {
          this.words[i2] -= 67108864;
          if (i2 === this.length - 1) {
            this.words[i2 + 1] = 1;
          } else {
            this.words[i2 + 1]++;
          }
        }
        this.length = Math.max(this.length, i2 + 1);
        return this;
      };
      BN2.prototype.isubn = function isubn(num) {
        assert2(typeof num === "number");
        assert2(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i2 = 0; i2 < this.length && this.words[i2] < 0; i2++) {
            this.words[i2] += 67108864;
            this.words[i2 + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN2.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN2.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN2.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN2.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len2 = num.length + shift;
        var i2;
        this._expand(len2);
        var w;
        var carry = 0;
        for (i2 = 0; i2 < num.length; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          var right = (num.words[i2] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i2 + shift] = w & 67108863;
        }
        for (; i2 < this.length - shift; i2++) {
          w = (this.words[i2 + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i2 + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        assert2(carry === -1);
        carry = 0;
        for (i2 = 0; i2 < this.length; i2++) {
          w = -(this.words[i2] | 0) + carry;
          carry = w >> 26;
          this.words[i2] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN2.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN2(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i2 = 0; i2 < q.length; i2++) {
            q.words[i2] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN2.prototype.divmod = function divmod(num, mode, positive) {
        assert2(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN2(0),
            mod: new BN2(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN2(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN2(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN2(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN2.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN2.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN2.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN2.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN2.prototype.modn = function modn(num) {
        assert2(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          acc = (p * acc + (this.words[i2] | 0)) % num;
        }
        return acc;
      };
      BN2.prototype.idivn = function idivn(num) {
        assert2(num <= 67108863);
        var carry = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var w = (this.words[i2] | 0) + carry * 67108864;
          this.words[i2] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN2.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN2.prototype.egcd = function egcd(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN2(1);
        var B = new BN2(0);
        var C = new BN2(0);
        var D = new BN2(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i2 = 0, im = 1; (x.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
          if (i2 > 0) {
            x.iushrn(i2);
            while (i2-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN2.prototype._invmp = function _invmp(p) {
        assert2(p.negative === 0);
        assert2(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN2(1);
        var x2 = new BN2(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i2 = 0, im = 1; (a.words[0] & im) === 0 && i2 < 26; ++i2, im <<= 1) ;
          if (i2 > 0) {
            a.iushrn(i2);
            while (i2-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN2.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r2 = a.cmp(b);
          if (r2 < 0) {
            var t2 = a;
            a = b;
            b = t2;
          } else if (r2 === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN2.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN2.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN2.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN2.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN2.prototype.bincn = function bincn(bit) {
        assert2(typeof bit === "number");
        var r2 = bit % 26;
        var s2 = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s2) {
          this._expand(s2 + 1);
          this.words[s2] |= q;
          return this;
        }
        var carry = q;
        for (var i2 = s2; carry !== 0 && i2 < this.length; i2++) {
          var w = this.words[i2] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i2] = w;
        }
        if (carry !== 0) {
          this.words[i2] = carry;
          this.length++;
        }
        return this;
      };
      BN2.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN2.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert2(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN2.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i2 = this.length - 1; i2 >= 0; i2--) {
          var a = this.words[i2] | 0;
          var b = num.words[i2] | 0;
          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN2.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN2.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN2.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN2.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN2.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN2.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN2.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN2.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN2.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN2.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN2.red = function red(num) {
        return new Red(num);
      };
      BN2.prototype.toRed = function toRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        assert2(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN2.prototype.fromRed = function fromRed() {
        assert2(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN2.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN2.prototype.forceRed = function forceRed(ctx) {
        assert2(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN2.prototype.redAdd = function redAdd(num) {
        assert2(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN2.prototype.redIAdd = function redIAdd(num) {
        assert2(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN2.prototype.redSub = function redSub(num) {
        assert2(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN2.prototype.redISub = function redISub(num) {
        assert2(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN2.prototype.redShl = function redShl(num) {
        assert2(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN2.prototype.redMul = function redMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN2.prototype.redIMul = function redIMul(num) {
        assert2(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN2.prototype.redSqr = function redSqr() {
        assert2(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN2.prototype.redISqr = function redISqr() {
        assert2(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN2.prototype.redSqrt = function redSqrt() {
        assert2(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN2.prototype.redInvm = function redInvm() {
        assert2(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN2.prototype.redNeg = function redNeg() {
        assert2(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN2.prototype.redPow = function redPow(num) {
        assert2(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name2, p) {
        this.name = name2;
        this.p = new BN2(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN2(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN2(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits2(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i2 = 0; i2 < outLen; i2++) {
          output.words[i2] = input.words[i2];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i2 = 10; i2 < input.length; i2++) {
          var next = input.words[i2] | 0;
          input.words[i2 - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i2 - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var w = num.words[i2] | 0;
          lo += w * 977;
          num.words[i2] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits2(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits2(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits2(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i2 = 0; i2 < num.length; i2++) {
          var hi = (num.words[i2] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i2] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN2._prime = function prime(name2) {
        if (primes[name2]) return primes[name2];
        var prime2;
        if (name2 === "k256") {
          prime2 = new K256();
        } else if (name2 === "p224") {
          prime2 = new P224();
        } else if (name2 === "p192") {
          prime2 = new P192();
        } else if (name2 === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name2);
        }
        primes[name2] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN2._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert2(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert2(a.negative === 0, "red works only with positives");
        assert2(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert2((a.negative | b.negative) === 0, "red works only with positives");
        assert2(
          a.red && a.red === b.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert2(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN2(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s2 = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s2++;
          q.iushrn(1);
        }
        assert2(!q.isZero());
        var one = new BN2(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN2(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t2 = this.pow(a, q);
        var m = s2;
        while (t2.cmp(one) !== 0) {
          var tmp = t2;
          for (var i2 = 0; tmp.cmp(one) !== 0; i2++) {
            tmp = tmp.redSqr();
          }
          assert2(i2 < m);
          var b = this.pow(c, new BN2(1).iushln(m - i2 - 1));
          r2 = r2.redMul(b);
          c = b.redSqr();
          t2 = t2.redMul(c);
          m = i2;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN2(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN2(1).toRed(this);
        wnd[1] = a;
        for (var i2 = 2; i2 < wnd.length; i2++) {
          wnd[i2] = this.mul(wnd[i2 - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start2 = num.bitLength() % 26;
        if (start2 === 0) {
          start2 = 26;
        }
        for (i2 = num.length - 1; i2 >= 0; i2--) {
          var word = num.words[i2];
          for (var j = start2 - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i2 !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start2 = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN2.mont = function mont2(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN2(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits2(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t2 = a.imul(b);
        var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t2.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN2(0)._forceRed(this);
        var t2 = a.mul(b);
        var c = t2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t2.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal);
  })(bn);
  var bnExports = bn.exports;
  var minimalisticAssert = assert$f;
  function assert$f(val, msg) {
    if (!val)
      throw new Error(msg || "Assertion failed");
  }
  assert$f.equal = function assertEqual(l, r2, msg) {
    if (l != r2)
      throw new Error(msg || "Assertion failed: " + l + " != " + r2);
  };
  var utils$l = {};
  (function(exports) {
    var utils2 = exports;
    function toArray2(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== "string") {
        for (var i2 = 0; i2 < msg.length; i2++)
          res[i2] = msg[i2] | 0;
        return res;
      }
      if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (var i2 = 0; i2 < msg.length; i2 += 2)
          res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
      } else {
        for (var i2 = 0; i2 < msg.length; i2++) {
          var c = msg.charCodeAt(i2);
          var hi = c >> 8;
          var lo = c & 255;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils2.toArray = toArray2;
    function zero22(word) {
      if (word.length === 1)
        return "0" + word;
      else
        return word;
    }
    utils2.zero2 = zero22;
    function toHex2(msg) {
      var res = "";
      for (var i2 = 0; i2 < msg.length; i2++)
        res += zero22(msg[i2].toString(16));
      return res;
    }
    utils2.toHex = toHex2;
    utils2.encode = function encode(arr, enc) {
      if (enc === "hex")
        return toHex2(arr);
      else
        return arr;
    };
  })(utils$l);
  (function(exports) {
    var utils2 = exports;
    var BN2 = bnExports;
    var minAssert = minimalisticAssert;
    var minUtils = utils$l;
    utils2.assert = minAssert;
    utils2.toArray = minUtils.toArray;
    utils2.zero2 = minUtils.zero2;
    utils2.toHex = minUtils.toHex;
    utils2.encode = minUtils.encode;
    function getNAF2(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      var i2;
      for (i2 = 0; i2 < naf.length; i2 += 1) {
        naf[i2] = 0;
      }
      var ws = 1 << w + 1;
      var k = num.clone();
      for (i2 = 0; i2 < naf.length; i2++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }
        naf[i2] = z;
        k.iushrn(1);
      }
      return naf;
    }
    utils2.getNAF = getNAF2;
    function getJSF2(k1, k2) {
      var jsf = [
        [],
        []
      ];
      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = k1.andln(7) + d1 & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = k2.andln(7) + d2 & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }
      return jsf;
    }
    utils2.getJSF = getJSF2;
    function cachedProperty2(obj, name2, computer) {
      var key2 = "_" + name2;
      obj.prototype[name2] = function cachedProperty3() {
        return this[key2] !== void 0 ? this[key2] : this[key2] = computer.call(this);
      };
    }
    utils2.cachedProperty = cachedProperty2;
    function parseBytes2(bytes) {
      return typeof bytes === "string" ? utils2.toArray(bytes, "hex") : bytes;
    }
    utils2.parseBytes = parseBytes2;
    function intFromLE(bytes) {
      return new BN2(bytes, "hex", "le");
    }
    utils2.intFromLE = intFromLE;
  })(utils$m);
  var brorand = { exports: {} };
  var r$1;
  brorand.exports = function rand2(len2) {
    if (!r$1)
      r$1 = new Rand(null);
    return r$1.generate(len2);
  };
  function Rand(rand2) {
    this.rand = rand2;
  }
  brorand.exports.Rand = Rand;
  Rand.prototype.generate = function generate(len2) {
    return this._rand(len2);
  };
  Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes)
      return this.rand.getBytes(n);
    var res = new Uint8Array(n);
    for (var i2 = 0; i2 < res.length; i2++)
      res[i2] = this.rand.getByte();
    return res;
  };
  if (typeof self === "object") {
    if (self.crypto && self.crypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
      };
    } else if (self.msCrypto && self.msCrypto.getRandomValues) {
      Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
      };
    } else if (typeof window === "object") {
      Rand.prototype._rand = function() {
        throw new Error("Not implemented yet");
      };
    }
  } else {
    try {
      var crypto$1 = require$$0;
      if (typeof crypto$1.randomBytes !== "function")
        throw new Error("Not supported");
      Rand.prototype._rand = function _rand(n) {
        return crypto$1.randomBytes(n);
      };
    } catch (e) {
    }
  }
  var brorandExports = brorand.exports;
  var curve = {};
  var BN$8 = bnExports;
  var utils$k = utils$m;
  var getNAF = utils$k.getNAF;
  var getJSF = utils$k.getJSF;
  var assert$e = utils$k.assert;
  function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN$8(conf.p, 16);
    this.red = conf.prime ? BN$8.red(conf.prime) : BN$8.mont(this.p);
    this.zero = new BN$8(0).toRed(this.red);
    this.one = new BN$8(1).toRed(this.red);
    this.two = new BN$8(2).toRed(this.red);
    this.n = conf.n && new BN$8(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) {
      this.redN = null;
    } else {
      this._maxwellTrick = true;
      this.redN = this.n.toRed(this.red);
    }
  }
  var base = BaseCurve;
  BaseCurve.prototype.point = function point() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype.validate = function validate() {
    throw new Error("Not implemented");
  };
  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert$e(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    var repr = [];
    var j;
    var nafW;
    for (j = 0; j < naf.length; j += doubles.step) {
      nafW = 0;
      for (var l = j + doubles.step - 1; l >= j; l--)
        nafW = (nafW << 1) + naf[l];
      repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for (var i2 = I; i2 > 0; i2--) {
      for (j = 0; j < repr.length; j++) {
        nafW = repr[j];
        if (nafW === i2)
          b = b.mixedAdd(doubles.points[j]);
        else if (nafW === -i2)
          b = b.mixedAdd(doubles.points[j].neg());
      }
      a = a.add(b);
    }
    return a.toP();
  };
  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    var naf = getNAF(k, w, this._bitLength);
    var acc = this.jpoint(null, null, null);
    for (var i2 = naf.length - 1; i2 >= 0; i2--) {
      for (var l = 0; i2 >= 0 && naf[i2] === 0; i2--)
        l++;
      if (i2 >= 0)
        l++;
      acc = acc.dblp(l);
      if (i2 < 0)
        break;
      var z = naf[i2];
      assert$e(z !== 0);
      if (p.type === "affine") {
        if (z > 0)
          acc = acc.mixedAdd(wnd[z - 1 >> 1]);
        else
          acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
      } else {
        if (z > 0)
          acc = acc.add(wnd[z - 1 >> 1]);
        else
          acc = acc.add(wnd[-z - 1 >> 1].neg());
      }
    }
    return p.type === "affine" ? acc.toP() : acc;
  };
  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len2, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    var max = 0;
    var i2;
    var j;
    var p;
    for (i2 = 0; i2 < len2; i2++) {
      p = points[i2];
      var nafPoints = p._getNAFPoints(defW);
      wndWidth[i2] = nafPoints.wnd;
      wnd[i2] = nafPoints.points;
    }
    for (i2 = len2 - 1; i2 >= 1; i2 -= 2) {
      var a = i2 - 1;
      var b = i2;
      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
        naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
        naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
        max = Math.max(naf[a].length, max);
        max = Math.max(naf[b].length, max);
        continue;
      }
      var comb = [
        points[a],
        /* 1 */
        null,
        /* 3 */
        null,
        /* 5 */
        points[b]
        /* 7 */
      ];
      if (points[a].y.cmp(points[b].y) === 0) {
        comb[1] = points[a].add(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].add(points[b].neg());
      } else {
        comb[1] = points[a].toJ().mixedAdd(points[b]);
        comb[2] = points[a].toJ().mixedAdd(points[b].neg());
      }
      var index = [
        -3,
        /* -1 -1 */
        -1,
        /* -1 0 */
        -5,
        /* -1 1 */
        -7,
        /* 0 -1 */
        0,
        /* 0 0 */
        7,
        /* 0 1 */
        5,
        /* 1 -1 */
        1,
        /* 1 0 */
        3
        /* 1 1 */
      ];
      var jsf = getJSF(coeffs[a], coeffs[b]);
      max = Math.max(jsf[0].length, max);
      naf[a] = new Array(max);
      naf[b] = new Array(max);
      for (j = 0; j < max; j++) {
        var ja = jsf[0][j] | 0;
        var jb = jsf[1][j] | 0;
        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
        naf[b][j] = 0;
        wnd[a] = comb;
      }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for (i2 = max; i2 >= 0; i2--) {
      var k = 0;
      while (i2 >= 0) {
        var zero = true;
        for (j = 0; j < len2; j++) {
          tmp[j] = naf[j][i2] | 0;
          if (tmp[j] !== 0)
            zero = false;
        }
        if (!zero)
          break;
        k++;
        i2--;
      }
      if (i2 >= 0)
        k++;
      acc = acc.dblp(k);
      if (i2 < 0)
        break;
      for (j = 0; j < len2; j++) {
        var z = tmp[j];
        if (z === 0)
          continue;
        else if (z > 0)
          p = wnd[j][z - 1 >> 1];
        else if (z < 0)
          p = wnd[j][-z - 1 >> 1].neg();
        if (p.type === "affine")
          acc = acc.mixedAdd(p);
        else
          acc = acc.add(p);
      }
    }
    for (i2 = 0; i2 < len2; i2++)
      wnd[i2] = null;
    if (jacobianResult)
      return acc;
    else
      return acc.toP();
  };
  function BasePoint(curve2, type) {
    this.curve = curve2;
    this.type = type;
    this.precomputed = null;
  }
  BaseCurve.BasePoint = BasePoint;
  BasePoint.prototype.eq = function eq() {
    throw new Error("Not implemented");
  };
  BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
  };
  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils$k.toArray(bytes, enc);
    var len2 = this.p.byteLength();
    if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len2) {
      if (bytes[0] === 6)
        assert$e(bytes[bytes.length - 1] % 2 === 0);
      else if (bytes[0] === 7)
        assert$e(bytes[bytes.length - 1] % 2 === 1);
      var res = this.point(
        bytes.slice(1, 1 + len2),
        bytes.slice(1 + len2, 1 + 2 * len2)
      );
      return res;
    } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len2) {
      return this.pointFromX(bytes.slice(1, 1 + len2), bytes[0] === 3);
    }
    throw new Error("Unknown point format");
  };
  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
  };
  BasePoint.prototype._encode = function _encode(compact) {
    var len2 = this.curve.p.byteLength();
    var x = this.getX().toArray("be", len2);
    if (compact)
      return [this.getY().isEven() ? 2 : 3].concat(x);
    return [4].concat(x, this.getY().toArray("be", len2));
  };
  BasePoint.prototype.encode = function encode(enc, compact) {
    return utils$k.encode(this._encode(compact), enc);
  };
  BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed)
      return this;
    var precomputed = {
      doubles: null,
      naf: null,
      beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
  };
  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed)
      return false;
    var doubles = this.precomputed.doubles;
    if (!doubles)
      return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
  };
  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles)
      return this.precomputed.doubles;
    var doubles = [this];
    var acc = this;
    for (var i2 = 0; i2 < power; i2 += step) {
      for (var j = 0; j < step; j++)
        acc = acc.dbl();
      doubles.push(acc);
    }
    return {
      step,
      points: doubles
    };
  };
  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf)
      return this.precomputed.naf;
    var res = [this];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for (var i2 = 1; i2 < max; i2++)
      res[i2] = res[i2 - 1].add(dbl);
    return {
      wnd,
      points: res
    };
  };
  BasePoint.prototype._getBeta = function _getBeta() {
    return null;
  };
  BasePoint.prototype.dblp = function dblp(k) {
    var r2 = this;
    for (var i2 = 0; i2 < k; i2++)
      r2 = r2.dbl();
    return r2;
  };
  var inherits_browser = { exports: {} };
  if (typeof Object.create === "function") {
    inherits_browser.exports = function inherits2(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    inherits_browser.exports = function inherits2(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
  var inherits_browserExports = inherits_browser.exports;
  var utils$j = utils$m;
  var BN$7 = bnExports;
  var inherits$3 = inherits_browserExports;
  var Base$2 = base;
  var assert$d = utils$j.assert;
  function ShortCurve(conf) {
    Base$2.call(this, "short", conf);
    this.a = new BN$7(conf.a, 16).toRed(this.red);
    this.b = new BN$7(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
  }
  inherits$3(ShortCurve, Base$2);
  var short = ShortCurve;
  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
      return;
    var beta;
    var lambda;
    if (conf.beta) {
      beta = new BN$7(conf.beta, 16).toRed(this.red);
    } else {
      var betas = this._getEndoRoots(this.p);
      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
      beta = beta.toRed(this.red);
    }
    if (conf.lambda) {
      lambda = new BN$7(conf.lambda, 16);
    } else {
      var lambdas = this._getEndoRoots(this.n);
      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
        lambda = lambdas[0];
      } else {
        lambda = lambdas[1];
        assert$d(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
      }
    }
    var basis;
    if (conf.basis) {
      basis = conf.basis.map(function(vec) {
        return {
          a: new BN$7(vec.a, 16),
          b: new BN$7(vec.b, 16)
        };
      });
    } else {
      basis = this._getEndoBasis(lambda);
    }
    return {
      beta,
      lambda,
      basis
    };
  };
  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    var red = num === this.p ? this.red : BN$7.mont(num);
    var tinv = new BN$7(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s2 = new BN$7(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s2).fromRed();
    var l2 = ntinv.redSub(s2).fromRed();
    return [l1, l2];
  };
  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN$7(1);
    var y1 = new BN$7(0);
    var x2 = new BN$7(0);
    var y2 = new BN$7(1);
    var a0;
    var b0;
    var a1;
    var b1;
    var a2;
    var b2;
    var prevR;
    var i2 = 0;
    var r2;
    var x;
    while (u.cmpn(0) !== 0) {
      var q = v.div(u);
      r2 = v.sub(q.mul(u));
      x = x2.sub(q.mul(x1));
      var y = y2.sub(q.mul(y1));
      if (!a1 && r2.cmp(aprxSqrt) < 0) {
        a0 = prevR.neg();
        b0 = x1;
        a1 = r2.neg();
        b1 = x;
      } else if (a1 && ++i2 === 2) {
        break;
      }
      prevR = r2;
      v = u;
      u = r2;
      x2 = x1;
      x1 = x;
      y2 = y1;
      y1 = y;
    }
    a2 = r2.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
      a2 = a0;
      b2 = b0;
    }
    if (a1.negative) {
      a1 = a1.neg();
      b1 = b1.neg();
    }
    if (a2.negative) {
      a2 = a2.neg();
      b2 = b2.neg();
    }
    return [
      { a: a1, b: b1 },
      { a: a2, b: b2 }
    ];
  };
  ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return { k1, k2 };
  };
  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN$7(x, 16);
    if (!x.red)
      x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();
    return this.point(x, y);
  };
  ShortCurve.prototype.validate = function validate(point) {
    if (point.inf)
      return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
  };
  ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for (var i2 = 0; i2 < points.length; i2++) {
      var split = this._endoSplit(coeffs[i2]);
      var p = points[i2];
      var beta = p._getBeta();
      if (split.k1.negative) {
        split.k1.ineg();
        p = p.neg(true);
      }
      if (split.k2.negative) {
        split.k2.ineg();
        beta = beta.neg(true);
      }
      npoints[i2 * 2] = p;
      npoints[i2 * 2 + 1] = beta;
      ncoeffs[i2 * 2] = split.k1;
      ncoeffs[i2 * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i2 * 2, jacobianResult);
    for (var j = 0; j < i2 * 2; j++) {
      npoints[j] = null;
      ncoeffs[j] = null;
    }
    return res;
  };
  function Point$2(curve2, x, y, isRed) {
    Base$2.BasePoint.call(this, curve2, "affine");
    if (x === null && y === null) {
      this.x = null;
      this.y = null;
      this.inf = true;
    } else {
      this.x = new BN$7(x, 16);
      this.y = new BN$7(y, 16);
      if (isRed) {
        this.x.forceRed(this.curve.red);
        this.y.forceRed(this.curve.red);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      this.inf = false;
    }
  }
  inherits$3(Point$2, Base$2.BasePoint);
  ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point$2(this, x, y, isRed);
  };
  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point$2.fromJSON(this, obj, red);
  };
  Point$2.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo)
      return;
    var pre = this.precomputed;
    if (pre && pre.beta)
      return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
      var curve2 = this.curve;
      var endoMul = function(p) {
        return curve2.point(p.x.redMul(curve2.endo.beta), p.y);
      };
      pre.beta = beta;
      beta.precomputed = {
        beta: null,
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(endoMul)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(endoMul)
        }
      };
    }
    return beta;
  };
  Point$2.prototype.toJSON = function toJSON() {
    if (!this.precomputed)
      return [this.x, this.y];
    return [this.x, this.y, this.precomputed && {
      doubles: this.precomputed.doubles && {
        step: this.precomputed.doubles.step,
        points: this.precomputed.doubles.points.slice(1)
      },
      naf: this.precomputed.naf && {
        wnd: this.precomputed.naf.wnd,
        points: this.precomputed.naf.points.slice(1)
      }
    }];
  };
  Point$2.fromJSON = function fromJSON(curve2, obj, red) {
    if (typeof obj === "string")
      obj = JSON.parse(obj);
    var res = curve2.point(obj[0], obj[1], red);
    if (!obj[2])
      return res;
    function obj2point(obj2) {
      return curve2.point(obj2[0], obj2[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
      beta: null,
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: [res].concat(pre.doubles.points.map(obj2point))
      },
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: [res].concat(pre.naf.points.map(obj2point))
      }
    };
    return res;
  };
  Point$2.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
  };
  Point$2.prototype.isInfinity = function isInfinity() {
    return this.inf;
  };
  Point$2.prototype.add = function add(p) {
    if (this.inf)
      return p;
    if (p.inf)
      return this;
    if (this.eq(p))
      return this.dbl();
    if (this.neg().eq(p))
      return this.curve.point(null, null);
    if (this.x.cmp(p.x) === 0)
      return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0)
      c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point$2.prototype.dbl = function dbl() {
    if (this.inf)
      return this;
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0)
      return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
  };
  Point$2.prototype.getX = function getX() {
    return this.x.fromRed();
  };
  Point$2.prototype.getY = function getY() {
    return this.y.fromRed();
  };
  Point$2.prototype.mul = function mul(k) {
    k = new BN$7(k, 16);
    if (this.isInfinity())
      return this;
    else if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo)
      return this.curve._endoWnafMulAdd([this], [k]);
    else
      return this.curve._wnafMul(this, k);
  };
  Point$2.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2);
  };
  Point$2.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [this, p2];
    var coeffs = [k1, k2];
    if (this.curve.endo)
      return this.curve._endoWnafMulAdd(points, coeffs, true);
    else
      return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
  };
  Point$2.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
  };
  Point$2.prototype.neg = function neg(_precompute) {
    if (this.inf)
      return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
      var pre = this.precomputed;
      var negate = function(p) {
        return p.neg();
      };
      res.precomputed = {
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: pre.naf.points.map(negate)
        },
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: pre.doubles.points.map(negate)
        }
      };
    }
    return res;
  };
  Point$2.prototype.toJ = function toJ() {
    if (this.inf)
      return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
  };
  function JPoint(curve2, x, y, z) {
    Base$2.BasePoint.call(this, curve2, "jacobian");
    if (x === null && y === null && z === null) {
      this.x = this.curve.one;
      this.y = this.curve.one;
      this.z = new BN$7(0);
    } else {
      this.x = new BN$7(x, 16);
      this.y = new BN$7(y, 16);
      this.z = new BN$7(z, 16);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
  }
  inherits$3(JPoint, Base$2.BasePoint);
  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
  };
  JPoint.prototype.toP = function toP() {
    if (this.isInfinity())
      return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
  };
  JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
  };
  JPoint.prototype.add = function add(p) {
    if (this.isInfinity())
      return p;
    if (p.isInfinity())
      return this;
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r2 = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r2.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mixedAdd = function mixedAdd(p) {
    if (this.isInfinity())
      return p.toJ();
    if (p.isInfinity())
      return this;
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r2 = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
      if (r2.cmpn(0) !== 0)
        return this.curve.jpoint(null, null, null);
      else
        return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r2.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r2.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0)
      return this;
    if (this.isInfinity())
      return this;
    if (!pow)
      return this.dbl();
    var i2;
    if (this.curve.zeroA || this.curve.threeA) {
      var r2 = this;
      for (i2 = 0; i2 < pow; i2++)
        r2 = r2.dbl();
      return r2;
    }
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jyd = jy.redAdd(jy);
    for (i2 = 0; i2 < pow; i2++) {
      var jx2 = jx.redSqr();
      var jyd2 = jyd.redSqr();
      var jyd4 = jyd2.redSqr();
      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
      var t1 = jx.redMul(jyd2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);
      var dny = c.redMul(t2);
      dny = dny.redIAdd(dny).redISub(jyd4);
      var nz = jyd.redMul(jz);
      if (i2 + 1 < pow)
        jz4 = jz4.redMul(jyd4);
      jx = nx;
      jz = nz;
      jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
  };
  JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.zeroA)
      return this._zeroDbl();
    else if (this.curve.threeA)
      return this._threeDbl();
    else
      return this._dbl();
  };
  JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s2 = s2.redIAdd(s2);
      var m = xx.redAdd(xx).redIAdd(xx);
      var t2 = m.redSqr().redISub(s2).redISub(s2);
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      nx = t2;
      ny = m.redMul(s2.redISub(t2)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var a = this.x.redSqr();
      var b = this.y.redSqr();
      var c = b.redSqr();
      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
      d = d.redIAdd(d);
      var e = a.redAdd(a).redIAdd(a);
      var f2 = e.redSqr();
      var c8 = c.redIAdd(c);
      c8 = c8.redIAdd(c8);
      c8 = c8.redIAdd(c8);
      nx = f2.redISub(d).redISub(d);
      ny = e.redMul(d.redISub(nx)).redISub(c8);
      nz = this.y.redMul(this.z);
      nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    if (this.zOne) {
      var xx = this.x.redSqr();
      var yy = this.y.redSqr();
      var yyyy = yy.redSqr();
      var s2 = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      s2 = s2.redIAdd(s2);
      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
      var t2 = m.redSqr().redISub(s2).redISub(s2);
      nx = t2;
      var yyyy8 = yyyy.redIAdd(yyyy);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      yyyy8 = yyyy8.redIAdd(yyyy8);
      ny = m.redMul(s2.redISub(t2)).redISub(yyyy8);
      nz = this.y.redAdd(this.y);
    } else {
      var delta = this.z.redSqr();
      var gamma = this.y.redSqr();
      var beta = this.x.redMul(gamma);
      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
      alpha = alpha.redAdd(alpha).redIAdd(alpha);
      var beta4 = beta.redIAdd(beta);
      beta4 = beta4.redIAdd(beta4);
      var beta8 = beta4.redAdd(beta4);
      nx = alpha.redSqr().redISub(beta8);
      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
      var ggamma8 = gamma.redSqr();
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ggamma8 = ggamma8.redIAdd(ggamma8);
      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA)
      return this.dbl().add(this);
    var xx = this.x.redSqr();
    var yy = this.y.redSqr();
    var zz = this.z.redSqr();
    var yyyy = yy.redSqr();
    var m = xx.redAdd(xx).redIAdd(xx);
    var mm = m.redSqr();
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    var ee = e.redSqr();
    var t2 = yyyy.redIAdd(yyyy);
    t2 = t2.redIAdd(t2);
    t2 = t2.redIAdd(t2);
    t2 = t2.redIAdd(t2);
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t2);
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    var ny = this.y.redMul(u.redMul(t2.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
  };
  JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN$7(k, kbase);
    return this.curve._wnafMul(this, k);
  };
  JPoint.prototype.eq = function eq(p) {
    if (p.type === "affine")
      return this.eq(p.toJ());
    if (this === p)
      return true;
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
      return false;
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
  };
  JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc = x.clone();
    var t2 = this.curve.redN.redMul(zs);
    for (; ; ) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t2);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC JPoint Infinity>";
    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
  };
  JPoint.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
  var BN$6 = bnExports;
  var inherits$2 = inherits_browserExports;
  var Base$1 = base;
  var utils$i = utils$m;
  function MontCurve(conf) {
    Base$1.call(this, "mont", conf);
    this.a = new BN$6(conf.a, 16).toRed(this.red);
    this.b = new BN$6(conf.b, 16).toRed(this.red);
    this.i4 = new BN$6(4).toRed(this.red).redInvm();
    this.two = new BN$6(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
  }
  inherits$2(MontCurve, Base$1);
  var mont = MontCurve;
  MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
  };
  function Point$1(curve2, x, z) {
    Base$1.BasePoint.call(this, curve2, "projective");
    if (x === null && z === null) {
      this.x = this.curve.one;
      this.z = this.curve.zero;
    } else {
      this.x = new BN$6(x, 16);
      this.z = new BN$6(z, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
    }
  }
  inherits$2(Point$1, Base$1.BasePoint);
  MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils$i.toArray(bytes, enc), 1);
  };
  MontCurve.prototype.point = function point(x, z) {
    return new Point$1(this, x, z);
  };
  MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point$1.fromJSON(this, obj);
  };
  Point$1.prototype.precompute = function precompute() {
  };
  Point$1.prototype._encode = function _encode() {
    return this.getX().toArray("be", this.curve.p.byteLength());
  };
  Point$1.fromJSON = function fromJSON(curve2, obj) {
    return new Point$1(curve2, obj[0], obj[1] || curve2.one);
  };
  Point$1.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
  };
  Point$1.prototype.isInfinity = function isInfinity() {
    return this.z.cmpn(0) === 0;
  };
  Point$1.prototype.dbl = function dbl() {
    var a = this.x.redAdd(this.z);
    var aa = a.redSqr();
    var b = this.x.redSub(this.z);
    var bb = b.redSqr();
    var c = aa.redSub(bb);
    var nx = aa.redMul(bb);
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
  };
  Point$1.prototype.add = function add() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point$1.prototype.diffAdd = function diffAdd(p, diff) {
    var a = this.x.redAdd(this.z);
    var b = this.x.redSub(this.z);
    var c = p.x.redAdd(p.z);
    var d = p.x.redSub(p.z);
    var da = d.redMul(a);
    var cb = c.redMul(b);
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
  };
  Point$1.prototype.mul = function mul(k) {
    var t2 = k.clone();
    var a = this;
    var b = this.curve.point(null, null);
    var c = this;
    for (var bits = []; t2.cmpn(0) !== 0; t2.iushrn(1))
      bits.push(t2.andln(1));
    for (var i2 = bits.length - 1; i2 >= 0; i2--) {
      if (bits[i2] === 0) {
        a = a.diffAdd(b, c);
        b = b.dbl();
      } else {
        b = a.diffAdd(b, c);
        a = a.dbl();
      }
    }
    return b;
  };
  Point$1.prototype.mulAdd = function mulAdd() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point$1.prototype.jumlAdd = function jumlAdd() {
    throw new Error("Not supported on Montgomery curve");
  };
  Point$1.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
  };
  Point$1.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
  };
  Point$1.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };
  var utils$h = utils$m;
  var BN$5 = bnExports;
  var inherits$1 = inherits_browserExports;
  var Base = base;
  var assert$c = utils$h.assert;
  function EdwardsCurve(conf) {
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, "edwards", conf);
    this.a = new BN$5(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN$5(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN$5(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert$c(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
  }
  inherits$1(EdwardsCurve, Base);
  var edwards = EdwardsCurve;
  EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA)
      return num.redNeg();
    else
      return this.a.redMul(num);
  };
  EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC)
      return num;
    else
      return this.c.redMul(num);
  };
  EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t2) {
    return this.point(x, y, z, t2);
  };
  EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN$5(x, 16);
    if (!x.red)
      x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd)
      y = y.redNeg();
    return this.point(x, y);
  };
  EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN$5(y, 16);
    if (!y.red)
      y = y.toRed(this.red);
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
      if (odd)
        throw new Error("invalid point");
      else
        return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
      throw new Error("invalid point");
    if (x.fromRed().isOdd() !== odd)
      x = x.redNeg();
    return this.point(x, y);
  };
  EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity())
      return true;
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
  };
  function Point(curve2, x, y, z, t2) {
    Base.BasePoint.call(this, curve2, "projective");
    if (x === null && y === null && z === null) {
      this.x = this.curve.zero;
      this.y = this.curve.one;
      this.z = this.curve.one;
      this.t = this.curve.zero;
      this.zOne = true;
    } else {
      this.x = new BN$5(x, 16);
      this.y = new BN$5(y, 16);
      this.z = z ? new BN$5(z, 16) : this.curve.one;
      this.t = t2 && new BN$5(t2, 16);
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);
      if (this.t && !this.t.red)
        this.t = this.t.toRed(this.curve.red);
      this.zOne = this.z === this.curve.one;
      if (this.curve.extended && !this.t) {
        this.t = this.x.redMul(this.y);
        if (!this.zOne)
          this.t = this.t.redMul(this.z.redInvm());
      }
    }
  }
  inherits$1(Point, Base.BasePoint);
  EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
  };
  EdwardsCurve.prototype.point = function point(x, y, z, t2) {
    return new Point(this, x, y, z, t2);
  };
  Point.fromJSON = function fromJSON(curve2, obj) {
    return new Point(curve2, obj[0], obj[1], obj[2]);
  };
  Point.prototype.inspect = function inspect() {
    if (this.isInfinity())
      return "<EC Point Infinity>";
    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
  };
  Point.prototype.isInfinity = function isInfinity() {
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
  };
  Point.prototype._extDbl = function _extDbl() {
    var a = this.x.redSqr();
    var b = this.y.redSqr();
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    var d = this.curve._mulA(a);
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    var g = d.redAdd(b);
    var f2 = g.redSub(c);
    var h = d.redSub(b);
    var nx = e.redMul(f2);
    var ny = g.redMul(h);
    var nt = e.redMul(h);
    var nz = f2.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };
  Point.prototype._projDbl = function _projDbl() {
    var b = this.x.redAdd(this.y).redSqr();
    var c = this.x.redSqr();
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
      e = this.curve._mulA(c);
      var f2 = e.redAdd(d);
      if (this.zOne) {
        nx = b.redSub(c).redSub(d).redMul(f2.redSub(this.curve.two));
        ny = f2.redMul(e.redSub(d));
        nz = f2.redSqr().redSub(f2).redSub(f2);
      } else {
        h = this.z.redSqr();
        j = f2.redSub(h).redISub(h);
        nx = b.redSub(c).redISub(d).redMul(j);
        ny = f2.redMul(e.redSub(d));
        nz = f2.redMul(j);
      }
    } else {
      e = c.redAdd(d);
      h = this.curve._mulC(this.z).redSqr();
      j = e.redSub(h).redSub(h);
      nx = this.curve._mulC(b.redISub(e)).redMul(j);
      ny = this.curve._mulC(e).redMul(c.redISub(d));
      nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
  };
  Point.prototype.dbl = function dbl() {
    if (this.isInfinity())
      return this;
    if (this.curve.extended)
      return this._extDbl();
    else
      return this._projDbl();
  };
  Point.prototype._extAdd = function _extAdd(p) {
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    var d = this.z.redMul(p.z.redAdd(p.z));
    var e = b.redSub(a);
    var f2 = d.redSub(c);
    var g = d.redAdd(c);
    var h = b.redAdd(a);
    var nx = e.redMul(f2);
    var ny = g.redMul(h);
    var nt = e.redMul(h);
    var nz = f2.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
  };
  Point.prototype._projAdd = function _projAdd(p) {
    var a = this.z.redMul(p.z);
    var b = a.redSqr();
    var c = this.x.redMul(p.x);
    var d = this.y.redMul(p.y);
    var e = this.curve.d.redMul(c).redMul(d);
    var f2 = b.redSub(e);
    var g = b.redAdd(e);
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f2).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
      ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
      nz = f2.redMul(g);
    } else {
      ny = a.redMul(g).redMul(d.redSub(c));
      nz = this.curve._mulC(f2).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
  };
  Point.prototype.add = function add(p) {
    if (this.isInfinity())
      return p;
    if (p.isInfinity())
      return this;
    if (this.curve.extended)
      return this._extAdd(p);
    else
      return this._projAdd(p);
  };
  Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k))
      return this.curve._fixedNafMul(this, k);
    else
      return this.curve._wnafMul(this, k);
  };
  Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
  };
  Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
  };
  Point.prototype.normalize = function normalize() {
    if (this.zOne)
      return this;
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t)
      this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
  };
  Point.prototype.neg = function neg() {
    return this.curve.point(
      this.x.redNeg(),
      this.y,
      this.z,
      this.t && this.t.redNeg()
    );
  };
  Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
  };
  Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
  };
  Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
  };
  Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0)
      return true;
    var xc = x.clone();
    var t2 = this.curve.redN.redMul(this.z);
    for (; ; ) {
      xc.iadd(this.curve.n);
      if (xc.cmp(this.curve.p) >= 0)
        return false;
      rx.redIAdd(t2);
      if (this.x.cmp(rx) === 0)
        return true;
    }
  };
  Point.prototype.toP = Point.prototype.normalize;
  Point.prototype.mixedAdd = Point.prototype.add;
  (function(exports) {
    var curve2 = exports;
    curve2.base = base;
    curve2.short = short;
    curve2.mont = mont;
    curve2.edwards = edwards;
  })(curve);
  var curves$2 = {};
  var hash$2 = {};
  var utils$g = {};
  var assert$b = minimalisticAssert;
  var inherits = inherits_browserExports;
  utils$g.inherits = inherits;
  function isSurrogatePair(msg, i2) {
    if ((msg.charCodeAt(i2) & 64512) !== 55296) {
      return false;
    }
    if (i2 < 0 || i2 + 1 >= msg.length) {
      return false;
    }
    return (msg.charCodeAt(i2 + 1) & 64512) === 56320;
  }
  function toArray(msg, enc) {
    if (Array.isArray(msg))
      return msg.slice();
    if (!msg)
      return [];
    var res = [];
    if (typeof msg === "string") {
      if (!enc) {
        var p = 0;
        for (var i2 = 0; i2 < msg.length; i2++) {
          var c = msg.charCodeAt(i2);
          if (c < 128) {
            res[p++] = c;
          } else if (c < 2048) {
            res[p++] = c >> 6 | 192;
            res[p++] = c & 63 | 128;
          } else if (isSurrogatePair(msg, i2)) {
            c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i2) & 1023);
            res[p++] = c >> 18 | 240;
            res[p++] = c >> 12 & 63 | 128;
            res[p++] = c >> 6 & 63 | 128;
            res[p++] = c & 63 | 128;
          } else {
            res[p++] = c >> 12 | 224;
            res[p++] = c >> 6 & 63 | 128;
            res[p++] = c & 63 | 128;
          }
        }
      } else if (enc === "hex") {
        msg = msg.replace(/[^a-z0-9]+/ig, "");
        if (msg.length % 2 !== 0)
          msg = "0" + msg;
        for (i2 = 0; i2 < msg.length; i2 += 2)
          res.push(parseInt(msg[i2] + msg[i2 + 1], 16));
      }
    } else {
      for (i2 = 0; i2 < msg.length; i2++)
        res[i2] = msg[i2] | 0;
    }
    return res;
  }
  utils$g.toArray = toArray;
  function toHex$1(msg) {
    var res = "";
    for (var i2 = 0; i2 < msg.length; i2++)
      res += zero2(msg[i2].toString(16));
    return res;
  }
  utils$g.toHex = toHex$1;
  function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
    return res >>> 0;
  }
  utils$g.htonl = htonl;
  function toHex32(msg, endian) {
    var res = "";
    for (var i2 = 0; i2 < msg.length; i2++) {
      var w = msg[i2];
      if (endian === "little")
        w = htonl(w);
      res += zero8(w.toString(16));
    }
    return res;
  }
  utils$g.toHex32 = toHex32;
  function zero2(word) {
    if (word.length === 1)
      return "0" + word;
    else
      return word;
  }
  utils$g.zero2 = zero2;
  function zero8(word) {
    if (word.length === 7)
      return "0" + word;
    else if (word.length === 6)
      return "00" + word;
    else if (word.length === 5)
      return "000" + word;
    else if (word.length === 4)
      return "0000" + word;
    else if (word.length === 3)
      return "00000" + word;
    else if (word.length === 2)
      return "000000" + word;
    else if (word.length === 1)
      return "0000000" + word;
    else
      return word;
  }
  utils$g.zero8 = zero8;
  function join32(msg, start2, end, endian) {
    var len2 = end - start2;
    assert$b(len2 % 4 === 0);
    var res = new Array(len2 / 4);
    for (var i2 = 0, k = start2; i2 < res.length; i2++, k += 4) {
      var w;
      if (endian === "big")
        w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
      else
        w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
      res[i2] = w >>> 0;
    }
    return res;
  }
  utils$g.join32 = join32;
  function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for (var i2 = 0, k = 0; i2 < msg.length; i2++, k += 4) {
      var m = msg[i2];
      if (endian === "big") {
        res[k] = m >>> 24;
        res[k + 1] = m >>> 16 & 255;
        res[k + 2] = m >>> 8 & 255;
        res[k + 3] = m & 255;
      } else {
        res[k + 3] = m >>> 24;
        res[k + 2] = m >>> 16 & 255;
        res[k + 1] = m >>> 8 & 255;
        res[k] = m & 255;
      }
    }
    return res;
  }
  utils$g.split32 = split32;
  function rotr32$1(w, b) {
    return w >>> b | w << 32 - b;
  }
  utils$g.rotr32 = rotr32$1;
  function rotl32$2(w, b) {
    return w << b | w >>> 32 - b;
  }
  utils$g.rotl32 = rotl32$2;
  function sum32$3(a, b) {
    return a + b >>> 0;
  }
  utils$g.sum32 = sum32$3;
  function sum32_3$1(a, b, c) {
    return a + b + c >>> 0;
  }
  utils$g.sum32_3 = sum32_3$1;
  function sum32_4$2(a, b, c, d) {
    return a + b + c + d >>> 0;
  }
  utils$g.sum32_4 = sum32_4$2;
  function sum32_5$2(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
  }
  utils$g.sum32_5 = sum32_5$2;
  function sum64$1(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
  }
  utils$g.sum64 = sum64$1;
  function sum64_hi$1(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
  }
  utils$g.sum64_hi = sum64_hi$1;
  function sum64_lo$1(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
  }
  utils$g.sum64_lo = sum64_lo$1;
  function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
  }
  utils$g.sum64_4_hi = sum64_4_hi$1;
  function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
  }
  utils$g.sum64_4_lo = sum64_4_lo$1;
  function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
  }
  utils$g.sum64_5_hi = sum64_5_hi$1;
  function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
  }
  utils$g.sum64_5_lo = sum64_5_lo$1;
  function rotr64_hi$1(ah, al, num) {
    var r2 = al << 32 - num | ah >>> num;
    return r2 >>> 0;
  }
  utils$g.rotr64_hi = rotr64_hi$1;
  function rotr64_lo$1(ah, al, num) {
    var r2 = ah << 32 - num | al >>> num;
    return r2 >>> 0;
  }
  utils$g.rotr64_lo = rotr64_lo$1;
  function shr64_hi$1(ah, al, num) {
    return ah >>> num;
  }
  utils$g.shr64_hi = shr64_hi$1;
  function shr64_lo$1(ah, al, num) {
    var r2 = ah << 32 - num | al >>> num;
    return r2 >>> 0;
  }
  utils$g.shr64_lo = shr64_lo$1;
  var common$5 = {};
  var utils$f = utils$g;
  var assert$a = minimalisticAssert;
  function BlockHash$4() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = "big";
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
  }
  common$5.BlockHash = BlockHash$4;
  BlockHash$4.prototype.update = function update(msg, enc) {
    msg = utils$f.toArray(msg, enc);
    if (!this.pending)
      this.pending = msg;
    else
      this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    if (this.pending.length >= this._delta8) {
      msg = this.pending;
      var r2 = msg.length % this._delta8;
      this.pending = msg.slice(msg.length - r2, msg.length);
      if (this.pending.length === 0)
        this.pending = null;
      msg = utils$f.join32(msg, 0, msg.length - r2, this.endian);
      for (var i2 = 0; i2 < msg.length; i2 += this._delta32)
        this._update(msg, i2, i2 + this._delta32);
    }
    return this;
  };
  BlockHash$4.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert$a(this.pending === null);
    return this._digest(enc);
  };
  BlockHash$4.prototype._pad = function pad() {
    var len2 = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len2 + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 128;
    for (var i2 = 1; i2 < k; i2++)
      res[i2] = 0;
    len2 <<= 3;
    if (this.endian === "big") {
      for (var t2 = 8; t2 < this.padLength; t2++)
        res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = len2 >>> 24 & 255;
      res[i2++] = len2 >>> 16 & 255;
      res[i2++] = len2 >>> 8 & 255;
      res[i2++] = len2 & 255;
    } else {
      res[i2++] = len2 & 255;
      res[i2++] = len2 >>> 8 & 255;
      res[i2++] = len2 >>> 16 & 255;
      res[i2++] = len2 >>> 24 & 255;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      res[i2++] = 0;
      for (t2 = 8; t2 < this.padLength; t2++)
        res[i2++] = 0;
    }
    return res;
  };
  var sha = {};
  var common$4 = {};
  var utils$e = utils$g;
  var rotr32 = utils$e.rotr32;
  function ft_1$1(s2, x, y, z) {
    if (s2 === 0)
      return ch32$1(x, y, z);
    if (s2 === 1 || s2 === 3)
      return p32(x, y, z);
    if (s2 === 2)
      return maj32$1(x, y, z);
  }
  common$4.ft_1 = ft_1$1;
  function ch32$1(x, y, z) {
    return x & y ^ ~x & z;
  }
  common$4.ch32 = ch32$1;
  function maj32$1(x, y, z) {
    return x & y ^ x & z ^ y & z;
  }
  common$4.maj32 = maj32$1;
  function p32(x, y, z) {
    return x ^ y ^ z;
  }
  common$4.p32 = p32;
  function s0_256$1(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
  }
  common$4.s0_256 = s0_256$1;
  function s1_256$1(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
  }
  common$4.s1_256 = s1_256$1;
  function g0_256$1(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
  }
  common$4.g0_256 = g0_256$1;
  function g1_256$1(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
  }
  common$4.g1_256 = g1_256$1;
  var utils$d = utils$g;
  var common$3 = common$5;
  var shaCommon$1 = common$4;
  var rotl32$1 = utils$d.rotl32;
  var sum32$2 = utils$d.sum32;
  var sum32_5$1 = utils$d.sum32_5;
  var ft_1 = shaCommon$1.ft_1;
  var BlockHash$3 = common$3.BlockHash;
  var sha1_K = [
    1518500249,
    1859775393,
    2400959708,
    3395469782
  ];
  function SHA1() {
    if (!(this instanceof SHA1))
      return new SHA1();
    BlockHash$3.call(this);
    this.h = [
      1732584193,
      4023233417,
      2562383102,
      271733878,
      3285377520
    ];
    this.W = new Array(80);
  }
  utils$d.inherits(SHA1, BlockHash$3);
  var _1 = SHA1;
  SHA1.blockSize = 512;
  SHA1.outSize = 160;
  SHA1.hmacStrength = 80;
  SHA1.padLength = 64;
  SHA1.prototype._update = function _update(msg, start2) {
    var W = this.W;
    for (var i2 = 0; i2 < 16; i2++)
      W[i2] = msg[start2 + i2];
    for (; i2 < W.length; i2++)
      W[i2] = rotl32$1(W[i2 - 3] ^ W[i2 - 8] ^ W[i2 - 14] ^ W[i2 - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for (i2 = 0; i2 < W.length; i2++) {
      var s2 = ~~(i2 / 20);
      var t2 = sum32_5$1(rotl32$1(a, 5), ft_1(s2, b, c, d), e, W[i2], sha1_K[s2]);
      e = d;
      d = c;
      c = rotl32$1(b, 30);
      b = a;
      a = t2;
    }
    this.h[0] = sum32$2(this.h[0], a);
    this.h[1] = sum32$2(this.h[1], b);
    this.h[2] = sum32$2(this.h[2], c);
    this.h[3] = sum32$2(this.h[3], d);
    this.h[4] = sum32$2(this.h[4], e);
  };
  SHA1.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$d.toHex32(this.h, "big");
    else
      return utils$d.split32(this.h, "big");
  };
  var utils$c = utils$g;
  var common$2 = common$5;
  var shaCommon = common$4;
  var assert$9 = minimalisticAssert;
  var sum32$1 = utils$c.sum32;
  var sum32_4$1 = utils$c.sum32_4;
  var sum32_5 = utils$c.sum32_5;
  var ch32 = shaCommon.ch32;
  var maj32 = shaCommon.maj32;
  var s0_256 = shaCommon.s0_256;
  var s1_256 = shaCommon.s1_256;
  var g0_256 = shaCommon.g0_256;
  var g1_256 = shaCommon.g1_256;
  var BlockHash$2 = common$2.BlockHash;
  var sha256_K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ];
  function SHA256$1() {
    if (!(this instanceof SHA256$1))
      return new SHA256$1();
    BlockHash$2.call(this);
    this.h = [
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ];
    this.k = sha256_K;
    this.W = new Array(64);
  }
  utils$c.inherits(SHA256$1, BlockHash$2);
  var _256 = SHA256$1;
  SHA256$1.blockSize = 512;
  SHA256$1.outSize = 256;
  SHA256$1.hmacStrength = 192;
  SHA256$1.padLength = 64;
  SHA256$1.prototype._update = function _update(msg, start2) {
    var W = this.W;
    for (var i2 = 0; i2 < 16; i2++)
      W[i2] = msg[start2 + i2];
    for (; i2 < W.length; i2++)
      W[i2] = sum32_4$1(g1_256(W[i2 - 2]), W[i2 - 7], g0_256(W[i2 - 15]), W[i2 - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f2 = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    assert$9(this.k.length === W.length);
    for (i2 = 0; i2 < W.length; i2++) {
      var T1 = sum32_5(h, s1_256(e), ch32(e, f2, g), this.k[i2], W[i2]);
      var T2 = sum32$1(s0_256(a), maj32(a, b, c));
      h = g;
      g = f2;
      f2 = e;
      e = sum32$1(d, T1);
      d = c;
      c = b;
      b = a;
      a = sum32$1(T1, T2);
    }
    this.h[0] = sum32$1(this.h[0], a);
    this.h[1] = sum32$1(this.h[1], b);
    this.h[2] = sum32$1(this.h[2], c);
    this.h[3] = sum32$1(this.h[3], d);
    this.h[4] = sum32$1(this.h[4], e);
    this.h[5] = sum32$1(this.h[5], f2);
    this.h[6] = sum32$1(this.h[6], g);
    this.h[7] = sum32$1(this.h[7], h);
  };
  SHA256$1.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$c.toHex32(this.h, "big");
    else
      return utils$c.split32(this.h, "big");
  };
  var utils$b = utils$g;
  var SHA256 = _256;
  function SHA224() {
    if (!(this instanceof SHA224))
      return new SHA224();
    SHA256.call(this);
    this.h = [
      3238371032,
      914150663,
      812702999,
      4144912697,
      4290775857,
      1750603025,
      1694076839,
      3204075428
    ];
  }
  utils$b.inherits(SHA224, SHA256);
  var _224 = SHA224;
  SHA224.blockSize = 512;
  SHA224.outSize = 224;
  SHA224.hmacStrength = 192;
  SHA224.padLength = 64;
  SHA224.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$b.toHex32(this.h.slice(0, 7), "big");
    else
      return utils$b.split32(this.h.slice(0, 7), "big");
  };
  var utils$a = utils$g;
  var common$1 = common$5;
  var assert$8 = minimalisticAssert;
  var rotr64_hi = utils$a.rotr64_hi;
  var rotr64_lo = utils$a.rotr64_lo;
  var shr64_hi = utils$a.shr64_hi;
  var shr64_lo = utils$a.shr64_lo;
  var sum64 = utils$a.sum64;
  var sum64_hi = utils$a.sum64_hi;
  var sum64_lo = utils$a.sum64_lo;
  var sum64_4_hi = utils$a.sum64_4_hi;
  var sum64_4_lo = utils$a.sum64_4_lo;
  var sum64_5_hi = utils$a.sum64_5_hi;
  var sum64_5_lo = utils$a.sum64_5_lo;
  var BlockHash$1 = common$1.BlockHash;
  var sha512_K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
  ];
  function SHA512$1() {
    if (!(this instanceof SHA512$1))
      return new SHA512$1();
    BlockHash$1.call(this);
    this.h = [
      1779033703,
      4089235720,
      3144134277,
      2227873595,
      1013904242,
      4271175723,
      2773480762,
      1595750129,
      1359893119,
      2917565137,
      2600822924,
      725511199,
      528734635,
      4215389547,
      1541459225,
      327033209
    ];
    this.k = sha512_K;
    this.W = new Array(160);
  }
  utils$a.inherits(SHA512$1, BlockHash$1);
  var _512 = SHA512$1;
  SHA512$1.blockSize = 1024;
  SHA512$1.outSize = 512;
  SHA512$1.hmacStrength = 192;
  SHA512$1.padLength = 128;
  SHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start2) {
    var W = this.W;
    for (var i2 = 0; i2 < 32; i2++)
      W[i2] = msg[start2 + i2];
    for (; i2 < W.length; i2 += 2) {
      var c0_hi = g1_512_hi(W[i2 - 4], W[i2 - 3]);
      var c0_lo = g1_512_lo(W[i2 - 4], W[i2 - 3]);
      var c1_hi = W[i2 - 14];
      var c1_lo = W[i2 - 13];
      var c2_hi = g0_512_hi(W[i2 - 30], W[i2 - 29]);
      var c2_lo = g0_512_lo(W[i2 - 30], W[i2 - 29]);
      var c3_hi = W[i2 - 32];
      var c3_lo = W[i2 - 31];
      W[i2] = sum64_4_hi(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo
      );
      W[i2 + 1] = sum64_4_lo(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo
      );
    }
  };
  SHA512$1.prototype._update = function _update(msg, start2) {
    this._prepareBlock(msg, start2);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    assert$8(this.k.length === W.length);
    for (var i2 = 0; i2 < W.length; i2 += 2) {
      var c0_hi = hh;
      var c0_lo = hl;
      var c1_hi = s1_512_hi(eh, el);
      var c1_lo = s1_512_lo(eh, el);
      var c2_hi = ch64_hi(eh, el, fh, fl, gh);
      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
      var c3_hi = this.k[i2];
      var c3_lo = this.k[i2 + 1];
      var c4_hi = W[i2];
      var c4_lo = W[i2 + 1];
      var T1_hi = sum64_5_hi(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo,
        c4_hi,
        c4_lo
      );
      var T1_lo = sum64_5_lo(
        c0_hi,
        c0_lo,
        c1_hi,
        c1_lo,
        c2_hi,
        c2_lo,
        c3_hi,
        c3_lo,
        c4_hi,
        c4_lo
      );
      c0_hi = s0_512_hi(ah, al);
      c0_lo = s0_512_lo(ah, al);
      c1_hi = maj64_hi(ah, al, bh, bl, ch);
      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
      var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
      var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
      hh = gh;
      hl = gl;
      gh = fh;
      gl = fl;
      fh = eh;
      fl = el;
      eh = sum64_hi(dh, dl, T1_hi, T1_lo);
      el = sum64_lo(dl, dl, T1_hi, T1_lo);
      dh = ch;
      dl = cl;
      ch = bh;
      cl = bl;
      bh = ah;
      bl = al;
      ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
      al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
  };
  SHA512$1.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$a.toHex32(this.h, "big");
    else
      return utils$a.split32(this.h, "big");
  };
  function ch64_hi(xh, xl, yh, yl, zh) {
    var r2 = xh & yh ^ ~xh & zh;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r2 = xl & yl ^ ~xl & zl;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function maj64_hi(xh, xl, yh, yl, zh) {
    var r2 = xh & yh ^ xh & zh ^ yh & zh;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r2 = xl & yl ^ xl & zl ^ yl & zl;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2);
    var c2_hi = rotr64_hi(xl, xh, 7);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2);
    var c2_lo = rotr64_lo(xl, xh, 7);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29);
    var c2_hi = shr64_hi(xh, xl, 6);
    var r2 = c0_hi ^ c1_hi ^ c2_hi;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29);
    var c2_lo = shr64_lo(xh, xl, 6);
    var r2 = c0_lo ^ c1_lo ^ c2_lo;
    if (r2 < 0)
      r2 += 4294967296;
    return r2;
  }
  var utils$9 = utils$g;
  var SHA512 = _512;
  function SHA384() {
    if (!(this instanceof SHA384))
      return new SHA384();
    SHA512.call(this);
    this.h = [
      3418070365,
      3238371032,
      1654270250,
      914150663,
      2438529370,
      812702999,
      355462360,
      4144912697,
      1731405415,
      4290775857,
      2394180231,
      1750603025,
      3675008525,
      1694076839,
      1203062813,
      3204075428
    ];
  }
  utils$9.inherits(SHA384, SHA512);
  var _384 = SHA384;
  SHA384.blockSize = 1024;
  SHA384.outSize = 384;
  SHA384.hmacStrength = 192;
  SHA384.padLength = 128;
  SHA384.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$9.toHex32(this.h.slice(0, 12), "big");
    else
      return utils$9.split32(this.h.slice(0, 12), "big");
  };
  sha.sha1 = _1;
  sha.sha224 = _224;
  sha.sha256 = _256;
  sha.sha384 = _384;
  sha.sha512 = _512;
  var ripemd = {};
  var utils$8 = utils$g;
  var common = common$5;
  var rotl32 = utils$8.rotl32;
  var sum32 = utils$8.sum32;
  var sum32_3 = utils$8.sum32_3;
  var sum32_4 = utils$8.sum32_4;
  var BlockHash = common.BlockHash;
  function RIPEMD160() {
    if (!(this instanceof RIPEMD160))
      return new RIPEMD160();
    BlockHash.call(this);
    this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
    this.endian = "little";
  }
  utils$8.inherits(RIPEMD160, BlockHash);
  ripemd.ripemd160 = RIPEMD160;
  RIPEMD160.blockSize = 512;
  RIPEMD160.outSize = 160;
  RIPEMD160.hmacStrength = 192;
  RIPEMD160.padLength = 64;
  RIPEMD160.prototype._update = function update(msg, start2) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for (var j = 0; j < 80; j++) {
      var T = sum32(
        rotl32(
          sum32_4(A, f(j, B, C, D), msg[r[j] + start2], K(j)),
          s[j]
        ),
        E
      );
      A = E;
      E = D;
      D = rotl32(C, 10);
      C = B;
      B = T;
      T = sum32(
        rotl32(
          sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start2], Kh(j)),
          sh[j]
        ),
        Eh
      );
      Ah = Eh;
      Eh = Dh;
      Dh = rotl32(Ch, 10);
      Ch = Bh;
      Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
  };
  RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === "hex")
      return utils$8.toHex32(this.h, "little");
    else
      return utils$8.split32(this.h, "little");
  };
  function f(j, x, y, z) {
    if (j <= 15)
      return x ^ y ^ z;
    else if (j <= 31)
      return x & y | ~x & z;
    else if (j <= 47)
      return (x | ~y) ^ z;
    else if (j <= 63)
      return x & z | y & ~z;
    else
      return x ^ (y | ~z);
  }
  function K(j) {
    if (j <= 15)
      return 0;
    else if (j <= 31)
      return 1518500249;
    else if (j <= 47)
      return 1859775393;
    else if (j <= 63)
      return 2400959708;
    else
      return 2840853838;
  }
  function Kh(j) {
    if (j <= 15)
      return 1352829926;
    else if (j <= 31)
      return 1548603684;
    else if (j <= 47)
      return 1836072691;
    else if (j <= 63)
      return 2053994217;
    else
      return 0;
  }
  var r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
  ];
  var rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
  ];
  var s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
  ];
  var sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
  ];
  var utils$7 = utils$g;
  var assert$7 = minimalisticAssert;
  function Hmac(hash2, key2, enc) {
    if (!(this instanceof Hmac))
      return new Hmac(hash2, key2, enc);
    this.Hash = hash2;
    this.blockSize = hash2.blockSize / 8;
    this.outSize = hash2.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils$7.toArray(key2, enc));
  }
  var hmac = Hmac;
  Hmac.prototype._init = function init(key2) {
    if (key2.length > this.blockSize)
      key2 = new this.Hash().update(key2).digest();
    assert$7(key2.length <= this.blockSize);
    for (var i2 = key2.length; i2 < this.blockSize; i2++)
      key2.push(0);
    for (i2 = 0; i2 < key2.length; i2++)
      key2[i2] ^= 54;
    this.inner = new this.Hash().update(key2);
    for (i2 = 0; i2 < key2.length; i2++)
      key2[i2] ^= 106;
    this.outer = new this.Hash().update(key2);
  };
  Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
  };
  Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
  };
  (function(exports) {
    var hash2 = exports;
    hash2.utils = utils$g;
    hash2.common = common$5;
    hash2.sha = sha;
    hash2.ripemd = ripemd;
    hash2.hmac = hmac;
    hash2.sha1 = hash2.sha.sha1;
    hash2.sha256 = hash2.sha.sha256;
    hash2.sha224 = hash2.sha.sha224;
    hash2.sha384 = hash2.sha.sha384;
    hash2.sha512 = hash2.sha.sha512;
    hash2.ripemd160 = hash2.ripemd.ripemd160;
  })(hash$2);
  var secp256k1$1;
  var hasRequiredSecp256k1;
  function requireSecp256k1() {
    if (hasRequiredSecp256k1) return secp256k1$1;
    hasRequiredSecp256k1 = 1;
    secp256k1$1 = {
      doubles: {
        step: 4,
        points: [
          [
            "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
            "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
          ],
          [
            "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
            "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
          ],
          [
            "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
            "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
          ],
          [
            "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
            "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
          ],
          [
            "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
            "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
          ],
          [
            "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
            "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
          ],
          [
            "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
            "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
          ],
          [
            "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
            "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
          ],
          [
            "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
            "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
          ],
          [
            "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
            "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
          ],
          [
            "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
            "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
          ],
          [
            "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
            "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
          ],
          [
            "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
            "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
          ],
          [
            "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
            "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
          ],
          [
            "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
            "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
          ],
          [
            "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
            "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
          ],
          [
            "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
            "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
          ],
          [
            "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
            "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
          ],
          [
            "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
            "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
          ],
          [
            "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
            "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
          ],
          [
            "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
            "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
          ],
          [
            "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
            "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
          ],
          [
            "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
            "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
          ],
          [
            "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
            "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
          ],
          [
            "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
            "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
          ],
          [
            "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
            "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
          ],
          [
            "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
            "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
          ],
          [
            "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
            "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
          ],
          [
            "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
            "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
          ],
          [
            "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
            "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
          ],
          [
            "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
            "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
          ],
          [
            "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
            "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
          ],
          [
            "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
            "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
          ],
          [
            "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
            "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
          ],
          [
            "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
            "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
          ],
          [
            "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
            "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
          ],
          [
            "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
            "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
          ],
          [
            "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
            "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
          ],
          [
            "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
            "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
          ],
          [
            "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
            "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
          ],
          [
            "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
            "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
          ],
          [
            "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
            "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
          ],
          [
            "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
            "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
          ],
          [
            "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
            "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
          ],
          [
            "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
            "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
          ],
          [
            "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
            "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
          ],
          [
            "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
            "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
          ],
          [
            "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
            "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
          ],
          [
            "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
            "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
          ],
          [
            "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
            "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
          ],
          [
            "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
            "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
          ],
          [
            "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
            "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
          ],
          [
            "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
            "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
          ],
          [
            "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
            "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
          ],
          [
            "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
            "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
          ],
          [
            "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
            "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
          ],
          [
            "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
            "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
          ],
          [
            "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
            "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
          ],
          [
            "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
            "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
          ],
          [
            "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
            "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
          ],
          [
            "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
            "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
          ],
          [
            "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
            "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
          ],
          [
            "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
            "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
          ],
          [
            "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
            "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
          ],
          [
            "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
            "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
          ]
        ]
      },
      naf: {
        wnd: 7,
        points: [
          [
            "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
            "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
          ],
          [
            "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
            "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
          ],
          [
            "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
            "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
          ],
          [
            "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
            "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
          ],
          [
            "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
            "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
          ],
          [
            "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
            "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
          ],
          [
            "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
            "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
          ],
          [
            "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
            "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
          ],
          [
            "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
            "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
          ],
          [
            "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
            "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
          ],
          [
            "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
            "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
          ],
          [
            "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
            "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
          ],
          [
            "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
            "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
          ],
          [
            "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
            "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
          ],
          [
            "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
            "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
          ],
          [
            "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
            "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
          ],
          [
            "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
            "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
          ],
          [
            "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
            "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
          ],
          [
            "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
            "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
          ],
          [
            "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
            "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
          ],
          [
            "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
            "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
          ],
          [
            "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
            "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
          ],
          [
            "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
            "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
          ],
          [
            "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
            "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
          ],
          [
            "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
            "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
          ],
          [
            "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
            "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
          ],
          [
            "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
            "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
          ],
          [
            "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
            "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
          ],
          [
            "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
            "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
          ],
          [
            "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
            "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
          ],
          [
            "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
            "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
          ],
          [
            "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
            "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
          ],
          [
            "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
            "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
          ],
          [
            "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
            "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
          ],
          [
            "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
            "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
          ],
          [
            "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
            "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
          ],
          [
            "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
            "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
          ],
          [
            "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
            "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
          ],
          [
            "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
            "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
          ],
          [
            "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
            "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
          ],
          [
            "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
            "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
          ],
          [
            "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
            "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
          ],
          [
            "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
            "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
          ],
          [
            "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
            "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
          ],
          [
            "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
            "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
          ],
          [
            "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
            "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
          ],
          [
            "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
            "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
          ],
          [
            "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
            "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
          ],
          [
            "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
            "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
          ],
          [
            "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
            "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
          ],
          [
            "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
            "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
          ],
          [
            "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
            "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
          ],
          [
            "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
            "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
          ],
          [
            "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
            "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
          ],
          [
            "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
            "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
          ],
          [
            "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
            "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
          ],
          [
            "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
            "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
          ],
          [
            "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
            "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
          ],
          [
            "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
            "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
          ],
          [
            "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
            "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
          ],
          [
            "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
            "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
          ],
          [
            "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
            "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
          ],
          [
            "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
            "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
          ],
          [
            "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
            "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
          ],
          [
            "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
            "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
          ],
          [
            "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
            "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
          ],
          [
            "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
            "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
          ],
          [
            "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
            "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
          ],
          [
            "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
            "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
          ],
          [
            "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
            "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
          ],
          [
            "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
            "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
          ],
          [
            "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
            "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
          ],
          [
            "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
            "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
          ],
          [
            "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
            "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
          ],
          [
            "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
            "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
          ],
          [
            "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
            "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
          ],
          [
            "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
            "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
          ],
          [
            "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
            "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
          ],
          [
            "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
            "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
          ],
          [
            "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
            "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
          ],
          [
            "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
            "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
          ],
          [
            "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
            "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
          ],
          [
            "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
            "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
          ],
          [
            "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
            "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
          ],
          [
            "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
            "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
          ],
          [
            "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
            "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
          ],
          [
            "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
            "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
          ],
          [
            "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
            "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
          ],
          [
            "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
            "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
          ],
          [
            "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
            "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
          ],
          [
            "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
            "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
          ],
          [
            "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
            "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
          ],
          [
            "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
            "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
          ],
          [
            "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
            "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
          ],
          [
            "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
            "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
          ],
          [
            "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
            "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
          ],
          [
            "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
            "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
          ],
          [
            "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
            "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
          ],
          [
            "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
            "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
          ],
          [
            "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
            "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
          ],
          [
            "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
            "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
          ],
          [
            "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
            "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
          ],
          [
            "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
            "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
          ],
          [
            "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
            "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
          ],
          [
            "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
            "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
          ],
          [
            "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
            "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
          ],
          [
            "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
            "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
          ],
          [
            "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
            "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
          ],
          [
            "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
            "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
          ],
          [
            "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
            "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
          ],
          [
            "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
            "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
          ],
          [
            "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
            "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
          ],
          [
            "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
            "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
          ],
          [
            "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
            "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
          ],
          [
            "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
            "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
          ],
          [
            "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
            "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
          ],
          [
            "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
            "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
          ],
          [
            "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
            "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
          ],
          [
            "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
            "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
          ],
          [
            "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
            "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
          ],
          [
            "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
            "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
          ],
          [
            "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
            "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
          ],
          [
            "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
            "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
          ],
          [
            "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
            "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
          ],
          [
            "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
            "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
          ],
          [
            "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
            "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
          ],
          [
            "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
            "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
          ]
        ]
      }
    };
    return secp256k1$1;
  }
  (function(exports) {
    var curves2 = exports;
    var hash2 = hash$2;
    var curve$1 = curve;
    var utils2 = utils$m;
    var assert2 = utils2.assert;
    function PresetCurve(options) {
      if (options.type === "short")
        this.curve = new curve$1.short(options);
      else if (options.type === "edwards")
        this.curve = new curve$1.edwards(options);
      else
        this.curve = new curve$1.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;
      assert2(this.g.validate(), "Invalid curve");
      assert2(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
    }
    curves2.PresetCurve = PresetCurve;
    function defineCurve(name2, options) {
      Object.defineProperty(curves2, name2, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve2 = new PresetCurve(options);
          Object.defineProperty(curves2, name2, {
            configurable: true,
            enumerable: true,
            value: curve2
          });
          return curve2;
        }
      });
    }
    defineCurve("p192", {
      type: "short",
      prime: "p192",
      p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
      b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
      n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
      ]
    });
    defineCurve("p224", {
      type: "short",
      prime: "p224",
      p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
      a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
      b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
      n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
      ]
    });
    defineCurve("p256", {
      type: "short",
      prime: null,
      p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
      a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
      b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
      n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
      ]
    });
    defineCurve("p384", {
      type: "short",
      prime: null,
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
      a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
      b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
      n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
      hash: hash2.sha384,
      gRed: false,
      g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
      ]
    });
    defineCurve("p521", {
      type: "short",
      prime: null,
      p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
      a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
      b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
      n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
      hash: hash2.sha512,
      gRed: false,
      g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
      ]
    });
    defineCurve("curve25519", {
      type: "mont",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "76d06",
      b: "1",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "9"
      ]
    });
    defineCurve("ed25519", {
      type: "edwards",
      prime: "p25519",
      p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
      a: "-1",
      c: "1",
      // -121665 * (121666^(-1)) (mod P)
      d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
      n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
      hash: hash2.sha256,
      gRed: false,
      g: [
        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
        // 4/5
        "6666666666666666666666666666666666666666666666666666666666666658"
      ]
    });
    var pre;
    try {
      pre = requireSecp256k1();
    } catch (e) {
      pre = void 0;
    }
    defineCurve("secp256k1", {
      type: "short",
      prime: "k256",
      p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
      a: "0",
      b: "7",
      n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
      h: "1",
      hash: hash2.sha256,
      // Precomputed endomorphism
      beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
      lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
      basis: [
        {
          a: "3086d221a7d46bcde86c90e49284eb15",
          b: "-e4437ed6010e88286f547fa90abfe4c3"
        },
        {
          a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
          b: "3086d221a7d46bcde86c90e49284eb15"
        }
      ],
      gRed: false,
      g: [
        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
        pre
      ]
    });
  })(curves$2);
  var hash$1 = hash$2;
  var utils$6 = utils$l;
  var assert$6 = minimalisticAssert;
  function HmacDRBG$1(options) {
    if (!(this instanceof HmacDRBG$1))
      return new HmacDRBG$1(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils$6.toArray(options.entropy, options.entropyEnc || "hex");
    var nonce2 = utils$6.toArray(options.nonce, options.nonceEnc || "hex");
    var pers = utils$6.toArray(options.pers, options.persEnc || "hex");
    assert$6(
      entropy.length >= this.minEntropy / 8,
      "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
    );
    this._init(entropy, nonce2, pers);
  }
  var hmacDrbg = HmacDRBG$1;
  HmacDRBG$1.prototype._init = function init(entropy, nonce2, pers) {
    var seed = entropy.concat(nonce2).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for (var i2 = 0; i2 < this.V.length; i2++) {
      this.K[i2] = 0;
      this.V[i2] = 1;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 281474976710656;
  };
  HmacDRBG$1.prototype._hmac = function hmac2() {
    return new hash$1.hmac(this.hash, this.K);
  };
  HmacDRBG$1.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([0]);
    if (seed)
      kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed)
      return;
    this.K = this._hmac().update(this.V).update([1]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
  };
  HmacDRBG$1.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    if (typeof entropyEnc !== "string") {
      addEnc = add;
      add = entropyEnc;
      entropyEnc = null;
    }
    entropy = utils$6.toArray(entropy, entropyEnc);
    add = utils$6.toArray(add, addEnc);
    assert$6(
      entropy.length >= this.minEntropy / 8,
      "Not enough entropy. Minimum is: " + this.minEntropy + " bits"
    );
    this._update(entropy.concat(add || []));
    this._reseed = 1;
  };
  HmacDRBG$1.prototype.generate = function generate(len2, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval)
      throw new Error("Reseed is required");
    if (typeof enc !== "string") {
      addEnc = add;
      add = enc;
      enc = null;
    }
    if (add) {
      add = utils$6.toArray(add, addEnc || "hex");
      this._update(add);
    }
    var temp = [];
    while (temp.length < len2) {
      this.V = this._hmac().update(this.V).digest();
      temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len2);
    this._update(add);
    this._reseed++;
    return utils$6.encode(res, enc);
  };
  var BN$4 = bnExports;
  var utils$5 = utils$m;
  var assert$5 = utils$5.assert;
  function KeyPair$3(ec2, options) {
    this.ec = ec2;
    this.priv = null;
    this.pub = null;
    if (options.priv)
      this._importPrivate(options.priv, options.privEnc);
    if (options.pub)
      this._importPublic(options.pub, options.pubEnc);
  }
  var key$2 = KeyPair$3;
  KeyPair$3.fromPublic = function fromPublic(ec2, pub, enc) {
    if (pub instanceof KeyPair$3)
      return pub;
    return new KeyPair$3(ec2, {
      pub,
      pubEnc: enc
    });
  };
  KeyPair$3.fromPrivate = function fromPrivate(ec2, priv, enc) {
    if (priv instanceof KeyPair$3)
      return priv;
    return new KeyPair$3(ec2, {
      priv,
      privEnc: enc
    });
  };
  KeyPair$3.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity())
      return { result: false, reason: "Invalid public key" };
    if (!pub.validate())
      return { result: false, reason: "Public key is not a point" };
    if (!pub.mul(this.ec.curve.n).isInfinity())
      return { result: false, reason: "Public key * N != O" };
    return { result: true, reason: null };
  };
  KeyPair$3.prototype.getPublic = function getPublic(compact, enc) {
    if (typeof compact === "string") {
      enc = compact;
      compact = null;
    }
    if (!this.pub)
      this.pub = this.ec.g.mul(this.priv);
    if (!enc)
      return this.pub;
    return this.pub.encode(enc, compact);
  };
  KeyPair$3.prototype.getPrivate = function getPrivate(enc) {
    if (enc === "hex")
      return this.priv.toString(16, 2);
    else
      return this.priv;
  };
  KeyPair$3.prototype._importPrivate = function _importPrivate(key2, enc) {
    this.priv = new BN$4(key2, enc || 16);
    this.priv = this.priv.umod(this.ec.curve.n);
  };
  KeyPair$3.prototype._importPublic = function _importPublic(key2, enc) {
    if (key2.x || key2.y) {
      if (this.ec.curve.type === "mont") {
        assert$5(key2.x, "Need x coordinate");
      } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
        assert$5(key2.x && key2.y, "Need both x and y coordinate");
      }
      this.pub = this.ec.curve.point(key2.x, key2.y);
      return;
    }
    this.pub = this.ec.curve.decodePoint(key2, enc);
  };
  KeyPair$3.prototype.derive = function derive(pub) {
    if (!pub.validate()) {
      assert$5(pub.validate(), "public point not validated");
    }
    return pub.mul(this.priv).getX();
  };
  KeyPair$3.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
  };
  KeyPair$3.prototype.verify = function verify(msg, signature2) {
    return this.ec.verify(msg, signature2, this);
  };
  KeyPair$3.prototype.inspect = function inspect() {
    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
  };
  var BN$3 = bnExports;
  var utils$4 = utils$m;
  var assert$4 = utils$4.assert;
  function Signature$3(options, enc) {
    if (options instanceof Signature$3)
      return options;
    if (this._importDER(options, enc))
      return;
    assert$4(options.r && options.s, "Signature without r or s");
    this.r = new BN$3(options.r, 16);
    this.s = new BN$3(options.s, 16);
    if (options.recoveryParam === void 0)
      this.recoveryParam = null;
    else
      this.recoveryParam = options.recoveryParam;
  }
  var signature$1 = Signature$3;
  function Position() {
    this.place = 0;
  }
  function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 128)) {
      return initial;
    }
    var octetLen = initial & 15;
    if (octetLen === 0 || octetLen > 4) {
      return false;
    }
    if (buf[p.place] === 0) {
      return false;
    }
    var val = 0;
    for (var i2 = 0, off = p.place; i2 < octetLen; i2++, off++) {
      val <<= 8;
      val |= buf[off];
      val >>>= 0;
    }
    if (val <= 127) {
      return false;
    }
    p.place = off;
    return val;
  }
  function rmPadding(buf) {
    var i2 = 0;
    var len2 = buf.length - 1;
    while (!buf[i2] && !(buf[i2 + 1] & 128) && i2 < len2) {
      i2++;
    }
    if (i2 === 0) {
      return buf;
    }
    return buf.slice(i2);
  }
  Signature$3.prototype._importDER = function _importDER(data, enc) {
    data = utils$4.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 48) {
      return false;
    }
    var len2 = getLength(data, p);
    if (len2 === false) {
      return false;
    }
    if (len2 + p.place !== data.length) {
      return false;
    }
    if (data[p.place++] !== 2) {
      return false;
    }
    var rlen = getLength(data, p);
    if (rlen === false) {
      return false;
    }
    if ((data[p.place] & 128) !== 0) {
      return false;
    }
    var r2 = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 2) {
      return false;
    }
    var slen = getLength(data, p);
    if (slen === false) {
      return false;
    }
    if (data.length !== slen + p.place) {
      return false;
    }
    if ((data[p.place] & 128) !== 0) {
      return false;
    }
    var s2 = data.slice(p.place, slen + p.place);
    if (r2[0] === 0) {
      if (r2[1] & 128) {
        r2 = r2.slice(1);
      } else {
        return false;
      }
    }
    if (s2[0] === 0) {
      if (s2[1] & 128) {
        s2 = s2.slice(1);
      } else {
        return false;
      }
    }
    this.r = new BN$3(r2);
    this.s = new BN$3(s2);
    this.recoveryParam = null;
    return true;
  };
  function constructLength(arr, len2) {
    if (len2 < 128) {
      arr.push(len2);
      return;
    }
    var octets = 1 + (Math.log(len2) / Math.LN2 >>> 3);
    arr.push(octets | 128);
    while (--octets) {
      arr.push(len2 >>> (octets << 3) & 255);
    }
    arr.push(len2);
  }
  Signature$3.prototype.toDER = function toDER(enc) {
    var r2 = this.r.toArray();
    var s2 = this.s.toArray();
    if (r2[0] & 128)
      r2 = [0].concat(r2);
    if (s2[0] & 128)
      s2 = [0].concat(s2);
    r2 = rmPadding(r2);
    s2 = rmPadding(s2);
    while (!s2[0] && !(s2[1] & 128)) {
      s2 = s2.slice(1);
    }
    var arr = [2];
    constructLength(arr, r2.length);
    arr = arr.concat(r2);
    arr.push(2);
    constructLength(arr, s2.length);
    var backHalf = arr.concat(s2);
    var res = [48];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils$4.encode(res, enc);
  };
  var BN$2 = bnExports;
  var HmacDRBG = hmacDrbg;
  var utils$3 = utils$m;
  var curves$1 = curves$2;
  var rand = brorandExports;
  var assert$3 = utils$3.assert;
  var KeyPair$2 = key$2;
  var Signature$2 = signature$1;
  function EC$1(options) {
    if (!(this instanceof EC$1))
      return new EC$1(options);
    if (typeof options === "string") {
      assert$3(
        Object.prototype.hasOwnProperty.call(curves$1, options),
        "Unknown curve " + options
      );
      options = curves$1[options];
    }
    if (options instanceof curves$1.PresetCurve)
      options = { curve: options };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    this.hash = options.hash || options.curve.hash;
  }
  var ec$1 = EC$1;
  EC$1.prototype.keyPair = function keyPair(options) {
    return new KeyPair$2(this, options);
  };
  EC$1.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair$2.fromPrivate(this, priv, enc);
  };
  EC$1.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair$2.fromPublic(this, pub, enc);
  };
  EC$1.prototype.genKeyPair = function genKeyPair(options) {
    if (!options)
      options = {};
    var drbg = new HmacDRBG({
      hash: this.hash,
      pers: options.pers,
      persEnc: options.persEnc || "utf8",
      entropy: options.entropy || rand(this.hash.hmacStrength),
      entropyEnc: options.entropy && options.entropyEnc || "utf8",
      nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN$2(2));
    for (; ; ) {
      var priv = new BN$2(drbg.generate(bytes));
      if (priv.cmp(ns2) > 0)
        continue;
      priv.iaddn(1);
      return this.keyFromPrivate(priv);
    }
  };
  EC$1.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0)
      msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0)
      return msg.sub(this.n);
    else
      return msg;
  };
  EC$1.prototype.sign = function sign(msg, key2, enc, options) {
    if (typeof enc === "object") {
      options = enc;
      enc = null;
    }
    if (!options)
      options = {};
    key2 = this.keyFromPrivate(key2, enc);
    msg = this._truncateToN(new BN$2(msg, 16));
    var bytes = this.n.byteLength();
    var bkey = key2.getPrivate().toArray("be", bytes);
    var nonce2 = msg.toArray("be", bytes);
    var drbg = new HmacDRBG({
      hash: this.hash,
      entropy: bkey,
      nonce: nonce2,
      pers: options.pers,
      persEnc: options.persEnc || "utf8"
    });
    var ns1 = this.n.sub(new BN$2(1));
    for (var iter = 0; ; iter++) {
      var k = options.k ? options.k(iter) : new BN$2(drbg.generate(this.n.byteLength()));
      k = this._truncateToN(k, true);
      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
        continue;
      var kp = this.g.mul(k);
      if (kp.isInfinity())
        continue;
      var kpX = kp.getX();
      var r2 = kpX.umod(this.n);
      if (r2.cmpn(0) === 0)
        continue;
      var s2 = k.invm(this.n).mul(r2.mul(key2.getPrivate()).iadd(msg));
      s2 = s2.umod(this.n);
      if (s2.cmpn(0) === 0)
        continue;
      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r2) !== 0 ? 2 : 0);
      if (options.canonical && s2.cmp(this.nh) > 0) {
        s2 = this.n.sub(s2);
        recoveryParam ^= 1;
      }
      return new Signature$2({ r: r2, s: s2, recoveryParam });
    }
  };
  EC$1.prototype.verify = function verify(msg, signature2, key2, enc) {
    msg = this._truncateToN(new BN$2(msg, 16));
    key2 = this.keyFromPublic(key2, enc);
    signature2 = new Signature$2(signature2, "hex");
    var r2 = signature2.r;
    var s2 = signature2.s;
    if (r2.cmpn(1) < 0 || r2.cmp(this.n) >= 0)
      return false;
    if (s2.cmpn(1) < 0 || s2.cmp(this.n) >= 0)
      return false;
    var sinv = s2.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r2).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
      p = this.g.mulAdd(u1, key2.getPublic(), u2);
      if (p.isInfinity())
        return false;
      return p.getX().umod(this.n).cmp(r2) === 0;
    }
    p = this.g.jmulAdd(u1, key2.getPublic(), u2);
    if (p.isInfinity())
      return false;
    return p.eqXToP(r2);
  };
  EC$1.prototype.recoverPubKey = function(msg, signature2, j, enc) {
    assert$3((3 & j) === j, "The recovery param is more than two bits");
    signature2 = new Signature$2(signature2, enc);
    var n = this.n;
    var e = new BN$2(msg);
    var r2 = signature2.r;
    var s2 = signature2.s;
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r2.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
      throw new Error("Unable to find sencond key candinate");
    if (isSecondKey)
      r2 = this.curve.pointFromX(r2.add(this.curve.n), isYOdd);
    else
      r2 = this.curve.pointFromX(r2, isYOdd);
    var rInv = signature2.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s22 = s2.mul(rInv).umod(n);
    return this.g.mulAdd(s1, r2, s22);
  };
  EC$1.prototype.getKeyRecoveryParam = function(e, signature2, Q, enc) {
    signature2 = new Signature$2(signature2, enc);
    if (signature2.recoveryParam !== null)
      return signature2.recoveryParam;
    for (var i2 = 0; i2 < 4; i2++) {
      var Qprime;
      try {
        Qprime = this.recoverPubKey(e, signature2, i2);
      } catch (e2) {
        continue;
      }
      if (Qprime.eq(Q))
        return i2;
    }
    throw new Error("Unable to find valid recovery factor");
  };
  var utils$2 = utils$m;
  var assert$2 = utils$2.assert;
  var parseBytes$2 = utils$2.parseBytes;
  var cachedProperty$1 = utils$2.cachedProperty;
  function KeyPair$1(eddsa2, params) {
    this.eddsa = eddsa2;
    this._secret = parseBytes$2(params.secret);
    if (eddsa2.isPoint(params.pub))
      this._pub = params.pub;
    else
      this._pubBytes = parseBytes$2(params.pub);
  }
  KeyPair$1.fromPublic = function fromPublic(eddsa2, pub) {
    if (pub instanceof KeyPair$1)
      return pub;
    return new KeyPair$1(eddsa2, { pub });
  };
  KeyPair$1.fromSecret = function fromSecret(eddsa2, secret) {
    if (secret instanceof KeyPair$1)
      return secret;
    return new KeyPair$1(eddsa2, { secret });
  };
  KeyPair$1.prototype.secret = function secret() {
    return this._secret;
  };
  cachedProperty$1(KeyPair$1, "pubBytes", function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
  });
  cachedProperty$1(KeyPair$1, "pub", function pub() {
    if (this._pubBytes)
      return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
  });
  cachedProperty$1(KeyPair$1, "privBytes", function privBytes() {
    var eddsa2 = this.eddsa;
    var hash2 = this.hash();
    var lastIx = eddsa2.encodingLength - 1;
    var a = hash2.slice(0, eddsa2.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
  });
  cachedProperty$1(KeyPair$1, "priv", function priv() {
    return this.eddsa.decodeInt(this.privBytes());
  });
  cachedProperty$1(KeyPair$1, "hash", function hash2() {
    return this.eddsa.hash().update(this.secret()).digest();
  });
  cachedProperty$1(KeyPair$1, "messagePrefix", function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
  });
  KeyPair$1.prototype.sign = function sign(message2) {
    assert$2(this._secret, "KeyPair can only verify");
    return this.eddsa.sign(message2, this);
  };
  KeyPair$1.prototype.verify = function verify(message2, sig) {
    return this.eddsa.verify(message2, sig, this);
  };
  KeyPair$1.prototype.getSecret = function getSecret(enc) {
    assert$2(this._secret, "KeyPair is public only");
    return utils$2.encode(this.secret(), enc);
  };
  KeyPair$1.prototype.getPublic = function getPublic(enc) {
    return utils$2.encode(this.pubBytes(), enc);
  };
  var key$1 = KeyPair$1;
  var BN$1 = bnExports;
  var utils$1 = utils$m;
  var assert$1 = utils$1.assert;
  var cachedProperty = utils$1.cachedProperty;
  var parseBytes$1 = utils$1.parseBytes;
  function Signature$1(eddsa2, sig) {
    this.eddsa = eddsa2;
    if (typeof sig !== "object")
      sig = parseBytes$1(sig);
    if (Array.isArray(sig)) {
      assert$1(sig.length === eddsa2.encodingLength * 2, "Signature has invalid size");
      sig = {
        R: sig.slice(0, eddsa2.encodingLength),
        S: sig.slice(eddsa2.encodingLength)
      };
    }
    assert$1(sig.R && sig.S, "Signature without R or S");
    if (eddsa2.isPoint(sig.R))
      this._R = sig.R;
    if (sig.S instanceof BN$1)
      this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
  }
  cachedProperty(Signature$1, "S", function S() {
    return this.eddsa.decodeInt(this.Sencoded());
  });
  cachedProperty(Signature$1, "R", function R() {
    return this.eddsa.decodePoint(this.Rencoded());
  });
  cachedProperty(Signature$1, "Rencoded", function Rencoded() {
    return this.eddsa.encodePoint(this.R());
  });
  cachedProperty(Signature$1, "Sencoded", function Sencoded() {
    return this.eddsa.encodeInt(this.S());
  });
  Signature$1.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
  };
  Signature$1.prototype.toHex = function toHex2() {
    return utils$1.encode(this.toBytes(), "hex").toUpperCase();
  };
  var signature = Signature$1;
  var hash = hash$2;
  var curves = curves$2;
  var utils = utils$m;
  var assert = utils.assert;
  var parseBytes = utils.parseBytes;
  var KeyPair = key$1;
  var Signature = signature;
  function EDDSA(curve2) {
    assert(curve2 === "ed25519", "only tested with ed25519 so far");
    if (!(this instanceof EDDSA))
      return new EDDSA(curve2);
    curve2 = curves[curve2].curve;
    this.curve = curve2;
    this.g = curve2.g;
    this.g.precompute(curve2.n.bitLength() + 1);
    this.pointClass = curve2.point().constructor;
    this.encodingLength = Math.ceil(curve2.n.bitLength() / 8);
    this.hash = hash.sha512;
  }
  var eddsa = EDDSA;
  EDDSA.prototype.sign = function sign(message2, secret) {
    message2 = parseBytes(message2);
    var key2 = this.keyFromSecret(secret);
    var r2 = this.hashInt(key2.messagePrefix(), message2);
    var R = this.g.mul(r2);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key2.pubBytes(), message2).mul(key2.priv());
    var S = r2.add(s_).umod(this.curve.n);
    return this.makeSignature({ R, S, Rencoded });
  };
  EDDSA.prototype.verify = function verify(message2, sig, pub) {
    message2 = parseBytes(message2);
    sig = this.makeSignature(sig);
    if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {
      return false;
    }
    var key2 = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key2.pubBytes(), message2);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key2.pub().mul(h));
    return RplusAh.eq(SG);
  };
  EDDSA.prototype.hashInt = function hashInt() {
    var hash2 = this.hash();
    for (var i2 = 0; i2 < arguments.length; i2++)
      hash2.update(arguments[i2]);
    return utils.intFromLE(hash2.digest()).umod(this.curve.n);
  };
  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
  };
  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
  };
  EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature)
      return sig;
    return new Signature(this, sig);
  };
  EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray("le", this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
    return enc;
  };
  EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~128);
    var xIsOdd = (bytes[lastIx] & 128) !== 0;
    var y = utils.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
  };
  EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray("le", this.encodingLength);
  };
  EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils.intFromLE(bytes);
  };
  EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
  };
  (function(exports) {
    var elliptic2 = exports;
    elliptic2.version = require$$0$1.version;
    elliptic2.utils = utils$m;
    elliptic2.rand = brorandExports;
    elliptic2.curve = curve;
    elliptic2.curves = curves$2;
    elliptic2.ec = ec$1;
    elliptic2.eddsa = eddsa;
  })(elliptic$2);
  const EC = elliptic$2.ec;
  const ec = new EC("secp256k1");
  const ecparams = ec.curve;
  const BN = ecparams.n.constructor;
  function loadCompressedPublicKey(first, xbuf) {
    let x = new BN(xbuf);
    if (x.cmp(ecparams.p) >= 0) return null;
    x = x.toRed(ecparams.red);
    let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
    if (first === 3 !== y.isOdd()) y = y.redNeg();
    return ec.keyPair({ pub: { x, y } });
  }
  function loadUncompressedPublicKey(first, xbuf, ybuf) {
    let x = new BN(xbuf);
    let y = new BN(ybuf);
    if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;
    x = x.toRed(ecparams.red);
    y = y.toRed(ecparams.red);
    if ((first === 6 || first === 7) && y.isOdd() !== (first === 7)) return null;
    const x3 = x.redSqr().redIMul(x);
    if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;
    return ec.keyPair({ pub: { x, y } });
  }
  function loadPublicKey(pubkey) {
    const first = pubkey[0];
    switch (first) {
      case 2:
      case 3:
        if (pubkey.length !== 33) return null;
        return loadCompressedPublicKey(first, pubkey.subarray(1, 33));
      case 4:
      case 6:
      case 7:
        if (pubkey.length !== 65) return null;
        return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));
      default:
        return null;
    }
  }
  function savePublicKey(output, point) {
    const pubkey = point.encode(null, output.length === 33);
    for (let i2 = 0; i2 < output.length; ++i2) output[i2] = pubkey[i2];
  }
  var elliptic$1 = {
    contextRandomize() {
      return 0;
    },
    privateKeyVerify(seckey) {
      const bn2 = new BN(seckey);
      return bn2.cmp(ecparams.n) < 0 && !bn2.isZero() ? 0 : 1;
    },
    privateKeyNegate(seckey) {
      const bn2 = new BN(seckey);
      const negate = ecparams.n.sub(bn2).umod(ecparams.n).toArrayLike(Uint8Array, "be", 32);
      seckey.set(negate);
      return 0;
    },
    privateKeyTweakAdd(seckey, tweak) {
      const bn2 = new BN(tweak);
      if (bn2.cmp(ecparams.n) >= 0) return 1;
      bn2.iadd(new BN(seckey));
      if (bn2.cmp(ecparams.n) >= 0) bn2.isub(ecparams.n);
      if (bn2.isZero()) return 1;
      const tweaked = bn2.toArrayLike(Uint8Array, "be", 32);
      seckey.set(tweaked);
      return 0;
    },
    privateKeyTweakMul(seckey, tweak) {
      let bn2 = new BN(tweak);
      if (bn2.cmp(ecparams.n) >= 0 || bn2.isZero()) return 1;
      bn2.imul(new BN(seckey));
      if (bn2.cmp(ecparams.n) >= 0) bn2 = bn2.umod(ecparams.n);
      const tweaked = bn2.toArrayLike(Uint8Array, "be", 32);
      seckey.set(tweaked);
      return 0;
    },
    publicKeyVerify(pubkey) {
      const pair = loadPublicKey(pubkey);
      return pair === null ? 1 : 0;
    },
    publicKeyCreate(output, seckey) {
      const bn2 = new BN(seckey);
      if (bn2.cmp(ecparams.n) >= 0 || bn2.isZero()) return 1;
      const point = ec.keyFromPrivate(seckey).getPublic();
      savePublicKey(output, point);
      return 0;
    },
    publicKeyConvert(output, pubkey) {
      const pair = loadPublicKey(pubkey);
      if (pair === null) return 1;
      const point = pair.getPublic();
      savePublicKey(output, point);
      return 0;
    },
    publicKeyNegate(output, pubkey) {
      const pair = loadPublicKey(pubkey);
      if (pair === null) return 1;
      const point = pair.getPublic();
      point.y = point.y.redNeg();
      savePublicKey(output, point);
      return 0;
    },
    publicKeyCombine(output, pubkeys) {
      const pairs = new Array(pubkeys.length);
      for (let i2 = 0; i2 < pubkeys.length; ++i2) {
        pairs[i2] = loadPublicKey(pubkeys[i2]);
        if (pairs[i2] === null) return 1;
      }
      let point = pairs[0].getPublic();
      for (let i2 = 1; i2 < pairs.length; ++i2) point = point.add(pairs[i2].pub);
      if (point.isInfinity()) return 2;
      savePublicKey(output, point);
      return 0;
    },
    publicKeyTweakAdd(output, pubkey, tweak) {
      const pair = loadPublicKey(pubkey);
      if (pair === null) return 1;
      tweak = new BN(tweak);
      if (tweak.cmp(ecparams.n) >= 0) return 2;
      const point = pair.getPublic().add(ecparams.g.mul(tweak));
      if (point.isInfinity()) return 2;
      savePublicKey(output, point);
      return 0;
    },
    publicKeyTweakMul(output, pubkey, tweak) {
      const pair = loadPublicKey(pubkey);
      if (pair === null) return 1;
      tweak = new BN(tweak);
      if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2;
      const point = pair.getPublic().mul(tweak);
      savePublicKey(output, point);
      return 0;
    },
    signatureNormalize(sig) {
      const r2 = new BN(sig.subarray(0, 32));
      const s2 = new BN(sig.subarray(32, 64));
      if (r2.cmp(ecparams.n) >= 0 || s2.cmp(ecparams.n) >= 0) return 1;
      if (s2.cmp(ec.nh) === 1) {
        sig.set(ecparams.n.sub(s2).toArrayLike(Uint8Array, "be", 32), 32);
      }
      return 0;
    },
    // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
    // Adapted for Uint8Array instead Buffer
    signatureExport(obj, sig) {
      const sigR = sig.subarray(0, 32);
      const sigS = sig.subarray(32, 64);
      if (new BN(sigR).cmp(ecparams.n) >= 0) return 1;
      if (new BN(sigS).cmp(ecparams.n) >= 0) return 1;
      const { output } = obj;
      let r2 = output.subarray(4, 4 + 33);
      r2[0] = 0;
      r2.set(sigR, 1);
      let lenR = 33;
      let posR = 0;
      for (; lenR > 1 && r2[posR] === 0 && !(r2[posR + 1] & 128); --lenR, ++posR) ;
      r2 = r2.subarray(posR);
      if (r2[0] & 128) return 1;
      if (lenR > 1 && r2[0] === 0 && !(r2[1] & 128)) return 1;
      let s2 = output.subarray(6 + 33, 6 + 33 + 33);
      s2[0] = 0;
      s2.set(sigS, 1);
      let lenS = 33;
      let posS = 0;
      for (; lenS > 1 && s2[posS] === 0 && !(s2[posS + 1] & 128); --lenS, ++posS) ;
      s2 = s2.subarray(posS);
      if (s2[0] & 128) return 1;
      if (lenS > 1 && s2[0] === 0 && !(s2[1] & 128)) return 1;
      obj.outputlen = 6 + lenR + lenS;
      output[0] = 48;
      output[1] = obj.outputlen - 2;
      output[2] = 2;
      output[3] = r2.length;
      output.set(r2, 4);
      output[4 + lenR] = 2;
      output[5 + lenR] = s2.length;
      output.set(s2, 6 + lenR);
      return 0;
    },
    // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
    // Adapted for Uint8Array instead Buffer
    signatureImport(output, sig) {
      if (sig.length < 8) return 1;
      if (sig.length > 72) return 1;
      if (sig[0] !== 48) return 1;
      if (sig[1] !== sig.length - 2) return 1;
      if (sig[2] !== 2) return 1;
      const lenR = sig[3];
      if (lenR === 0) return 1;
      if (5 + lenR >= sig.length) return 1;
      if (sig[4 + lenR] !== 2) return 1;
      const lenS = sig[5 + lenR];
      if (lenS === 0) return 1;
      if (6 + lenR + lenS !== sig.length) return 1;
      if (sig[4] & 128) return 1;
      if (lenR > 1 && sig[4] === 0 && !(sig[5] & 128)) return 1;
      if (sig[lenR + 6] & 128) return 1;
      if (lenS > 1 && sig[lenR + 6] === 0 && !(sig[lenR + 7] & 128)) return 1;
      let sigR = sig.subarray(4, 4 + lenR);
      if (sigR.length === 33 && sigR[0] === 0) sigR = sigR.subarray(1);
      if (sigR.length > 32) return 1;
      let sigS = sig.subarray(6 + lenR);
      if (sigS.length === 33 && sigS[0] === 0) sigS = sigS.slice(1);
      if (sigS.length > 32) throw new Error("S length is too long");
      let r2 = new BN(sigR);
      if (r2.cmp(ecparams.n) >= 0) r2 = new BN(0);
      let s2 = new BN(sig.subarray(6 + lenR));
      if (s2.cmp(ecparams.n) >= 0) s2 = new BN(0);
      output.set(r2.toArrayLike(Uint8Array, "be", 32), 0);
      output.set(s2.toArrayLike(Uint8Array, "be", 32), 32);
      return 0;
    },
    ecdsaSign(obj, message2, seckey, data, noncefn) {
      if (noncefn) {
        const _noncefn = noncefn;
        noncefn = (counter) => {
          const nonce2 = _noncefn(message2, seckey, null, data, counter);
          const isValid = nonce2 instanceof Uint8Array && nonce2.length === 32;
          if (!isValid) throw new Error("This is the way");
          return new BN(nonce2);
        };
      }
      const d = new BN(seckey);
      if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1;
      let sig;
      try {
        sig = ec.sign(message2, seckey, { canonical: true, k: noncefn, pers: data });
      } catch (err) {
        return 1;
      }
      obj.signature.set(sig.r.toArrayLike(Uint8Array, "be", 32), 0);
      obj.signature.set(sig.s.toArrayLike(Uint8Array, "be", 32), 32);
      obj.recid = sig.recoveryParam;
      return 0;
    },
    ecdsaVerify(sig, msg32, pubkey) {
      const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) };
      const sigr = new BN(sigObj.r);
      const sigs = new BN(sigObj.s);
      if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
      if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3;
      const pair = loadPublicKey(pubkey);
      if (pair === null) return 2;
      const point = pair.getPublic();
      const isValid = ec.verify(msg32, sigObj, point);
      return isValid ? 0 : 3;
    },
    ecdsaRecover(output, sig, recid, msg32) {
      const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) };
      const sigr = new BN(sigObj.r);
      const sigs = new BN(sigObj.s);
      if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1;
      if (sigr.isZero() || sigs.isZero()) return 2;
      let point;
      try {
        point = ec.recoverPubKey(msg32, sigObj, recid);
      } catch (err) {
        return 2;
      }
      savePublicKey(output, point);
      return 0;
    },
    ecdh(output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
      const pair = loadPublicKey(pubkey);
      if (pair === null) return 1;
      const scalar = new BN(seckey);
      if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2;
      const point = pair.getPublic().mul(scalar);
      if (hashfn === void 0) {
        const data2 = point.encode(null, true);
        const sha2562 = ec.hash().update(data2).digest();
        for (let i2 = 0; i2 < 32; ++i2) output[i2] = sha2562[i2];
      } else {
        if (!xbuf) xbuf = new Uint8Array(32);
        const x = point.getX().toArray("be", 32);
        for (let i2 = 0; i2 < 32; ++i2) xbuf[i2] = x[i2];
        if (!ybuf) ybuf = new Uint8Array(32);
        const y = point.getY().toArray("be", 32);
        for (let i2 = 0; i2 < 32; ++i2) ybuf[i2] = y[i2];
        const hash2 = hashfn(xbuf, ybuf, data);
        const isValid = hash2 instanceof Uint8Array && hash2.length === output.length;
        if (!isValid) return 2;
        output.set(hash2);
      }
      return 0;
    }
  };
  var elliptic = lib(elliptic$1);
  const secp256k1 = /* @__PURE__ */ getDefaultExportFromCjs(elliptic);
  var buffer = {};
  var base64Js = {};
  base64Js.byteLength = byteLength;
  base64Js.toByteArray = toByteArray;
  base64Js.fromByteArray = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
  var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
  function getLens(b64) {
    var len2 = b64.length;
    if (len2 % 4 > 0) {
      throw new Error("Invalid string. Length must be a multiple of 4");
    }
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len2;
    var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }
  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i2;
    for (i2 = 0; i2 < len2; i2 += 4) {
      tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
      arr[curByte++] = tmp >> 16 & 255;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    return arr;
  }
  function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
  }
  function encodeChunk(uint8, start2, end) {
    var tmp;
    var output = [];
    for (var i2 = start2; i2 < end; i2 += 3) {
      tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
      output.push(tripletToBase64(tmp));
    }
    return output.join("");
  }
  function fromByteArray(uint8) {
    var tmp;
    var len2 = uint8.length;
    var extraBytes = len2 % 3;
    var parts = [];
    var maxChunkLength = 16383;
    for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
      parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
    }
    if (extraBytes === 1) {
      tmp = uint8[len2 - 1];
      parts.push(
        lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
      );
    } else if (extraBytes === 2) {
      tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
      parts.push(
        lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
      );
    }
    return parts.join("");
  }
  var ieee754 = {};
  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
  ieee754.read = function(buffer2, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i2 = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s2 = buffer2[offset + i2];
    i2 += d;
    e = s2 & (1 << -nBits) - 1;
    s2 >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer2[offset + i2], i2 += d, nBits -= 8) {
    }
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer2[offset + i2], i2 += d, nBits -= 8) {
    }
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s2 ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s2 ? -1 : 1) * m * Math.pow(2, e - mLen);
  };
  ieee754.write = function(buffer2, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i2 = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s2 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer2[offset + i2] = m & 255, i2 += d, m /= 256, mLen -= 8) {
    }
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer2[offset + i2] = e & 255, i2 += d, e /= 256, eLen -= 8) {
    }
    buffer2[offset + i2 - d] |= s2 * 128;
  };
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  (function(exports) {
    const base64 = base64Js;
    const ieee754$1 = ieee754;
    const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
    exports.Buffer = Buffer2;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    const K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error(
        "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
      );
    }
    function typedArraySupport() {
      try {
        const arr = new Uint8Array(1);
        const proto = { foo: function() {
          return 42;
        } };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer2.prototype, "parent", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this)) return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer2.prototype, "offset", {
      enumerable: true,
      get: function() {
        if (!Buffer2.isBuffer(this)) return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      const buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function Buffer2(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError(
            'The "string" argument must be of type string. Received type number'
          );
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer2.poolSize = 8192;
    function from(value, encodingOrOffset, length) {
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "number") {
        throw new TypeError(
          'The "value" argument must not be of type number. Received type number'
        );
      }
      const valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer2.from(valueOf, encodingOrOffset, length);
      }
      const b = fromObject(value);
      if (b) return b;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
      }
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
      );
    }
    Buffer2.from = function(value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer2, Uint8Array);
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      }
      return createBuffer(size);
    }
    Buffer2.alloc = function(size, fill, encoding) {
      return alloc(size, fill, encoding);
    };
    function allocUnsafe(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    Buffer2.allocUnsafe = function(size) {
      return allocUnsafe(size);
    };
    Buffer2.allocUnsafeSlow = function(size) {
      return allocUnsafe(size);
    };
    function fromString(string, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer2.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      const length = byteLength2(string, encoding) | 0;
      let buf = createBuffer(length);
      const actual = buf.write(string, encoding);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array) {
      const length = array.length < 0 ? 0 : checked(array.length) | 0;
      const buf = createBuffer(length);
      for (let i2 = 0; i2 < length; i2 += 1) {
        buf[i2] = array[i2] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        const copy2 = new Uint8Array(arrayView);
        return fromArrayBuffer(copy2.buffer, copy2.byteOffset, copy2.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      let buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array);
      } else if (length === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer2.isBuffer(obj)) {
        const len2 = checked(obj.length) | 0;
        const buf = createBuffer(len2);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len2);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer2.alloc(+length);
    }
    Buffer2.isBuffer = function isBuffer(b) {
      return b != null && b._isBuffer === true && b !== Buffer2.prototype;
    };
    Buffer2.compare = function compare(a, b) {
      if (isInstance(a, Uint8Array)) a = Buffer2.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array)) b = Buffer2.from(b, b.offset, b.byteLength);
      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
        throw new TypeError(
          'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
        );
      }
      if (a === b) return 0;
      let x = a.length;
      let y = b.length;
      for (let i2 = 0, len2 = Math.min(x, y); i2 < len2; ++i2) {
        if (a[i2] !== b[i2]) {
          x = a[i2];
          y = b[i2];
          break;
        }
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };
    Buffer2.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer2.concat = function concat(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer2.alloc(0);
      }
      let i2;
      if (length === void 0) {
        length = 0;
        for (i2 = 0; i2 < list.length; ++i2) {
          length += list[i2].length;
        }
      }
      const buffer2 = Buffer2.allocUnsafe(length);
      let pos = 0;
      for (i2 = 0; i2 < list.length; ++i2) {
        let buf = list[i2];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer2.length) {
            if (!Buffer2.isBuffer(buf)) buf = Buffer2.from(buf);
            buf.copy(buffer2, pos);
          } else {
            Uint8Array.prototype.set.call(
              buffer2,
              buf,
              pos
            );
          }
        } else if (!Buffer2.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer2, pos);
        }
        pos += buf.length;
      }
      return buffer2;
    };
    function byteLength2(string, encoding) {
      if (Buffer2.isBuffer(string)) {
        return string.length;
      }
      if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
        return string.byteLength;
      }
      if (typeof string !== "string") {
        throw new TypeError(
          'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
        );
      }
      const len2 = string.length;
      const mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len2 === 0) return 0;
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len2;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len2 * 2;
          case "hex":
            return len2 >>> 1;
          case "base64":
            return base64ToBytes(string).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.byteLength = byteLength2;
    function slowToString(encoding, start2, end) {
      let loweredCase = false;
      if (start2 === void 0 || start2 < 0) {
        start2 = 0;
      }
      if (start2 > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start2 >>>= 0;
      if (end <= start2) {
        return "";
      }
      if (!encoding) encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start2, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start2, end);
          case "ascii":
            return asciiSlice(this, start2, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start2, end);
          case "base64":
            return base64Slice(this, start2, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start2, end);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.prototype._isBuffer = true;
    function swap(b, n, m) {
      const i2 = b[n];
      b[n] = b[m];
      b[m] = i2;
    }
    Buffer2.prototype.swap16 = function swap16() {
      const len2 = this.length;
      if (len2 % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (let i2 = 0; i2 < len2; i2 += 2) {
        swap(this, i2, i2 + 1);
      }
      return this;
    };
    Buffer2.prototype.swap32 = function swap32() {
      const len2 = this.length;
      if (len2 % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (let i2 = 0; i2 < len2; i2 += 4) {
        swap(this, i2, i2 + 3);
        swap(this, i2 + 1, i2 + 2);
      }
      return this;
    };
    Buffer2.prototype.swap64 = function swap64() {
      const len2 = this.length;
      if (len2 % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (let i2 = 0; i2 < len2; i2 += 8) {
        swap(this, i2, i2 + 7);
        swap(this, i2 + 1, i2 + 6);
        swap(this, i2 + 2, i2 + 5);
        swap(this, i2 + 3, i2 + 4);
      }
      return this;
    };
    Buffer2.prototype.toString = function toString2() {
      const length = this.length;
      if (length === 0) return "";
      if (arguments.length === 0) return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
    Buffer2.prototype.equals = function equals(b) {
      if (!Buffer2.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
      if (this === b) return true;
      return Buffer2.compare(this, b) === 0;
    };
    Buffer2.prototype.inspect = function inspect() {
      let str = "";
      const max = exports.INSPECT_MAX_BYTES;
      str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max) str += " ... ";
      return "<Buffer " + str + ">";
    };
    if (customInspectSymbol) {
      Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
    }
    Buffer2.prototype.compare = function compare(target, start2, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer2.from(target, target.offset, target.byteLength);
      }
      if (!Buffer2.isBuffer(target)) {
        throw new TypeError(
          'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
        );
      }
      if (start2 === void 0) {
        start2 = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start2 < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start2 >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start2 >= end) {
        return 1;
      }
      start2 >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target) return 0;
      let x = thisEnd - thisStart;
      let y = end - start2;
      const len2 = Math.min(x, y);
      const thisCopy = this.slice(thisStart, thisEnd);
      const targetCopy = target.slice(start2, end);
      for (let i2 = 0; i2 < len2; ++i2) {
        if (thisCopy[i2] !== targetCopy[i2]) {
          x = thisCopy[i2];
          y = targetCopy[i2];
          break;
        }
      }
      if (x < y) return -1;
      if (y < x) return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
      if (buffer2.length === 0) return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer2.length - 1;
      }
      if (byteOffset < 0) byteOffset = buffer2.length + byteOffset;
      if (byteOffset >= buffer2.length) {
        if (dir) return -1;
        else byteOffset = buffer2.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
      }
      if (typeof val === "string") {
        val = Buffer2.from(val, encoding);
      }
      if (Buffer2.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      let indexSize = 1;
      let arrLength = arr.length;
      let valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read(buf, i3) {
        if (indexSize === 1) {
          return buf[i3];
        } else {
          return buf.readUInt16BE(i3 * indexSize);
        }
      }
      let i2;
      if (dir) {
        let foundIndex = -1;
        for (i2 = byteOffset; i2 < arrLength; i2++) {
          if (read(arr, i2) === read(val, foundIndex === -1 ? 0 : i2 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i2;
            if (i2 - foundIndex + 1 === valLength) return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1) i2 -= i2 - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i2 = byteOffset; i2 >= 0; i2--) {
          let found = true;
          for (let j = 0; j < valLength; j++) {
            if (read(arr, i2 + j) !== read(val, j)) {
              found = false;
              break;
            }
          }
          if (found) return i2;
        }
      }
      return -1;
    }
    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string, offset, length) {
      offset = Number(offset) || 0;
      const remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      const strLen = string.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      let i2;
      for (i2 = 0; i2 < length; ++i2) {
        const parsed = parseInt(string.substr(i2 * 2, 2), 16);
        if (numberIsNaN(parsed)) return i2;
        buf[offset + i2] = parsed;
      }
      return i2;
    }
    function utf8Write(buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length);
    }
    function base64Write(buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length);
    }
    function ucs2Write(buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
    }
    Buffer2.prototype.write = function write(string, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === void 0) encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error(
          "Buffer.write(string, encoding, offset[, length]) is no longer supported"
        );
      }
      const remaining = this.length - offset;
      if (length === void 0 || length > remaining) length = remaining;
      if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding) encoding = "utf8";
      let loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string, offset, length);
          case "base64":
            return base64Write(this, string, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string, offset, length);
          default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer2.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start2, end) {
      if (start2 === 0 && end === buf.length) {
        return base64.fromByteArray(buf);
      } else {
        return base64.fromByteArray(buf.slice(start2, end));
      }
    }
    function utf8Slice(buf, start2, end) {
      end = Math.min(buf.length, end);
      const res = [];
      let i2 = start2;
      while (i2 < end) {
        const firstByte = buf[i2];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i2 + bytesPerSequence <= end) {
          let secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i2 + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i2 + 1];
              thirdByte = buf[i2 + 2];
              fourthByte = buf[i2 + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i2 += bytesPerSequence;
      }
      return decodeCodePointsArray(res);
    }
    const MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      const len2 = codePoints.length;
      if (len2 <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      let res = "";
      let i2 = 0;
      while (i2 < len2) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i2, i2 += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res;
    }
    function asciiSlice(buf, start2, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i2 = start2; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start2, end) {
      let ret = "";
      end = Math.min(buf.length, end);
      for (let i2 = start2; i2 < end; ++i2) {
        ret += String.fromCharCode(buf[i2]);
      }
      return ret;
    }
    function hexSlice(buf, start2, end) {
      const len2 = buf.length;
      if (!start2 || start2 < 0) start2 = 0;
      if (!end || end < 0 || end > len2) end = len2;
      let out = "";
      for (let i2 = start2; i2 < end; ++i2) {
        out += hexSliceLookupTable[buf[i2]];
      }
      return out;
    }
    function utf16leSlice(buf, start2, end) {
      const bytes = buf.slice(start2, end);
      let res = "";
      for (let i2 = 0; i2 < bytes.length - 1; i2 += 2) {
        res += String.fromCharCode(bytes[i2] + bytes[i2 + 1] * 256);
      }
      return res;
    }
    Buffer2.prototype.slice = function slice(start2, end) {
      const len2 = this.length;
      start2 = ~~start2;
      end = end === void 0 ? len2 : ~~end;
      if (start2 < 0) {
        start2 += len2;
        if (start2 < 0) start2 = 0;
      } else if (start2 > len2) {
        start2 = len2;
      }
      if (end < 0) {
        end += len2;
        if (end < 0) end = 0;
      } else if (end > len2) {
        end = len2;
      }
      if (end < start2) end = start2;
      const newBuf = this.subarray(start2, end);
      Object.setPrototypeOf(newBuf, Buffer2.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
      if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength3, this.length);
      let val = this[offset];
      let mul = 1;
      let i2 = 0;
      while (++i2 < byteLength3 && (mul *= 256)) {
        val += this[offset + i2] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength3, this.length);
      }
      let val = this[offset + --byteLength3];
      let mul = 1;
      while (byteLength3 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength3] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
      const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
      return BigInt(lo) + (BigInt(hi) << BigInt(32));
    });
    Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
      return (BigInt(hi) << BigInt(32)) + BigInt(lo);
    });
    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength3, this.length);
      let val = this[offset];
      let mul = 1;
      let i2 = 0;
      while (++i2 < byteLength3 && (mul *= 256)) {
        val += this[offset + i2] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
      return val;
    };
    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) checkOffset(offset, byteLength3, this.length);
      let i2 = byteLength3;
      let mul = 1;
      let val = this[offset + --i2];
      while (i2 > 0 && (mul *= 256)) {
        val += this[offset + --i2] * mul;
      }
      mul *= 128;
      if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
      return val;
    };
    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128)) return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 2, this.length);
      const val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
      return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
    });
    Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
      offset = offset >>> 0;
      validateNumber(offset, "offset");
      const first = this[offset];
      const last = this[offset + 7];
      if (first === void 0 || last === void 0) {
        boundsError(offset, this.length - 8);
      }
      const val = (first << 24) + // Overflow
      this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
      return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
    });
    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754$1.read(this, offset, true, 23, 4);
    };
    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 4, this.length);
      return ieee754$1.read(this, offset, false, 23, 4);
    };
    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754$1.read(this, offset, true, 52, 8);
    };
    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert) checkOffset(offset, 8, this.length);
      return ieee754$1.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max, min) {
      if (!Buffer2.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
    }
    Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
        checkInt(this, value, offset, byteLength3, maxBytes, 0);
      }
      let mul = 1;
      let i2 = 0;
      this[offset] = value & 255;
      while (++i2 < byteLength3 && (mul *= 256)) {
        this[offset + i2] = value / mul & 255;
      }
      return offset + byteLength3;
    };
    Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength3) - 1;
        checkInt(this, value, offset, byteLength3, maxBytes, 0);
      }
      let i2 = byteLength3 - 1;
      let mul = 1;
      this[offset + i2] = value & 255;
      while (--i2 >= 0 && (mul *= 256)) {
        this[offset + i2] = value / mul & 255;
      }
      return offset + byteLength3;
    };
    Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function wrtBigUInt64LE(buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      lo = lo >> 8;
      buf[offset++] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      hi = hi >> 8;
      buf[offset++] = hi;
      return offset;
    }
    function wrtBigUInt64BE(buf, value, offset, min, max) {
      checkIntBI(value, min, max, buf, offset, 7);
      let lo = Number(value & BigInt(4294967295));
      buf[offset + 7] = lo;
      lo = lo >> 8;
      buf[offset + 6] = lo;
      lo = lo >> 8;
      buf[offset + 5] = lo;
      lo = lo >> 8;
      buf[offset + 4] = lo;
      let hi = Number(value >> BigInt(32) & BigInt(4294967295));
      buf[offset + 3] = hi;
      hi = hi >> 8;
      buf[offset + 2] = hi;
      hi = hi >> 8;
      buf[offset + 1] = hi;
      hi = hi >> 8;
      buf[offset] = hi;
      return offset + 8;
    }
    Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
    });
    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength3 - 1);
        checkInt(this, value, offset, byteLength3, limit - 1, -limit);
      }
      let i2 = 0;
      let mul = 1;
      let sub = 0;
      this[offset] = value & 255;
      while (++i2 < byteLength3 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i2 - 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength3;
    };
    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength3 - 1);
        checkInt(this, value, offset, byteLength3, limit - 1, -limit);
      }
      let i2 = byteLength3 - 1;
      let mul = 1;
      let sub = 0;
      this[offset + i2] = value & 255;
      while (--i2 >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i2 + 1] !== 0) {
          sub = 1;
        }
        this[offset + i2] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength3;
    };
    Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
      if (value < 0) value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0) value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
      return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
      return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
    });
    function checkIEEE754(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError("Index out of range");
      if (offset < 0) throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      ieee754$1.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      ieee754$1.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer2.prototype.copy = function copy2(target, targetStart, start2, end) {
      if (!Buffer2.isBuffer(target)) throw new TypeError("argument should be a Buffer");
      if (!start2) start2 = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start2) end = start2;
      if (end === start2) return 0;
      if (target.length === 0 || this.length === 0) return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start2 < 0 || start2 >= this.length) throw new RangeError("Index out of range");
      if (end < 0) throw new RangeError("sourceEnd out of bounds");
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start2) {
        end = target.length - targetStart + start2;
      }
      const len2 = end - start2;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start2, end);
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start2, end),
          targetStart
        );
      }
      return len2;
    };
    Buffer2.prototype.fill = function fill(val, start2, end, encoding) {
      if (typeof val === "string") {
        if (typeof start2 === "string") {
          encoding = start2;
          start2 = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          const code2 = val.charCodeAt(0);
          if (encoding === "utf8" && code2 < 128 || encoding === "latin1") {
            val = code2;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start2 < 0 || this.length < start2 || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start2) {
        return this;
      }
      start2 = start2 >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val) val = 0;
      let i2;
      if (typeof val === "number") {
        for (i2 = start2; i2 < end; ++i2) {
          this[i2] = val;
        }
      } else {
        const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
        const len2 = bytes.length;
        if (len2 === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i2 = 0; i2 < end - start2; ++i2) {
          this[i2 + start2] = bytes[i2 % len2];
        }
      }
      return this;
    };
    const errors2 = {};
    function E(sym, getMessage, Base2) {
      errors2[sym] = class NodeError extends Base2 {
        constructor() {
          super();
          Object.defineProperty(this, "message", {
            value: getMessage.apply(this, arguments),
            writable: true,
            configurable: true
          });
          this.name = `${this.name} [${sym}]`;
          this.stack;
          delete this.name;
        }
        get code() {
          return sym;
        }
        set code(value) {
          Object.defineProperty(this, "code", {
            configurable: true,
            enumerable: true,
            value,
            writable: true
          });
        }
        toString() {
          return `${this.name} [${sym}]: ${this.message}`;
        }
      };
    }
    E(
      "ERR_BUFFER_OUT_OF_BOUNDS",
      function(name2) {
        if (name2) {
          return `${name2} is outside of buffer bounds`;
        }
        return "Attempt to access memory outside buffer bounds";
      },
      RangeError
    );
    E(
      "ERR_INVALID_ARG_TYPE",
      function(name2, actual) {
        return `The "${name2}" argument must be of type number. Received type ${typeof actual}`;
      },
      TypeError
    );
    E(
      "ERR_OUT_OF_RANGE",
      function(str, range, input) {
        let msg = `The value of "${str}" is out of range.`;
        let received = input;
        if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
          received = addNumericalSeparator(String(input));
        } else if (typeof input === "bigint") {
          received = String(input);
          if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
            received = addNumericalSeparator(received);
          }
          received += "n";
        }
        msg += ` It must be ${range}. Received ${received}`;
        return msg;
      },
      RangeError
    );
    function addNumericalSeparator(val) {
      let res = "";
      let i2 = val.length;
      const start2 = val[0] === "-" ? 1 : 0;
      for (; i2 >= start2 + 4; i2 -= 3) {
        res = `_${val.slice(i2 - 3, i2)}${res}`;
      }
      return `${val.slice(0, i2)}${res}`;
    }
    function checkBounds(buf, offset, byteLength3) {
      validateNumber(offset, "offset");
      if (buf[offset] === void 0 || buf[offset + byteLength3] === void 0) {
        boundsError(offset, buf.length - (byteLength3 + 1));
      }
    }
    function checkIntBI(value, min, max, buf, offset, byteLength3) {
      if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        {
          if (min === 0 || min === BigInt(0)) {
            range = `>= 0${n} and < 2${n} ** ${(byteLength3 + 1) * 8}${n}`;
          } else {
            range = `>= -(2${n} ** ${(byteLength3 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength3 + 1) * 8 - 1}${n}`;
          }
        }
        throw new errors2.ERR_OUT_OF_RANGE("value", range, value);
      }
      checkBounds(buf, offset, byteLength3);
    }
    function validateNumber(value, name2) {
      if (typeof value !== "number") {
        throw new errors2.ERR_INVALID_ARG_TYPE(name2, "number", value);
      }
    }
    function boundsError(value, length, type) {
      if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors2.ERR_OUT_OF_RANGE("offset", "an integer", value);
      }
      if (length < 0) {
        throw new errors2.ERR_BUFFER_OUT_OF_BOUNDS();
      }
      throw new errors2.ERR_OUT_OF_RANGE(
        "offset",
        `>= ${0} and <= ${length}`,
        value
      );
    }
    const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str) {
      str = str.split("=")[0];
      str = str.trim().replace(INVALID_BASE64_RE, "");
      if (str.length < 2) return "";
      while (str.length % 4 !== 0) {
        str = str + "=";
      }
      return str;
    }
    function utf8ToBytes(string, units) {
      units = units || Infinity;
      let codePoint;
      const length = string.length;
      let leadSurrogate = null;
      const bytes = [];
      for (let i2 = 0; i2 < length; ++i2) {
        codePoint = string.charCodeAt(i2);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            } else if (i2 + 1 === length) {
              if ((units -= 3) > -1) bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0) break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0) break;
          bytes.push(
            codePoint >> 6 | 192,
            codePoint & 63 | 128
          );
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0) break;
          bytes.push(
            codePoint >> 12 | 224,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0) break;
          bytes.push(
            codePoint >> 18 | 240,
            codePoint >> 12 & 63 | 128,
            codePoint >> 6 & 63 | 128,
            codePoint & 63 | 128
          );
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str) {
      const byteArray = [];
      for (let i2 = 0; i2 < str.length; ++i2) {
        byteArray.push(str.charCodeAt(i2) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str, units) {
      let c, hi, lo;
      const byteArray = [];
      for (let i2 = 0; i2 < str.length; ++i2) {
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i2);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str) {
      return base64.toByteArray(base64clean(str));
    }
    function blitBuffer(src, dst, offset, length) {
      let i2;
      for (i2 = 0; i2 < length; ++i2) {
        if (i2 + offset >= dst.length || i2 >= src.length) break;
        dst[i2 + offset] = src[i2];
      }
      return i2;
    }
    function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    const hexSliceLookupTable = function() {
      const alphabet = "0123456789abcdef";
      const table = new Array(256);
      for (let i2 = 0; i2 < 16; ++i2) {
        const i16 = i2 * 16;
        for (let j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i2] + alphabet[j];
        }
      }
      return table;
    }();
    function defineBigIntMethod(fn) {
      return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
    }
    function BufferBigIntNotDefined() {
      throw new Error("BigInt not supported");
    }
  })(buffer);
  const Buffer_ = /* @__PURE__ */ getDefaultExportFromCjs(buffer);
  const sha256 = SHA256$2();
  const bf = Buffer_.Buffer;
  var nonce = 0;
  var t;
  var key = "你好,罗根";
  function fu() {
    return typeof t === "function";
  }
  function generatePrivKey(id) {
    let privKey;
    let random = md5(id + randomString(16));
    do {
      privKey = bf.from(random);
    } while (!secp256k1.privateKeyVerify(privKey));
    return {
      key: id,
      iv: privKey
    };
  }
  function toString(appId, deviceId, userId, nonce2) {
    let str = fu() && t.toString().indexOf(key) !== -1 ? `${appId}:${deviceId}:${userId}:${nonce2}` : `${appId}:${userId}:${nonce2}:${deviceId}`;
    let digest = sha256.update(str).digest();
    return bf.from(digest);
  }
  function toHex(arr) {
    return uint8Array(new Uint8Array(arr));
  }
  function uint8Array(uint8Array2) {
    return Array.prototype.map.call(uint8Array2, (x) => ("00" + x.toString(16)).slice(-2)).join("");
  }
  function randomString(len2) {
    len2 = len2 || 10;
    var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    var str = "";
    for (var i2 = 0; i2 < len2; i2++) {
      var index = Math.floor(Math.random() * chars.length);
      str += chars.charAt(index);
    }
    return str;
  }
  function session(that, appId, deviceId, userId) {
    if (typeof that !== "function") {
      return "";
    }
    t = that;
    console.log("%c 你好，罗根 create_session", "color:red");
    let buf = toString(appId, deviceId, userId, nonce);
    const key2 = generatePrivKey(userId);
    let un = new Uint8Array(65);
    secp256k1.publicKeyCreate(key2.iv, false, un);
    const pubStrHex = uint8Array(un);
    const sigObj = secp256k1.ecdsaSign(buf, key2.iv);
    let msgHex = toHex(sigObj.signature);
    nonce++;
    that(key2.key, pubStrHex, msgHex + "01", deviceId);
  }
  const session$1 = (call) => {
    unsafeWindow.luoGenSession = function(that, appId, deviceId, userId) {
      let nav = window.navigator;
      let d = deviceId + nav.appCodeName + nav.appName + nav.appVersion;
      d = md5(d);
      session(that, appId, d, userId);
    };
    call && call();
  };
  const _hoisted_1 = { class: "dialog-footer" };
  const _sfc_main = {
    __name: "ConfigSessionDialog",
    setup(__props) {
      const dialogFormVisible = vue.ref(true);
      const form = vue.reactive({
        deviceName: "",
        modelName: ""
      });
      vue.onMounted(async () => {
        form.deviceName = getBrowserName() + "浏览器";
        form.modelName = getOperatingSystem() + "网页版";
      });
      function getOperatingSystem() {
        const platform = window.navigator.platform;
        const windowsPlatforms = ["Win32", "Win64", "Windows", "WinCE"];
        if (windowsPlatforms.indexOf(platform) !== -1) {
          return "Windows";
        } else {
          return "Not Windows";
        }
      }
      function getBrowserName() {
        var ua = navigator.userAgent;
        var tem, M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i);
        if (/trident/i.test(M[1])) {
          return "IE";
        }
        if (M[1] === "Chrome") {
          tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
          if (tem != null) return tem[1].replace("OPR", "Opera");
        }
        return M[1];
      }
      function configAgree() {
        if (form.deviceName == "" || form.modelName == "") {
          elementPlus.ElMessage("浏览器名称 或 设备名称不能为空");
          return;
        }
        store.setItem("deviceName", form.deviceName);
        store.setItem("modelName", form.modelName);
        monkeyWindow.location.href = window.location.href;
      }
      vue.onUnmounted(() => {
        console.log("文件下载窗口关闭");
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createBlock(vue.unref(elementPlus.ElDialog), {
          "show-close": false,
          "close-on-click-modal": false,
          "close-on-press-escape": false,
          modelValue: dialogFormVisible.value,
          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => dialogFormVisible.value = $event),
          title: "设备名额权限申请"
        }, {
          footer: vue.withCtx(() => [
            vue.createElementVNode("span", _hoisted_1, [
              vue.createVNode(vue.unref(elementPlus.ElButton), {
                type: "primary",
                onClick: configAgree
              }, {
                default: vue.withCtx(() => _cache[16] || (_cache[16] = [
                  vue.createTextVNode(" 同意 ")
                ])),
                _: 1
              })
            ])
          ]),
          default: vue.withCtx(() => [
            vue.createElementVNode("span", null, [
              _cache[4] || (_cache[4] = vue.createTextVNode(" 因权限问题，需要占用一个登录设备名额，请您放心，并不是真的登录，您的每一个操作都没有经过第三方服务器，本脚本根本没有数据非法登录您的账号，更不会擅自获取您的隐私。")),
              _cache[5] || (_cache[5] = vue.createElementVNode("br", null, null, -1)),
              _cache[6] || (_cache[6] = vue.createTextVNode(" 且本脚本已经开源所有代码，欢迎检查是否有后门程序，也欢迎您为本脚本提交更多有趣的功能。 ")),
              vue.createVNode(vue.unref(elementPlus.ElLink), {
                href: "https://github.com/wyndem/ali-video",
                target: "_blank"
              }, {
                default: vue.withCtx(() => _cache[3] || (_cache[3] = [
                  vue.createTextVNode("👉查看开源地址")
                ])),
                _: 1
              }),
              _cache[7] || (_cache[7] = vue.createElementVNode("br", null, null, -1)),
              _cache[8] || (_cache[8] = vue.createElementVNode("br", null, null, -1)),
              _cache[9] || (_cache[9] = vue.createTextVNode(" 如果您还不放心，请卸载本脚本。原因为：没有权限，无法正常使用该脚本。")),
              _cache[10] || (_cache[10] = vue.createElementVNode("br", null, null, -1)),
              _cache[11] || (_cache[11] = vue.createElementVNode("br", null, null, -1)),
              _cache[12] || (_cache[12] = vue.createTextVNode(" 脚本以下功能需要用到： 文件遍历、文件直链、视频解析、分享视频2分钟限制、后缀名称修改、最近在看功能 等。")),
              _cache[13] || (_cache[13] = vue.createElementVNode("br", null, null, -1)),
              _cache[14] || (_cache[14] = vue.createElementVNode("br", null, null, -1)),
              _cache[15] || (_cache[15] = vue.createTextVNode(" 下面是占用设备的浏览器名称和设备名称，如果对默认值不满意，可以现在修改它 "))
            ]),
            _cache[17] || (_cache[17] = vue.createElementVNode("br", null, null, -1)),
            _cache[18] || (_cache[18] = vue.createElementVNode("br", null, null, -1)),
            vue.createVNode(vue.unref(elementPlus.ElForm), { model: form }, {
              default: vue.withCtx(() => [
                vue.createVNode(vue.unref(elementPlus.ElFormItem), {
                  label: "浏览器名称",
                  "label-width": _ctx.formLabelWidth
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(elementPlus.ElInput), {
                      modelValue: form.deviceName,
                      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => form.deviceName = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                }, 8, ["label-width"]),
                vue.createVNode(vue.unref(elementPlus.ElFormItem), {
                  label: "设备名称",
                  "label-width": _ctx.formLabelWidth
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(elementPlus.ElInput), {
                      modelValue: form.modelName,
                      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => form.modelName = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                }, 8, ["label-width"])
              ]),
              _: 1
            }, 8, ["model"])
          ]),
          _: 1
        }, 8, ["modelValue"]);
      };
    }
  };
  const ConfigSessionDialog = /* @__PURE__ */ _export_sfc(_sfc_main, [["__scopeId", "data-v-62c7214b"]]);
  function start() {
    let token = user.getToken();
    if (token == null) {
      elementPlus.ElMessage("阿里云盘助手：末登录，请登陆后使用");
      user.clearAll();
      return;
    }
    apiConfig();
    console.log(`${"\n"} %c ali.video.user.js v${"2.1.8"} 罗根大人 %c https://greasyfork.org/zh-CN/scripts/458626  ${"\n"}${"\n"}`, "color: #fadfa3; background: #030307; padding:5px 0;", "background: #fadfa3; padding:5px 0;");
    if (user.isConfigSession() == false) {
      let app = vue.createApp(ConfigSessionDialog);
      app.mount(
        (() => {
          const app2 = document.createElement("div");
          $2("body").append(app2);
          return app2;
        })()
      );
    } else {
      listen();
      session$1(function() {
        run();
      });
      ui();
    }
    function run(val) {
      $2(function() {
        var versionRegex = /\/(\d+\.\d+\.\d+)/;
        var scriptSrc = $2('script[src*="bundle.js"]').attr("src");
        var match = scriptSrc.match(versionRegex);
        var version2 = match ? match[1] : null;
        console.log("UI版本: " + version2);
        if (version2 == "4.6.0") {
          elementPlus.ElMessageBox.confirm("目前版本不兼容老版本UI,点击按钮安装兼容版本:v2.1.2?", "提示", {
            confirmButtonText: "确定",
            showCancelButton: false,
            closeOnClickModal: false,
            closeOnPressEscape: false,
            showClose: false
          }).then(() => {
            var url = "https://greasyfork.org/zh-CN/scripts/458626?version=1219577";
            window.open(url, "_blank");
          }).catch(() => {
          });
        }
      });
      setInterval(user.refSession, 3e5);
      user.refSession();
      elementPlus.ElMessage({
        message: "阿里云助手加载成功",
        type: "success"
      });
    }
  }
  start();
})(ElementPlus, $, axios, Vue, Artplayer);
